


*************************************************
*** Fichier data/progr3.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


// gestion des variables statiques
// gestion du tas et des pointeurs
// 
*** var
*** x
*** :
*** integer
*** ;
*** y
* Enregistre x
*** :
*** integer
*** ;
*** b
* Enregistre y
*** :
*** boolean
*** ;
*** c
* Enregistre b
*** :
*** string
*** ;
*** d
* Enregistre c
*** :
*** array
*** [
*** 1
*** ..
*** 10
*** ]
*** of
*** string
*** ;
*** p
* Enregistre d
*** :
*** ^
*** integer
*** ;
*** q
* Enregistre p
*** :
*** ^
*** string
*** ;
*** r
* Enregistre q
*** :
*** ^
*** integer
*** ;
*** begin
* Enregistre r
*** x
*** =
[STACK] Variable: x found at Layer: 2
*** 1234564789
*** ;
// 0x4995F6B5
*** y
*** =
[STACK] Variable: y found at Layer: 2
*** 0x7FFFFFFF
*** ;
*** b
*** =
[STACK] Variable: b found at Layer: 2
*** true
*** ;
*** c
*** =
[STACK] Variable: c found at Layer: 2
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 1
*** ]
*** =
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 2
*** ]
*** =
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 3
*** ]
*** =
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 10
*** ]
*** =
*** ;
*** println
*** (
*** x
*** )
[STACK] Variable: x found at Layer: 2
*** ;
*** println
*** (
*** y
*** )
[STACK] Variable: y found at Layer: 2
*** ;
*** println
*** (
*** b
*** )
[STACK] Variable: b found at Layer: 2
*** ;
*** println
*** (
*** c
*** )
[STACK] Variable: c found at Layer: 2
*** ;
//println (d[2]);
*** new
*** q
*** ;
[STACK] Variable: q found at Layer: 2
*** q
* Removed qat layer: 0
[MEMLEAK] Variable: q double malloc tentative.
fr.groupname.compilator.error.MemoryLeak
*** ^
[STACK] Variable: q found at Layer: 2
*** =
*** ;
// 0x41
*** println
*** q
*** ^
[STACK] Variable: q found at Layer: 2
*** ;
*** println
*** p
*** ;
[STACK] Variable: p found at Layer: 2
*** new
*** p
*** ;
[STACK] Variable: p found at Layer: 2
*** println
* Removed pat layer: 0
[MEMLEAK] Variable: p double malloc tentative.
fr.groupname.compilator.error.MemoryLeak
*** p
*** ;
[STACK] Variable: p found at Layer: 2
*** p
*** ^
[STACK] Variable: p found at Layer: 2
*** =
*** x
*** ;
[STACK] Variable: x found at Layer: 2
*** println
*** p
*** ^
[STACK] Variable: p found at Layer: 2
*** ;
*** new
*** r
*** ;
[STACK] Variable: r found at Layer: 2
// resize the heap
*** r
* Removed rat layer: 0
[MEMLEAK] Variable: r double malloc tentative.
fr.groupname.compilator.error.MemoryLeak
*** ^
[STACK] Variable: r found at Layer: 2
*** =
*** 65536
*** ;
*** println
*** (
*** r
*** ^
[STACK] Variable: r found at Layer: 2
*** )
*** ;
*** dispose
*** p
*** ;
[STACK] Variable: p found at Layer: 2
*** println
* Removed pat layer: 0
* Removed pat layer: 1
*** (
*** p
*** )
[STACK] Variable: p found at Layer: 2
*** ;
*** println
*** (
*** p
*** ^
[STACK] Variable: p found at Layer: 2
*** )
[MEMLEAK] Trying to access free or undeclared pointer
*** ;
// heap memory error
*** end

code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
code intermediaire ID
code intermediaire assign
TODO: NodePtrAccess.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
code intermediaire ID
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
code intermediaire assign
TODO: NodePtrAccess.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
code intermediaire ID
code intermediaire assign
TODO: NodePtrAccess.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeDispose
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeId
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeId
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeId
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeDispose
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1234564789:TypeInt_null#), NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#2147483647:TypeInt_null#), NodeAssign(NodeId#b:TypeBoolean#, NodeLiteral#true:TypeBoolean#), NodeAssign(NodeId#c:TypeString#, NodeLiteral#"a":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#1:TypeInt_null#), NodeLiteral#"A":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#), NodeLiteral#"B":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#3:TypeInt_null#), NodeLiteral#"C":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#10:TypeInt_null#), NodeLiteral#"Z":TypeString#), println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#y:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#b:TypeBoolean#)), println_NodeCallFct(NodeList(NodeId#c:TypeString#)), NodeId#q:TypePointer(TypeString)#, NodeAssign(NodePtrAccess(NodeId#q:TypePointer(TypeString)#), NodeLiteral#"A":TypeString#), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#q:TypePointer(TypeString)#))), println_NodeCallFct(NodeList(NodeId#p:TypePointer(TypeInt_null)#)), NodeId#p:TypePointer(TypeInt_null)#, println_NodeCallFct(NodeList(NodeId#p:TypePointer(TypeInt_null)#)), NodeAssign(NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#), NodeId#x:TypeInt_null#), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#))), NodeId#r:TypePointer(TypeInt_null)#, NodeAssign(NodePtrAccess(NodeId#r:TypePointer(TypeInt_null)#), NodeLiteral#65536:TypeInt_null#), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#r:TypePointer(TypeInt_null)#))), NodeDispose(NodeId#p:TypePointer(TypeInt_null)#), println_NodeCallFct(NodeList(NodeId#p:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#p:TypeInt_null#)))
