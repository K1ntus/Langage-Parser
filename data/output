


*************************************************
*** Fichier data/progr1.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.



* MOVE(CONST:100,NAME(a))
* MOVE(BINOP(2,CONST:5,CONST:2),NAME(a))
* CALL(NAME(println),NAME(a))
* MOVE(BINOP(1,NAME(a),CONST:1),NAME(a))
SEQ(Label(L0),SEQ(CJUMP(0,NAME(a),CONST:0,L1,L2),SEQ(Label(L1),SEQ(SEQ(EXP(CALL(NAME(println),NAME(a))),MOVE(BINOP(1,NAME(a),CONST:1),NAME(a))),SEQ(JUMP(NAME(L0),L0),Label(L2))))))

Pre-y86: 
a = 100
#t0 = 5 2 2
a = #t0
label: L1
label: L2
#t1 = a 1 1
a = #t1

Programme y86 :

.pos 0
	irmovl stack,%esp
	jmp main
	popl %eax

div:
	popl %eax
	popl %eax


main:
	irmovl 100,%eax
	rmmovl %eax,la
	irmovl 5,%ecx
	pushl %ecx
	irmovl 2,%ecx
	pushl %ecx
	call mult
	iaddl 8,%esp
	rmmovl %eax,la
L1:
L2:
	isubl 1,%eax
	rmmovl %eax,la
	halt

mult:
	mrmovl 4(%esp), %ecx
	mrmovl 8(%esp), %edx
	xorl %eax, %eax
multbcl:
	andl %edx, %edx
	je multfin
	addl %ecx, %eax
	isubl 1,%edx
	jmp multbcl
multfin: ret
	.align 4
la:	.long 0
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
- NodeOp well typed
- Assign well typed
--- CheckType NodeWhile
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr2.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// gestion des variables statiques
//
// 0x4995F6B5

* MOVE(CONST:1234564789,NAME(x))
* MOVE(CONST:2147483647,NAME(y))
* MOVE(CONST:1,NAME(b))
* MOVE(CONST:-1,NAME(c))
* MOVE(CONST:-1,MEM(BINOP(0,NAME(d),CONST:1)))
* MOVE(CONST:-1,MEM(BINOP(0,NAME(d),CONST:2)))
* MOVE(CONST:-1,MEM(BINOP(0,NAME(d),CONST:3)))
* MOVE(CONST:-1,MEM(BINOP(0,NAME(d),CONST:10)))
* CALL(NAME(println),NAME(x))
* CALL(NAME(println),NAME(y))
* CALL(NAME(println),NAME(b))
* CALL(NAME(println),NAME(c))
* CALL(NAME(println),MEM(BINOP(0,NAME(d),CONST:2)))

Pre-y86: 
x = 1234564789
y = 2147483647
b = 1
c = -1

Programme y86 :

.pos 0
	irmovl stack,%esp
	jmp main
	popl %eax

div:
	popl %eax
	popl %eax


main:
	pushl ebx
	irmovl 1234564789,%eax
	rmmovl %eax,lx
	irmovl 2147483647,%ecx
	rmmovl %ecx,ly
	irmovl 1,%edx
	rmmovl %edx,lb
	irmovl -1,%ebx
	rmmovl %ebx,lc
	popl ebx
	halt

mult:
	mrmovl 4(%esp), %ecx
	mrmovl 8(%esp), %edx
	xorl %eax, %eax
multbcl:
	andl %edx, %edx
	je multfin
	addl %ecx, %eax
	isubl 1,%edx
	jmp multbcl
multfin: ret
	.align 4
lb:	.long 0
lc:	.long 0
lx:	.long 0
ly:	.long 0
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr3.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


// gestion des variables statiques
// gestion du tas et des pointeurs
// 
// 0x4995F6B5
// 0x41
// resize the heap
// heap memory error

* MOVE(CONST:1234564789,NAME(x))
* MOVE(CONST:2147483647,NAME(y))
* MOVE(CONST:1,NAME(b))
* MOVE(CONST:-1,NAME(c))
* MOVE(CONST:-1,MEM(BINOP(0,NAME(d),CONST:1)))
* MOVE(CONST:-1,MEM(BINOP(0,NAME(d),CONST:2)))
* MOVE(CONST:-1,MEM(BINOP(0,NAME(d),CONST:3)))
* MOVE(CONST:-1,MEM(BINOP(0,NAME(d),CONST:10)))
* CALL(NAME(println),NAME(x))
* CALL(NAME(println),NAME(y))
* CALL(NAME(println),NAME(b))
* CALL(NAME(println),NAME(c))
* CALL(NAME(println),MEM(BINOP(0,NAME(d),CONST:2)))
* MOVE(CONST:-1,MEM(NAME(q)))
* CALL(NAME(println),MEM(NAME(q)))
* CALL(NAME(println),NAME(p))
* CALL(NAME(println),NAME(p))
* MOVE(NAME(x),MEM(NAME(p)))
* CALL(NAME(println),MEM(NAME(p)))
* MOVE(CONST:65536,MEM(NAME(r)))
* CALL(NAME(println),MEM(NAME(r)))
* CALL(NAME(println),NAME(p))
* CALL(NAME(println),MEM(NAME(p)))
