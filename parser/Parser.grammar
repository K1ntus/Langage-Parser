
//////////////////////////////////////////////////
// version 20190401
//////////////////////////////////////////////////

%package "ubordeaux.deptinfo.compilation.project.main";
%class "Parser";

%import "java.util.Iterator";
%import "java.util.List";
%import "java.util.Vector";
%import "java.util.Scanner";
%import "java.util.HashMap";
%import "java.util.Map";
%import "java.util.Stack";
%import "ubordeaux.deptinfo.compilation.project.node.*";
%import "ubordeaux.deptinfo.compilation.project.type.*";
%import "ubordeaux.deptinfo.compilation.project.intermediateCode.*";

%import "fr.c12.compilator.environment.*";
%import "fr.c12.compilator.special.*";
%import "fr.c12.compilator.error.*";



%embed {: 
	public HashMap<String,Node> symtab = new HashMap<String,Node> ();	//ref du td6 a completer
	
	//public Stm statement;	//pour utiliser les methodes... a completer
	
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
		System.err.format("*** " + msg + " ligne %d, colonne %d\n",
			Symbol.getLine(token.getStart()),
			Symbol.getColumn(token.getStart()));
		
	}
	
	public void semanticErrorReformated(Symbol token) {
			System.err.format(" ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
		}
		
	private TypeEnvironment typeEnvironment = new TypeEnvironment("types");
	private ProcedureEnvironment procedureEnvironment = new ProcedureEnvironment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;
	
	private boolean critical_mode = false;
	
	
:};

%init {: 
	report = new Events();
:};

// KEYWORDS
%terminals TOKEN_TYPE, TOKEN_STRING, TOKEN_INTEGER, TOKEN_BOOLEAN, TOKEN_ARRAY, TOKEN_OF, TOKEN_STRUCT;	//OK
%terminals TOKEN_VAR, TOKEN_PROCEDURE, TOKEN_FUNCTION, TOKEN_BEGIN, TOKEN_END, TOKEN_NEW, TOKEN_DISPOSE;	//OK

%terminals TOKEN_PRINTLN, TOKEN_READLN, TOKEN_RETURN, TOKEN_IF, TOKEN_THEN, TOKEN_ELSE, TOKEN_WHILE, TOKEN_DO;	//OK
%terminals TOKEN_SWITCH, TOKEN_CASE, TOKEN_DEFAULT;	//OK

// PONCTS
%terminals TOKEN_SEMIC, TOKEN_DOTDOT, TOKEN_COLON, TOKEN_COMMA; //OK
%terminals TOKEN_LPAR, TOKEN_RPAR, TOKEN_LBRACKET, TOKEN_RBRACKET, TOKEN_LBRACE, TOKEN_RBRACE;	//OK

// OPERATORS
%terminals TOKEN_AFF, TOKEN_CIRC;
%terminals TOKEN_PLUS, TOKEN_MINUS, TOKEN_TIMES, TOKEN_DIV;	//OK
%terminals TOKEN_AND, TOKEN_OR, TOKEN_NOT;	//OK
%terminals TOKEN_LT, TOKEN_LE, TOKEN_GT, TOKEN_GE, TOKEN_EQ, TOKEN_NE;	//OK

// LITERALS
%terminals TOKEN_IDENTIFIER, TOKEN_LIT_INTEGER, TOKEN_LIT_STRING, TOKEN_TRUE, TOKEN_FALSE, TOKEN_NULL; //OK


//PRIOTITIES
%right TOKEN_CIRC, TOKEN_NOT;
%right TOKEN_ELSE;

%left TOKEN_AND, TOKEN_AFF, TOKEN_OR;
%left TOKEN_PLUS, TOKEN_MINUS, TOKEN_TIMES, TOKEN_DIV;
%left TOKEN_LT, TOKEN_LE, TOKEN_GT, TOKEN_GE, TOKEN_EQ, TOKEN_NE;

%left TOKEN_IF;
%left TOKEN_THEN;

/***
* A completer
***/

%goal program;

/***
* Semantique A completer
*
* Quelques astuces:
*
* a) ne mettez jamais de lettres accentuees, Beaver ne fonctionnerait pas
*
* b) quand vous souhaitez mettre du code avant la fin de la regle, 
*     X= A {: je voudrais mettre du code ici :} B {: pour l'exploiter ici :}
* utilisez une rege vide comme ceci:
*
*     X= A empty_X B {: pour l'exploiter ici  :} ;
*     empty_X= {: je voudrais mettre du code ici :};
*
* c) pour implementer une liste, faites comme ceci:
* xxx_list=
*	xxx_list.list xxx.elt {: list.add(elt); return list; :}
*	| xxx.elt {: MyList list = new MyList(); list.add(elt); return list; :}
*	;
*	
*
***/
%typeof TOKEN_LIT_INTEGER = "Integer";
%typeof TOKEN_LIT_STRING, TOKEN_IDENTIFIER, TOKEN_FUNCTION, type_declaration = "String";

%typeof type = "Type";
%typeof feature_type = "TypeFeature";
%typeof range_type = "Type";
%typeof feature_list_type = "TypeFeatureList";

%typeof statement = "Node";
%typeof literal  = "NodeLiteral";
%typeof variable_access, expression = "NodeExp";
//%typeof case_statement = "NodeList";
%typeof argt = "NodeId";
%typeof case_default = "NodeCase";
%typeof case_statement = "NodeList";

%typeof statement_list, expression_list, argt_list, block = "NodeList";
%typeof case_statement_list = "NodeCaseList";
%typeof identifier_list = "IdentifierList";
//%typeof case_identifier_list = "IdentifierList";

%typeof readln_statement, println_statement, procedure_expression = "NodeCallFct";
%typeof procedure_head, procedure_definition = "TypeFunct";

//%typeof pop_stackenv, push_stackenv = "Void";







program=   
	type_declaration_part.tp			//Type env
	variable_declaration_part.vp 		//Type var
	procedure_definition_part.pp		//Type procedure
	DEBUG_clear_useless_stack
	//DEBUG_print_stack
	TOKEN_BEGIN	push_stackenv.pu		//On empile stackenv
	statement_list.l 				//Inserer variable dans env
	TOKEN_END	pop_stackenv.pop 		//On depile stackenv
	{: 
		System.out.println("\n[C.I.] Variable Declaration Part:"); 
		Map<String, Type> variable_table = stackEnvironment.getEnvironment().get(0);
		for(String key : variable_table.keySet()) {
		System.out.println("Label:" + key + "@Type:" + variable_table.get(key));
		//Generer code intermediaire
}
		l.generateIntermediateCode();
	    return _symbol_l; 
    :}	
	;
	
/*
Declaration named type

normalement OK
*/
type_declaration_part= 
	/* empty */	
	| TOKEN_TYPE type_declaration_list
	;

type_declaration_list=
	type_declaration_list type_declaration
	| type_declaration
	;

type_declaration=
	TOKEN_IDENTIFIER.name TOKEN_AFF type.t TOKEN_SEMIC 		
		{:
			try{
				//System.out.println("Registering type:" + t.toString());
				typeEnvironment.putVariable(name, t);
			} catch (RedefinitionType e) {
				System.err.println(e);
			} finally {
				return new EmptySymbol();
			}
		:}
	;
	
/* 
Type definition 
*/
type=
	simple_type			//OK
	| named_type		//OK
	| index_type		//OK
	| array_type		//OK
	| pointer_type		//OK
	| structure_type 	//OK
	;
	
//OK
simple_type=
	TOKEN_STRING		{: return new TypeString();		:}
	| TOKEN_INTEGER		{: return new TypeInt();		:}
	| TOKEN_BOOLEAN		{: return new TypeBoolean();	:}
	;
	
named_type=
	TOKEN_IDENTIFIER.r /*empty*/	{: 
		//System.out.println("Named: " + r); 
		try {
			return typeEnvironment.getVariableValue(r);
		} catch(UnknownType e) {	//Si pas deja present
			System.err.println(e);
			return new TypeNamed(r);
		}
	:}
	;
	
index_type=
	enumerated_type	//OK
	| subrange_type	//OK
	;

enumerated_type=//{: return new TypeEnumRange(new TypeItemEnum(0, list.first()), new TypeItemEnum(0, list.last())); :} //OLD
	init_enumerated_type TOKEN_LPAR identifier_list.id_l TOKEN_RPAR	
		{: 
			Vector<Type> array_tmp = new Vector<>();
			int const_id = 0;
			for(String identifier : id_l) {
				array_tmp.add(new TypeItemEnum(const_id, identifier));
				const_id +=1;
			}
			return new TypeTuple(array_tmp);
		:}
	;
	
init_enumerated_type= 
	;

subrange_type= 
	TOKEN_LIT_INTEGER.min TOKEN_DOTDOT TOKEN_LIT_INTEGER.max		
		{: 	
			if(min > max) {
				System.err.println("[InvalidType@subrange_type] min@" + min + " is greater than max@" +max);
				if(critical_mode)
					System.exit(0);
			}
			return new TypeArrayRange(new TypeInt(min), new TypeInt(max)); 
		:}
	| TOKEN_IDENTIFIER.id_min TOKEN_DOTDOT TOKEN_IDENTIFIER.id_max	
		{:	
			try {
				int val_min = typeEnvironment.getEnumType(id_min).getValue();
				int val_max = typeEnvironment.getEnumType(id_max).getValue();

				if(val_min > val_max) {
					System.err.println("[InvalidType@subrange_type] min@[" + id_min + ":" + val_min + "] is greater than max@[" + id_max + ":" +val_max +"]");
					if(critical_mode)
						System.exit(0);
				}
				
				return new TypeArrayRange(new TypeInt(val_min), new TypeInt(val_max));
				
			} catch (NoSuchFieldException e) {
				System.err.println("subrange_type: " + e );
				return new TypeArrayRange(new TypeInt(0), new TypeInt(0));
			}														
		:}
	;
	
array_type=
	TOKEN_ARRAY TOKEN_LBRACKET range_type.range TOKEN_RBRACKET TOKEN_OF type.t	{: return new TypeArray(range, t); :}
	;
	
range_type=
	enumerated_type	//OK
	| subrange_type//.t	{: System.out.println(t.toString()); return t; :}	//OK
	| named_type	//OK
	;
	
pointer_type=
	TOKEN_CIRC type.t	{: return new TypePointer(t); :}
	;
	
structure_type=
	TOKEN_STRUCT TOKEN_LBRACE feature_list_type.list TOKEN_RBRACE	{: return new TypeStruct(list); :}
	;
	
	
feature_list_type=
	feature_list_type.list feature_type.elem	{: list.add(elem); return list; :}
	| feature_type.elem							{: TypeFeatureList list = new TypeFeatureList(elem); return list; :}
	;
	
feature_type=
	TOKEN_IDENTIFIER.id TOKEN_COLON type.t TOKEN_SEMIC	{: System.out.println("FEATURES"); return new TypeFeature(id, t); :}
	;
	
	
	
/*
Declaration typed variable

normalement OK
*/
//Partie avant le begin ou on declare les variables du prgm
variable_declaration_part= 
	/* empty */ 
	| TOKEN_VAR variable_declaration_list 
	;
	
variable_declaration_list=
	variable_declaration_list variable_declaration	//handle la recurrence
	| variable_declaration						
	;
	
variable_declaration=
	identifier_list.id_list TOKEN_COLON type.t TOKEN_SEMIC 	
															{:
																for(String str : id_list){
																	try {
																		stackEnvironment.add_node_to_latest_portability(str, t);
																	}catch ( RedefinitionVariable e) {
																		System.err.println(e + " at Line : " + Symbol.getLine(t.getStart()));
																		if(critical_mode)
																			System.exit(0);
																	}
																}
																
																return _symbol_id_list;
															:}
	;
	
identifier_list=
	identifier_list.list TOKEN_COMMA TOKEN_IDENTIFIER.id		{: 
																	list.add(id); return list; 
																:}
	| TOKEN_IDENTIFIER.name										{: 
																	return new IdentifierList(name); 
																:}
	;
	
	
/*
Declaration AND Definition of procedure and functions
*/
procedure_definition_part=
	| procedure_definition_list
	;
	
procedure_definition_list=
	procedure_definition_list procedure_definition
	| procedure_definition	
		
	;
	
procedure_definition=
	procedure_definition_head.type_fct block.stm {:	System.out.println("stm: " + stm);
													//System.out.println("Label:"+type_fct.getName());
													//System.out.println(stm.generateIntermediateCode());
													System.out.println(new Label(new LabelLocation()));
													stm.generateIntermediateCode();
													return stm; :}
		/*{: 
			type_fct.setDefined(true);
			stackEnvironment.getEnvironment().pop(); 
			try {
				//procedureEnvironment.putVariable(type_fct.getName(), type_fct); 
			} catch (RedefinitionFunction e) {
				System.err.println(e + " at Line : " + Symbol.getLine(type_fct.getStart()));
				if(critical_mode)
					System.exit(0);
			}
		
			return type_fct; 
		:}*/
	| procedure_declaration_head TOKEN_SEMIC		
		/*{: 
			type_fct.setDefined(false); 
			try {
				procedureEnvironment.putVariable(type_fct.getName(), type_fct); 
			} catch (RedefinitionFunction e) {
				System.err.println(e + " at Line : " + Symbol.getLine(type_fct.getStart()));
				if(critical_mode)
					System.exit(0);
			}

			return type_fct; 
		:}*/
	;

procedure_definition_head=
	procedure_head.type_fct
	{:
		try {
			type_fct.setDefined(true); 
			procedureEnvironment.putVariable(type_fct.getName(), type_fct); 
		} catch (RedefinitionFunction|RedefinitionFunctionPrototype e) {
			System.err.println(e + " at Line : " + Symbol.getLine(type_fct.getStart()));
			if(critical_mode)
				System.exit(0);
		}
		return type_fct;
	:}
	;
	
procedure_declaration_head=
	procedure_head.type_fct
		{:
			try {
				type_fct.setDefined(false); 
				procedureEnvironment.putVariable(type_fct.getName(), type_fct); 
			} catch (RedefinitionFunction|RedefinitionFunctionPrototype e) {
				System.err.println(e + " at Line : " + Symbol.getLine(type_fct.getStart()));
				if(critical_mode)
					System.exit(0);
			}
			return type_fct;
		:}
	;
	
	
	
	
//Definition
procedure_head=
	TOKEN_PROCEDURE TOKEN_IDENTIFIER.funct_name TOKEN_LPAR argt_part.args TOKEN_RPAR 
			{:				
				TypeTuple params_tuple = new TypeTuple();	
				stackEnvironment.getEnvironment().push(new HashMap<String, Type>()); 			

				for(Node n : args.getList()) {
					try {
						NodeId n_id = (NodeId) n;
						params_tuple.add(new TypeFeature(n_id.getName(), n_id.getType()));
						stackEnvironment.add_node_to_latest_portability(n_id.getName(), n_id.getType());
				
					}catch ( RedefinitionVariable e) {
						System.err.println(e + " at Line : " + Symbol.getLine(args.getStart()));
						if(critical_mode)
							System.exit(0);
					}
				}
				
				
				TypeFunct type_function = new TypeFunct(funct_name, params_tuple, new TypeVoid());
				return type_function;
			:}
																		
	| TOKEN_FUNCTION TOKEN_IDENTIFIER.funct_name TOKEN_LPAR argt_part.args TOKEN_RPAR TOKEN_COLON type.t 
			{:
				TypeTuple params_tuple = new TypeTuple();
				stackEnvironment.getEnvironment().push(new HashMap<String, Type>()); 
				
				for(Node n : args.getList()) {
					try {
						NodeId n_id = (NodeId) n;
						params_tuple.add(new TypeFeature(n_id.getName(), n_id.getType()));
						stackEnvironment.add_node_to_latest_portability(n_id.getName(), n_id.getType());

					}catch ( RedefinitionVariable e) {
						System.err.println(e + " at Line : " + Symbol.getLine(args.getStart()));
						if(critical_mode)
							System.exit(0);
					}
				}
				
				TypeFunct type_function = new TypeFunct(funct_name, params_tuple, t);

				//stackEnvironment.getEnvironment().pop(); 
				return type_function;
				//return new NodeCallFct(funct_name, type_function, new NodeList());
			:}
	;
	
	
argt_part=
	/* empty */
	| argt_list
	;
	
argt_list=
	argt_list.nl TOKEN_COMMA argt.elem		{: nl.add(elem); return nl; :}
	| argt.elem								{: NodeList nl = new NodeList(elem); return nl; :}
	;
	
argt=
	TOKEN_IDENTIFIER.id TOKEN_COLON type.t	{: return new NodeId(id, t); :}
	;
	
	
	
/*
Blocs
*/
block=
	variable_declaration_part 		//Inserer varaible dans stack environnement
	TOKEN_BEGIN	push_stackenv		//On empile stackenv
	statement_list.list 			
	TOKEN_END	pop_stackenv 		//On depile stackenv et return
	{: return _symbol_list; :}
	;
pop_stackenv  =		{:	
						//System.out.println("[STACK] Poped one more stack layer"); 
						stackEnvironment.getEnvironment().pop(); 
						return new EmptySymbol();	
					:}	
				;

push_stackenv =		{:	
						//System.out.println("[STACK] Pushed one more stack layer"); 
						stackEnvironment.getEnvironment().push(new HashMap<String, Type>(stackEnvironment.getEnvironment().peek())); 
						return new EmptySymbol(); 
					:}	
				;
//DEBUG_print_stack = {: System.out.println("Size: " + stackEnvironment.getEnvironment().size() + "\nCurrent Stack State: " + stackEnvironment.getEnvironment().toString()); return new EmptySymbol(); :};

DEBUG_clear_useless_stack = 
	{: 
		while(stackEnvironment.getEnvironment().size() > 1) { 
			stackEnvironment.getEnvironment().pop(); 
		} 
		return new EmptySymbol(); 
	:}
	;
/*
Instructions
*/
statement_list=
	statement_list.root statement.elt	{: root.add(elt); return root; :}
	| statement.elt						{: return new NodeList(elt); :}
	;


statement=
	simple_statement	
	| structured_statement
	;
	
simple_statement=
	assignment_statement
	| procedure_statement	//OK
	| new_statement			//OK
	| dispose_statement		//OK
	| println_statement		//OK
	| readln_statement		//OK
	| return_statement		//OK
	;
	
//OK
assignment_statement=
	variable_access.e1 TOKEN_AFF expression.e2 TOKEN_SEMIC	
		{:  
		//System.out.println("ASSIGN;::::" + e1.getType() + " -> " + e2.getType());
			
			//Type(e1) = Type(e2), ou Pointer(Type(e1)) = Type(e2) 
			if(!e1.getType().equals(e2.getType()) && !(new TypePointer(e1.getType()).equals(e2.getType()) )) {
				System.err.println("[InvalidAffectation] Impossible to assign a " + e1.getType() + " to " + e2.getType());
				if(critical_mode)
					System.exit(0);
				System.err.println("[InvalidAffectation] Automatically recover from error.");
				return new NodeAssign(e1,e1);
			}
			return new NodeAssign(e1, e2); 
		:}
	;

procedure_statement=
	procedure_expression.n TOKEN_SEMIC	{: return n; :}
	;
	
	
//NOT FINISHED
//faudrait match si les params sont valides aussi
//On cree un nouveau stack, et args = params
//Semble bon a check
	//A refaire, il faut juste instancier les parametres lors du parcours de la fonction
procedure_expression=
	TOKEN_IDENTIFIER.func_name TOKEN_LPAR expression_part.args TOKEN_RPAR	{: 
																				try{
																					stackEnvironment.getEnvironment().push(new HashMap<String, Type>()); //push env
																					HashMap<String, Type> table = (HashMap<String, Type>) stackEnvironment.getEnvironment().peek();
																					
																					TypeFunct fct_type = procedureEnvironment.getTypeFct(func_name);
																					Iterator<Type> it = fct_type.getParams().iterator();
																					while(it.hasNext()) {
																						try {
																							TypeFeature type_feature= (TypeFeature) it.next();
																							stackEnvironment.add_node_to_latest_portability(type_feature.getName(), type_feature.getType());	
																						} catch (RedefinitionVariable e) {
																							System.err.println(e);
																						}
																					}
																					return new NodeCallFct(func_name, fct_type, args);
																				
																				}catch(NoSuchFieldException e){
																					System.out.println("Procedure Expression: " + e + " at Line : " + Symbol.getLine(args.getStart()));
																					return new NodeCallFct(func_name, new TypeFunct(func_name, new TypeTuple(), new TypeVoid()), args);
																				}
																				
																			:}
	;
	
	
//OK
expression_part=
	/* empty */
	| expression_list
	;
	

//OK	
expression_list=
	expression_list.root TOKEN_COMMA expression.elt		{: root.add(elt); return root; :}
	| expression.expr									{: return new NodeList(expr); :}
	;

//PAS OK
new_statement=
	TOKEN_NEW variable_access.node TOKEN_SEMIC			
	{: 
		if(!(node.getType() instanceof TypePointer)) {
			System.err.println("[InvalidPointerAccess] Trying to new a variable that is not a pointer.");
			if(critical_mode)
				System.exit(0);
			return node;
		}
		/*
		if(node instanceof NodeId) {
			NodeId n_id = (NodeId) node;
			try {
				stackEnvironment.alloc_variable(n_id.getName()); 
			}catch(MemoryLeak e) {
				System.err.println(e + " at Line : " + Symbol.getLine(node.getStart()));
				if(critical_mode)
					System.exit(0);
				return node;
			}
		}
		*/
		
		return new NodeNew(node); 
	:}
	;
	
//PAS OK
//Supprimer pointeur de q dans toutes les piles d'environments
dispose_statement=
	TOKEN_DISPOSE variable_access.node TOKEN_SEMIC		
							{: 
								if(!(node.getType() instanceof TypePointer)) {
									System.err.println("[InvalidPointerAccess] Trying to dispose a variable that is not a pointer.");
									if(critical_mode)
										System.exit(0);
									return node;
								}
								/*
								 * if(node instanceof NodeId) {
									NodeId n_id = (NodeId) node;
									try {
										stackEnvironment.dispose_variable(n_id.getName()); 
									}catch(MemoryLeak e) {
										System.err.println(e + " at Line : " + Symbol.getLine(node.getStart()));
										if(critical_mode)
											System.exit(0);
										return node;
									}
								}
								*/
								return new NodeDispose(node); 
							:}
	;
	
//OK
println_statement=
		TOKEN_PRINTLN expression.args TOKEN_SEMIC	
			{: 
				TypeTuple params_tuple = null;

				if(args instanceof NodeCallFct) {
					NodeCallFct tmp = (NodeCallFct) args;
					params_tuple= new TypeTuple(new TypeFeature(tmp.getName(), tmp.getType()));
				} else {
					params_tuple= new TypeTuple(new TypeFeature("println nodelist", args.getType()));
				}

				
				return new NodeCallFct(
						"println",
						new TypeFunct("println", params_tuple, new TypeVoid()),
						new NodeList(args));
			
			:}
		;	

//TODO!!!!
readln_statement=
	TOKEN_READLN expression.e TOKEN_SEMIC	
		{: 
			return new NodeCallFct(
				"readln", 
				new TypeFunct("readln", 
					new TypeTuple(e.getType()), 
					e.getType()),
				new NodeList());
		:}
	;

//OK	
return_statement=
	TOKEN_RETURN expression.node TOKEN_SEMIC	{: return new NodeReturn(node); :}
	;
	
structured_statement=
	block
	| if_statement		//OK
	| while_statement	//OK
	| switch_statement	//OK
	;

//OK	
if_statement=
	TOKEN_IF expression.e TOKEN_THEN statement.stm_if				
		{:	
			return new NodeIf(e, stm_if);
		:}
	| TOKEN_IF expression.e TOKEN_THEN statement.stm_if TOKEN_ELSE statement.stm_else 
		{: 
			return new NodeIf(e, stm_if, stm_else); 
		:}
;


//OK	
while_statement=
	TOKEN_WHILE expression.e1 TOKEN_DO statement.stm	{:	return new NodeWhile(e1, stm);	:}
	;

//OK	
switch_statement=
	TOKEN_SWITCH expression.root TOKEN_BEGIN case_statement_list.case_list TOKEN_END	{: return new NodeSwitch(root, case_list);	:}
	;

/*

//OK	
case_statement_list=
	case_statement_list.list case_statement.item	
		{: 
			List<Node> lst_entry = item.getList();
			for(Node n : lst_entry) {
				NodeCase n_case = (NodeCase) n;
				list.add(n_case); 
			}
			return list; 
		:}
	| case_statement.list		
	;
	
case_statement=
	TOKEN_CASE identifier_list.idl TOKEN_COLON statement.st 
		{: 
			NodeCaseList res = new NodeCaseList();
			for(String id : idl) {
				res.add(new NodeCase(id, st));
			}
			
			return res;
		:}
	| TOKEN_DEFAULT TOKEN_COLON statement.state {: return new NodeCaseList(new NodeCase(state)); :}
	;
*/
case_statement_list=
		case_statement_list.list case_statement.case_arr case_default.case_default
			{:
				Iterator<Node> it = case_arr.iterator();
				while(it.hasNext()) {
					NodeCase nc = (NodeCase) it.next();
					list.add(nc);
				}

				if(case_default instanceof NodeCase) {
					list.add(case_default);
				}
				
				return list;
				
			:}
		| case_statement.stm	
			{: 
				NodeCaseList list = new NodeCaseList();
				
				Iterator<Node> it = stm.iterator();
				while(it.hasNext()) {
					NodeCase nc = (NodeCase) it.next();
					list.add(nc);
				}
				return list;
			:}				
		;
		
	case_statement=
		TOKEN_CASE identifier_list.id_list TOKEN_COLON statement.stm 
			{: 
				NodeList res = new NodeList();
				for(String case_name : id_list) {
					res.add(new NodeCase(case_name, stm));
				}
				return res;
			
			:}
		;
		
	case_default=
		/* empty */
		| TOKEN_DEFAULT TOKEN_COLON statement.stm	{: return new NodeCase(null, stm); :}
		;

/*
Expressions
*/

//Recup les valeurs stockees dans les environnements (ou pas, a check)
variable_access=
	TOKEN_IDENTIFIER.name		
		{:	
			try{
				Type t = stackEnvironment.get_node_reachable(name);  
				return new NodeId(name, t);
			} catch (UnknownVariable e) {	//Not a normal variable
				try {						//Check enum
					Type tmp = typeEnvironment.getEnumType(name);
					if(tmp instanceof TypeItemEnum) {
						TypeItemEnum t = (TypeItemEnum) tmp;
						return new NodeId(t.getRefEnumRange(), new TypeInt(t.getValue()));
					}
					return new NodeId(null, null);					
					
				} catch (NoSuchFieldException e2) {

					System.err.println(e2 + " at Line : ");
					if(critical_mode)
						System.exit(0);
					return new NodeId(null, null);
				}
			}
		:}

	| variable_access.var TOKEN_LBRACKET expression.e TOKEN_RBRACKET	//Tableau
		{:
			if(!(var.getType() instanceof TypeArray) ) {
				System.err.println("[InvalidArrayAccess] Trying to access a variable as array@" + var.getType() + "with " +e);
				if(critical_mode)
					System.exit(0);
				System.err.println("[InvalidArrayAccess] Automatically recover from syntax error.");
				return var;
				
			}
			if(e.getType() instanceof TypeBoolean || e.getType() instanceof TypeString) {
				System.err.println("[InvalidArrayAccess] Invalid Type@" + e.getType() + " to access array.");
				if(critical_mode)
					System.exit(0);
				System.err.println("[InvalidArrayAccess] Automatically recover from syntax error.");
				return var;
				//return new NodeArrayAccess(var, new NodeLiteral(new TypeInt(0), 0));
			}
			return new NodeArrayAccess(var, e); 
		:}
	
	| expression.e TOKEN_CIRC	//Pointeur
		{: 
		/*
		if(!(e.getType() instanceof TypePointer)){
			System.err.println("[MEMLEAK] Trying to access free or undeclared pointer");
			
			if(critical_mode)
				System.exit(0);
			return e;
		}
		*/
		return new NodePtrAccess(e);	:}			
	;
	
expression=
	expression.e1 TOKEN_PLUS expression.e2		
		{: 

			//Gerer cas pointeur aussi
			if(!(e1.getType() instanceof TypeInt) || !(e2.getType() instanceof TypeInt)) {
				System.out.println("[InvalidBinaryOperation->Arithmetic] Plus: left@"+e1.getType() + ", right@"+e2.getType());
				return new NodeOp("invalid expr", e1, e2);
			}
			return new NodeOp("plus", e1, e2); 
		:}
	| expression.e1 TOKEN_MINUS expression.e2
		{: 
			//Gerer cas pointeur aussi
			if(!(e1.getType() instanceof TypeInt) || !(e2.getType() instanceof TypeInt)) {
				System.out.println("[InvalidBinaryOperation->Arithmetic] Minus: left@"+e1.getType() + ", right@"+e2.getType());
				return new NodeOp("invalid expr", e1, e2);
			}
			return new NodeOp("minus", e1, e2); 
		:}
	| expression.e1 TOKEN_TIMES expression.e2
		{: 
			//Gerer cas pointeur aussi
			if(!(e1.getType() instanceof TypeInt) || !(e2.getType() instanceof TypeInt)) {
				System.out.println("[InvalidBinaryOperation->Arithmetic] Times: left@"+e1.getType() + ", right@"+e2.getType());
				return new NodeOp("invalid expr", e1, e2);
			}
			return new NodeOp("times", e1, e2); 
		:}
	| expression.e1 TOKEN_DIV expression.e2
		{: 
			//Gerer cas pointeur aussi
			if(!(e1.getType() instanceof TypeInt) || !(e2.getType() instanceof TypeInt)) {
				System.out.println("[InvalidBinaryOperation->Arithmetic] Divide: left@"+e1.getType() + ", right@"+e2.getType());
				return new NodeOp("invalid expr", e1, e2);
			}
			return new NodeOp("divide", e1, e2); 
		:}
	| TOKEN_MINUS expression.e
		{: 
			return new NodeOp("u_minus", e); 
		:}
	
	| expression.e1 TOKEN_OR expression.e2		{: return new NodeRel("or", e1, e2); :}
	| expression.e1 TOKEN_AND expression.e2		{: return new NodeRel("an", e1, e2); :}
	| TOKEN_NOT expression.e					{: return new NodeRel("no", e, new NodeLiteral(new TypeBoolean(), false)); :}
	| expression.e1 TOKEN_LT expression.e2		{: return new NodeRel("lt", e1, e2); :} 
	| expression.e1 TOKEN_LE expression.e2		{: return new NodeRel("le", e1, e2); :} 
	| expression.e1 TOKEN_GT expression.e2		{: return new NodeRel("gt", e1, e2); :} 
	| expression.e1 TOKEN_GE expression.e2		{: return new NodeRel("ge", e1, e2); :} 	
	| expression.e1 TOKEN_EQ expression.e2		{: return new NodeRel("eq", e1, e2); :} 
	| expression.e1 TOKEN_NE expression.e2		{: return new NodeRel("ne", e1, e2); :} 
	| TOKEN_LPAR expression.e TOKEN_RPAR		{: return e; :}
	| procedure_expression
	| variable_access		//OK
	| literal				//OK
	; 
	
/*
Literal Expression

normalement OK
*/
literal=
	TOKEN_LIT_INTEGER.value		{: return new NodeLiteral(new TypeInt(), value);		:}
	| TOKEN_LIT_STRING.value	{: return new NodeLiteral(new TypeString(), value);		:}
	| TOKEN_TRUE				{: return new NodeLiteral(new TypeBoolean(), true);		:}
	| TOKEN_FALSE				{: return new NodeLiteral(new TypeBoolean(), false);	:}
	| TOKEN_NULL				{: return new NodeLiteral(new TypeVoid(), null);		:}
	;
