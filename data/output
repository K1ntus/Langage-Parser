


*************************************************
*** Fichier data/progr1.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.



NodeId#a:TypeInt_null#NodeLiteral#100:TypeInt_null#
size = 0
elt = NodeId
NULL POINTER in ExpList
size = 0
elt = NodeLiteral
NULL POINTER in ExpListNULL POINTER in ExpList
NodeId#a:TypeInt_null#NodeOp(NodeId#a:TypeInt_null#, NodeLiteral#1:TypeInt_null#)
size = 0
elt = NodeId
NULL POINTER in ExpList
size = 2
elt = NodeOp(NodeId#a:TypeInt_null#, NodeLiteral#1:TypeInt_null#)
size = 1
elt = NodeOp(NodeLiteral#1:TypeInt_null#)
NULL POINTER in ExpListNULL POINTER in ExpList
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeWhile
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#a:TypeInt_null#, NodeLiteral#100:TypeInt_null#), NodeWhile(NodeRel(NodeId#a:TypeInt_null#, NodeLiteral#0:TypeInt_null#), NodeList(println_NodeCallFct(NodeList(NodeId#a:TypeInt_null#)), NodeAssign(NodeId#a:TypeInt_null#, NodeOp(NodeLiteral#1:TypeInt_null#)))))



*************************************************
*** Fichier data/progr2.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// gestion des variables statiques
//
// 0x4995F6B5

NodeId#x:TypeInt_null#NodeLiteral#1234564789:TypeInt_null#
size = 0
elt = NodeId
NULL POINTER in ExpList
size = 0
elt = NodeLiteral
NULL POINTER in ExpListNULL POINTER in ExpList
NodeId#y:TypeInt_null#NodeLiteral#2147483647:TypeInt_null#
size = 0
elt = NodeId
NULL POINTER in ExpList
size = 0
elt = NodeLiteral
NULL POINTER in ExpListNULL POINTER in ExpList
NodeId#b:TypeBoolean#NodeLiteral#true:TypeBoolean#
size = 0
elt = NodeId
NULL POINTER in ExpList
size = 0
elt = NodeLiteral
NULL POINTER in ExpListNULL POINTER in ExpList
NodeId#c:TypeString#NodeLiteral#"a":TypeString#
size = 0
elt = NodeId
NULL POINTER in ExpList
size = 0
elt = NodeLiteral
NULL POINTER in ExpListNULL POINTER in ExpList
NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#1:TypeInt_null#)NodeLiteral#"A":TypeString#
size = 2
elt = NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#1:TypeInt_null#)
size = 1
elt = NodeArrayAccess(NodeLiteral#1:TypeInt_null#)
NULL POINTER in ExpList
size = 0
elt = NodeLiteral
NULL POINTER in ExpListNULL POINTER in ExpList
NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#)NodeLiteral#"B":TypeString#
size = 2
elt = NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#)
size = 1
elt = NodeArrayAccess(NodeLiteral#2:TypeInt_null#)
NULL POINTER in ExpList
size = 0
elt = NodeLiteral
NULL POINTER in ExpListNULL POINTER in ExpList
NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#3:TypeInt_null#)NodeLiteral#"C":TypeString#
size = 2
elt = NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#3:TypeInt_null#)
size = 1
elt = NodeArrayAccess(NodeLiteral#3:TypeInt_null#)
NULL POINTER in ExpList
size = 0
elt = NodeLiteral
NULL POINTER in ExpListNULL POINTER in ExpList
NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#10:TypeInt_null#)NodeLiteral#"Z":TypeString#
size = 2
elt = NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#10:TypeInt_null#)
size = 1
elt = NodeArrayAccess(NodeLiteral#10:TypeInt_null#)
NULL POINTER in ExpList
size = 0
elt = NodeLiteral
NULL POINTER in ExpListNULL POINTER in ExpList
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
