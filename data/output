


*************************************************
*** Fichier data/progr0.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


** Enregistre types: (TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)
** Retrouve types: Months (TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)
Size is : 13

Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L1,L2),SEQ(Label(L1),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L2))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L3,L4),SEQ(Label(L3),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L4))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L5,L6),SEQ(Label(L5),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L6))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L7,L8),SEQ(Label(L7),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L8))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L9,L10),SEQ(Label(L9),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L10))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L11,L12),SEQ(Label(L11),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L12))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L13,L14),SEQ(Label(L13),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L14))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L15,L16),SEQ(Label(L15),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L16))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L17,L18),SEQ(Label(L17),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L18))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L19,L20),SEQ(Label(L19),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L20))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L21,L22),SEQ(Label(L21),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L22))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L23,L24),SEQ(Label(L23),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L24))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L25,L26),SEQ(Label(L25),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L0),L0),Label(L26))))),Label(L0)))))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeSwitch
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), NodeSwitch(NodeId#month:(TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)#, NodeCaseList(NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"spring":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"spring":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"spring":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"summer":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"summer":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"summer":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"autumn":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"autumn":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"autumn":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"winter":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"winter":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"winter":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"none":TypeString#)))))))



*************************************************
*** Fichier data/progr1.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.



Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(MOVE(NAME(t),CONST:1),SEQ(MOVE(NAME(a),CONST:100),SEQ(MOVE(NAME(a),BINOP(2,CONST:5,CONST:2)),SEQ(Label(L27),SEQ(CJUMP(13,NAME(a),BINOP(4,CONST:0,CONST:0),L28,L29),SEQ(Label(L28),SEQ(SEQ(CJUMP(13,NAME(a),NAME(a),L30,L31),SEQ(Label(L30),SEQ(SEQ(EXP(CALL(NAME(println),NAME(a))),MOVE(NAME(a),BINOP(1,NAME(a),CONST:1))),Label(L31)))),SEQ(JUMP(NAME(L27),L27),Label(L29))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
- NodeOp well typed
- Assign well typed
--- CheckType NodeWhile
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), NodeAssign(NodeId#t:TypeBoolean#, NodeLiteral#true:TypeBoolean#), NodeAssign(NodeId#a:TypeInt_null#, NodeLiteral#100:TypeInt_null#), NodeAssign(NodeId#a:TypeInt_null#, NodeOp(NodeLiteral#5:TypeInt_null#, NodeLiteral#2:TypeInt_null#)), NodeWhile(NodeRel(NodeId#a:TypeInt_null#, NodeRel(NodeLiteral#0:TypeInt_null#, NodeId#t:TypeBoolean#)), NodeList(NodeIf(NodeRel(NodeId#a:TypeInt_null#, NodeLiteral#0:TypeInt_null#), NodeList(NodeList(println_NodeCallFct(NodeList(NodeId#a:TypeInt_null#)), NodeAssign(NodeId#a:TypeInt_null#, NodeOp(NodeId#a:TypeInt_null#, NodeLiteral#1:TypeInt_null#))))))))



*************************************************
*** Fichier data/progr2.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// gestion des variables statiques
//
// 0x4995F6B5

Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(MOVE(NAME(x),CONST:1234564789),SEQ(MOVE(NAME(y),CONST:2147483647),SEQ(MOVE(NAME(b),CONST:1),SEQ(MOVE(NAME(c),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:1)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:2)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:3)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:10)),CONST:-1),SEQ(EXP(CALL(NAME(println),NAME(x))),SEQ(EXP(CALL(NAME(println),NAME(y))),SEQ(EXP(CALL(NAME(println),NAME(b))),SEQ(EXP(CALL(NAME(println),NAME(c))),EXP(CALL(NAME(println),MEM(BINOP(0,NAME(d),CONST:2)))))))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1234564789:TypeInt_null#), NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#2147483647:TypeInt_null#), NodeAssign(NodeId#b:TypeBoolean#, NodeLiteral#true:TypeBoolean#), NodeAssign(NodeId#c:TypeString#, NodeLiteral#"a":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#1:TypeInt_null#), NodeLiteral#"A":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#), NodeLiteral#"B":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#3:TypeInt_null#), NodeLiteral#"C":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#10:TypeInt_null#), NodeLiteral#"Z":TypeString#), println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#y:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#b:TypeBoolean#)), println_NodeCallFct(NodeList(NodeId#c:TypeString#)), println_NodeCallFct(NodeList(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#))))



*************************************************
*** Fichier data/progr3.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


// gestion des variables statiques
// gestion du tas et des pointeurs
// 
// 0x4995F6B5
// 0x41
// resize the heap
// heap memory error

Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(MOVE(NAME(x),CONST:1234564789),SEQ(MOVE(NAME(y),CONST:2147483647),SEQ(MOVE(NAME(b),CONST:1),SEQ(MOVE(NAME(c),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:1)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:2)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:3)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:10)),CONST:-1),SEQ(EXP(CALL(NAME(println),NAME(x))),SEQ(EXP(CALL(NAME(println),NAME(y))),SEQ(EXP(CALL(NAME(println),NAME(b))),SEQ(EXP(CALL(NAME(println),NAME(c))),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,NAME(d),CONST:2)))),SEQ(MOVE(MEM(NAME(q)),NAME(null)),SEQ(MOVE(MEM(NAME(q)),CONST:-1),SEQ(EXP(CALL(NAME(println),MEM(NAME(q)))),SEQ(EXP(CALL(NAME(println),NAME(p))),SEQ(MOVE(MEM(NAME(p)),NAME(null)),SEQ(EXP(CALL(NAME(println),NAME(p))),SEQ(MOVE(MEM(MEM(NAME(p))),NAME(x)),SEQ(EXP(CALL(NAME(println),MEM(NAME(p)))),SEQ(MOVE(MEM(NAME(r)),NAME(null)),SEQ(MOVE(MEM(NAME(r)),CONST:65536),SEQ(EXP(CALL(NAME(println),MEM(NAME(r)))),SEQ(MOVE(MEM(NAME(p)),NAME(null)),SEQ(EXP(CALL(NAME(println),NAME(p))),EXP(CALL(NAME(println),MEM(NAME(p)))))))))))))))))))))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeNew
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeNew
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeId
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeNew
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeDispose
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1234564789:TypeInt_null#), NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#2147483647:TypeInt_null#), NodeAssign(NodeId#b:TypeBoolean#, NodeLiteral#true:TypeBoolean#), NodeAssign(NodeId#c:TypeString#, NodeLiteral#"a":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#1:TypeInt_null#), NodeLiteral#"A":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#), NodeLiteral#"B":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#3:TypeInt_null#), NodeLiteral#"C":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#10:TypeInt_null#), NodeLiteral#"Z":TypeString#), println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#y:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#b:TypeBoolean#)), println_NodeCallFct(NodeList(NodeId#c:TypeString#)), println_NodeCallFct(NodeList(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#))), NodeNew(NodeId#q:TypePointer(TypeString)#), NodeAssign(NodePtrAccess(NodeId#q:TypePointer(TypeString)#), NodeLiteral#"A":TypeString#), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#q:TypePointer(TypeString)#))), println_NodeCallFct(NodeList(NodeId#p:TypePointer(TypeInt_null)#)), NodeNew(NodeId#p:TypePointer(TypeInt_null)#), println_NodeCallFct(NodeList(NodeId#p:TypePointer(TypeInt_null)#)), NodeAssign(NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#), NodeId#x:TypeInt_null#), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#))), NodeNew(NodeId#r:TypePointer(TypeInt_null)#), NodeAssign(NodePtrAccess(NodeId#r:TypePointer(TypeInt_null)#), NodeLiteral#65536:TypeInt_null#), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#r:TypePointer(TypeInt_null)#))), NodeDispose(NodeId#p:TypePointer(TypeInt_null)#), println_NodeCallFct(NodeList(NodeId#p:TypePointer(TypeInt_null)#)), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#))))



*************************************************
*** Fichier data/progr4.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// Structure de contrôle
//
//

Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(MOVE(NAME(x),CONST:1),SEQ(Label(L32),SEQ(CJUMP(11,NAME(x),CONST:10,L33,L34),SEQ(Label(L33),SEQ(SEQ(EXP(CALL(NAME(println),NAME(x))),SEQ(SEQ(CJUMP(14,NAME(x),NAME(x),L35,L36),SEQ(Label(L35),SEQ(SEQ(MOVE(NAME(y),CONST:1),SEQ(Label(L37),SEQ(CJUMP(11,NAME(y),CONST:5,L38,L39),SEQ(Label(L38),SEQ(SEQ(EXP(CALL(NAME(println),BINOP(1,BINOP(2,CONST:1000,CONST:-1),NAME(y)))),MOVE(NAME(y),BINOP(0,NAME(y),CONST:1))),SEQ(JUMP(NAME(L37),L37),Label(L39))))))),SEQ(Label(L36),EXP(CALL(NAME(println),CONST:-1)))))),MOVE(NAME(x),BINOP(0,NAME(x),CONST:1)))),SEQ(JUMP(NAME(L32),L32),Label(L34))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeWhile
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_null#), NodeWhile(NodeRel(NodeId#x:TypeInt_null#, NodeLiteral#10:TypeInt_null#), NodeList(NodeList(println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), NodeIf(NodeRel(NodeId#x:TypeInt_null#, NodeLiteral#10:TypeInt_null#), NodeList(NodeList(NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#1:TypeInt_null#), NodeWhile(NodeRel(NodeId#y:TypeInt_null#, NodeLiteral#5:TypeInt_null#), NodeList(NodeList(println_NodeCallFct(NodeList(NodeOp(NodeOp(NodeLiteral#1000:TypeInt_null#, NULL), NodeId#y:TypeInt_null#))), NodeAssign(NodeId#y:TypeInt_null#, NodeOp(NodeId#y:TypeInt_null#, NodeLiteral#1:TypeInt_null#))))))), NodeList(println_NodeCallFct(NodeList(NodeLiteral#"X":TypeString#)))), NodeAssign(NodeId#x:TypeInt_null#, NodeOp(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_null#))))))



*************************************************
*** Fichier data/progr5.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


** Enregistre fct:sum
Label(L40)
** Enregistre fct:pgcd
Label(L41)
//println(pgcd(78, 90));

Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(MOVE(NAME(x),CONST:5),SEQ(MOVE(NAME(x),CALL(NAME(sum),CONST:3CONST:5)),EXP(CALL(NAME(println),CALL(NAME(sum),CONST:3CONST:5))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#5:TypeInt_null#), NodeAssign(NodeId#x:TypeInt_null#, sum_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#, NodeLiteral#5:TypeInt_null#))), println_NodeCallFct(NodeList(sum_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#, NodeLiteral#5:TypeInt_null#)))))



*************************************************
*** Fichier data/progr6.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// gestion complexe de la pile
// 
** Enregistre fct:fact1
Label(L47)
** Enregistre fct:fact2
Label(L50)
** Enregistre fct:hanoi
Label(L53)
** Enregistre fct:impair
** Enregistre fct:pair
Label(L58)
** Enregistre fct:impair
Label(L63)

Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(EXP(CALL(NAME(println),CALL(NAME(fact1),CONST:6))),SEQ(EXP(CALL(NAME(println),CALL(NAME(fact2),CONST:6))),SEQ(EXP(CALL(NAME(hanoi),CONST:-1CONST:-1CONST:-1CONST:4)),SEQ(EXP(CALL(NAME(println),CALL(NAME(pair),CONST:1001))),EXP(CALL(NAME(println),CALL(NAME(pair),CONST:1000))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), println_NodeCallFct(NodeList(fact1_NodeCallFct(NodeList(NodeLiteral#6:TypeInt_null#)))), println_NodeCallFct(NodeList(fact2_NodeCallFct(NodeList(NodeLiteral#6:TypeInt_null#)))), hanoi_NodeCallFct(NodeList(NodeLiteral#"A":TypeString#, NodeLiteral#"B":TypeString#, NodeLiteral#"C":TypeString#, NodeLiteral#4:TypeInt_null#)), println_NodeCallFct(NodeList(pair_NodeCallFct(NodeList(NodeLiteral#1001:TypeInt_null#)))), println_NodeCallFct(NodeList(pair_NodeCallFct(NodeList(NodeLiteral#1000:TypeInt_null#)))))



*************************************************
*** Fichier data/progr7.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// tableaux
// 

Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(MOVE(MEM(BINOP(0,NAME(week),CONST:0)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(week),CONST:1)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(week),CONST:2)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:2)),CONST:17)),CONST:3)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:4)),CONST:22)),CONST:7)),CONST:-1),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:2)),CONST:17)),CONST:3)))),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:2)),CONST:17)),CONST:4)))),EXP(CALL(NAME(println),MEM(BINOP(0,NAME(week),CONST:1))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeString)#, NodeLiteral#0:TypeInt_null#), NodeLiteral#"M":TypeString#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeString)#, NodeLiteral#1:TypeInt_null#), NodeLiteral#"T":TypeString#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeString)#, NodeLiteral#2:TypeInt_null#), NodeLiteral#"W":TypeString#), NodeAssign(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_7], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_12], TypeString)))#, NodeLiteral#2:TypeInt_null#), NodeLiteral#17:TypeInt_null#), NodeLiteral#3:TypeInt_null#), NodeLiteral#"X":TypeString#), NodeAssign(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_7], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_12], TypeString)))#, NodeLiteral#4:TypeInt_null#), NodeLiteral#22:TypeInt_null#), NodeLiteral#7:TypeInt_null#), NodeLiteral#"V":TypeString#), println_NodeCallFct(NodeList(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_7], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_12], TypeString)))#, NodeLiteral#2:TypeInt_null#), NodeLiteral#17:TypeInt_null#), NodeLiteral#3:TypeInt_null#))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_7], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_12], TypeString)))#, NodeLiteral#2:TypeInt_null#), NodeLiteral#17:TypeInt_null#), NodeLiteral#4:TypeInt_null#))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeString)#, NodeLiteral#1:TypeInt_null#))))



*************************************************
*** Fichier data/progr8.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// tableaux et enumérés
// 
** Enregistre types: (TypeItemEnum@SUNDAY=0, TypeItemEnum@MONDAY=1, TypeItemEnum@TUESDAY=2, TypeItemEnum@WEDNESDAY=3, TypeItemEnum@THURSDAY=4, TypeItemEnum@FRIDAY=5, TypeItemEnum@SATURDAY=6)
** Enregistre types: (TypeItemEnum@JANUARY=0, TypeItemEnum@FEBRUARY=1, TypeItemEnum@MARCH=2, TypeItemEnum@APRIL=3, TypeItemEnum@MAY=4, TypeItemEnum@JUNE=5, TypeItemEnum@JULY=6, TypeItemEnum@AUGUST=7, TypeItemEnum@SEPTEMBER=8, TypeItemEnum@OCTOBER=9, TypeItemEnum@NOVEMBER=10, TypeItemEnum@DECEMBER=11)

Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(MOVE(MEM(BINOP(0,NAME(week),NAME(MONDAY))),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(week),NAME(TUESDAY))),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(week),NAME(WEDNESDAY))),CONST:-1),SEQ(MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:17)),NAME(MARCH))),CONST:-1),SEQ(MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:1)),NAME(MARCH))),CONST:-1),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:1)),NAME(MARCH))))),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:17)),NAME(MARCH))))),EXP(CALL(NAME(println),MEM(BINOP(0,NAME(week),NAME(TUESDAY)))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeString)#, NodeId#MONDAY:TypeInt_1#), NodeLiteral#"M":TypeString#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeString)#, NodeId#TUESDAY:TypeInt_2#), NodeLiteral#"T":TypeString#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeString)#, NodeId#WEDNESDAY:TypeInt_3#), NodeLiteral#"W":TypeString#), NodeAssign(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_0..TypeInt_11], TypeString)))#, NodeId#SATURDAY:TypeInt_6#), NodeLiteral#17:TypeInt_null#), NodeId#MARCH:TypeInt_2#), NodeLiteral#"X":TypeString#), NodeAssign(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_0..TypeInt_11], TypeString)))#, NodeId#SATURDAY:TypeInt_6#), NodeLiteral#1:TypeInt_null#), NodeId#MARCH:TypeInt_2#), NodeLiteral#"V":TypeString#), println_NodeCallFct(NodeList(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_0..TypeInt_11], TypeString)))#, NodeId#SATURDAY:TypeInt_6#), NodeLiteral#1:TypeInt_null#), NodeId#MARCH:TypeInt_2#))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_0..TypeInt_11], TypeString)))#, NodeId#SATURDAY:TypeInt_6#), NodeLiteral#17:TypeInt_null#), NodeId#MARCH:TypeInt_2#))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeString)#, NodeId#TUESDAY:TypeInt_2#))))



*************************************************
*** Fichier data/progr9.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


$$ **************************************************
 ************************************************** $$
$$$
Type declaration part
$$$
** Enregistre types: TypeString
** Enregistre types: TypeInt_null
** Enregistre types: TypeBoolean
** Retrouve types: chaine TypeString
///named2 = unknown; // error		//UnknownType
$$$ Enum $$$
** Enregistre types: TypeString
** Enregistre types: (TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)
///xxx = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, aa, ab, ac, ad, ae, af, ag, ah); // error
** Enregistre types: (TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6)
** Enregistre types: TypeArrayRange[TypeInt_64..TypeInt_81]
$$ 
Cas
D'erreur
$$
///range3 = 81 .. 64; //error			//InvalidType
///range4 = Friday .. Unknown; // error	//NoSuchField
///range5 = Friday .. Monday; // error	//InvalidType@subrange_type
** Enregistre types: TypeArrayRange[TypeInt_1..TypeInt_5]
///range7 = Friday .. Tuesday; // error "range not valid" //InvalidType@subrange_type
///range8 = Monday .. April; // error "incoherent range" //A GERER
$$$ Array $$$
** Enregistre types: TypeArrayRange[TypeInt_1..TypeInt_11]
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeInt_null)
** Retrouve types: range1 TypeArrayRange[TypeInt_64..TypeInt_81]
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_64..TypeInt_81], TypeInt_null)
** Retrouve types: range2 TypeArrayRange[TypeInt_1..TypeInt_5]
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeInt_null)
** Retrouve types: DaysOfWeek (TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6)
$$ 
Cas
D'erreur
$$
// UNKNWOWN TYPE
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeArray((TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6), TypeInt_null))
[UnknownType] type: range3 has not been defined
// error "Range type expected"
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeArray(TypeNamed_range3, TypeInt_null))
$$$ Pointers $$$
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeArray(TypeArrayRange[TypeInt_3..TypeInt_6], TypeInt_null))
** Enregistre types: TypePointer(TypeInt_null)
** Retrouve types: DaysOfWeek (TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6)
$$$
Variable declaration part
$$$
** Enregistre types: TypePointer(TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeArray((TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6), TypeInt_null)))
///x : boolean; // error "Variable x yet declared" // RedefinitionVariable
** Retrouve types: range2 TypeArrayRange[TypeInt_1..TypeInt_5]
** Retrouve types: range2 TypeArrayRange[TypeInt_1..TypeInt_5]
** Retrouve types: ptr1 TypePointer(TypeInt_null)
** Retrouve types: Months (TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)
** Retrouve types: range1 TypeArrayRange[TypeInt_64..TypeInt_81]
** Retrouve types: range2 TypeArrayRange[TypeInt_1..TypeInt_5]
** Retrouve types: Months (TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)
** Enregistre fct:goo
///function goo(i : integer, j : integer) : boolean;//RedefinitionFunctionPrototype //error "procedure or function declared twice"
** Enregistre fct:foo
///result^ = hoo(i, j); // error "function not declared" //NoSuchFieldException
Label(L68)
** Enregistre fct:goo
///function goo(i : integer, j : integer) : boolean begin return false; end //RedefinitionFunction // error "function already defined"
Label(L69)
///b = 2; // error "Type error in affectation"
///l = m2; // error "Type error in affectation" //m2 range 4, l range 5
[InvalidCallFunction] foo(NodeList(NodeLiteral#3:TypeInt_null#)) : expected 2 arguments but 1 where given
[InvalidCallFunction] Automatically recover from error.
// error "Type error in calling expression"			//PAS GERE Checktype invalid
//b = foo(3, false); // error "Type error in calling expression"	//PAS GERE Checktype invalid
//x = foo(3, 7); // error "Type error in calling expression"		//PAS GERE Checktype invalid
//z2 [ Thursday ] = 36; // error "Type error in array access "		//PAS GERE
//IL Y AVAIT UN CRASH ICI RIP
///y = z [ false ]; // error "Type error in array access" 		// InvalidArrayAccess
///y = z [ 4 ]; // error "Type error in affectation"			// HANDLED
///b = z [ 4 ]; // error "Type error in affectation"			// HANDLED
///z = k [ 4 ]; // error "Type error in affectation"			// HANDLED
///b = z2 [ Thursday ]; // error "Type error in affectation"	// HANDLED
///z2 = 36; 													// Accessible variable expected
//readln y;
Size is : 13
///b = !(2 < false) && (x == 1) && (p == null); // // error "Type error in comparison"
///b = !(2 < x) && (x == 1) && p ; // // error "Type error in logical expression"
///b = !(2 < x) && (x == 1 + false) && p ; // // error "Type error in arithmetic expression"
//p = 0; // error "Type error in affectation" //InvalidAffectation OK
//new x; // error "Type error in pointer access expression" //InvalidPointerAccess OK
///p^ = false;		//INVALID AFFECTATION OK
///x^ = null; // error "Type error in pointer access expression"
///dispose x;  // error "Type error in pointer access expression" //InvalidPointerAccess

Intermediate Code:
** SEQ(MOVE(NAME(null),null),SEQ(MOVE(NAME(b),CONST:0),SEQ(MOVE(MEM(NAME(l)),NAME(l)),SEQ(MOVE(NAME(b),MEM(CALL(NAME(foo),CONST:3CONST:7))),SEQ(MOVE(NAME(b),CALL(NAME(goo),CONST:3CONST:7)),SEQ(MOVE(NAME(b),CALL(NAME(foo),CONST:3)),SEQ(MOVE(MEM(BINOP(0,NAME(z2),CONST:1)),CONST:36),SEQ(MOVE(NAME(x),MEM(BINOP(0,NAME(z2),CONST:1))),SEQ(MOVE(NAME(b),CALL(NAME(goo),MEM(BINOP(0,NAME(z2),CONST:1))CONST:1)),SEQ(SEQ(CJUMP(14,MEM(BINOP(0,NAME(l),NAME(Monday))),CONST:1,L70,L71),SEQ(Label(L70),SEQ(MOVE(NAME(x),CONST:1),Label(L71)))),SEQ(SEQ(CJUMP(14,MEM(BINOP(0,NAME(l),NAME(Monday))),CONST:1,L72,L73),SEQ(Label(L72),SEQ(MOVE(NAME(x),CONST:1),SEQ(Label(L73),MOVE(NAME(x),CONST:2))))),SEQ(SEQ(CJUMP(14,MEM(BINOP(0,NAME(z2),CONST:7)),CONST:1,L74,L75),SEQ(Label(L74),SEQ(MOVE(NAME(x),CONST:1),Label(L75)))),SEQ(SEQ(Label(L76),SEQ(CJUMP(14,MEM(BINOP(0,NAME(z2),CONST:7)),CONST:1,L77,L78),SEQ(Label(L77),SEQ(MOVE(NAME(x),CONST:1),SEQ(JUMP(NAME(L76),L76),Label(L78)))))),SEQ(SEQ(Label(L79),SEQ(CJUMP(14,MEM(BINOP(0,NAME(z2),CONST:7)),CONST:1,L80,L81),SEQ(Label(L80),SEQ(SEQ(SEQ(CJUMP(14,MEM(BINOP(0,NAME(l),NAME(Monday))),CONST:1,L82,L83),SEQ(Label(L82),SEQ(MOVE(NAME(x),CONST:1),SEQ(Label(L83),MOVE(NAME(x),CONST:2))))),SEQ(EXP(CALL(NAME(println),NAME(x))),MOVE(NAME(y),CONST:2))),SEQ(JUMP(NAME(L79),L79),Label(L81)))))),SEQ(SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L85,L86),SEQ(Label(L85),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L86))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L87,L88),SEQ(Label(L87),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L88))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L89,L90),SEQ(Label(L89),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L90))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L91,L92),SEQ(Label(L91),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L92))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L93,L94),SEQ(Label(L93),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L94))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L95,L96),SEQ(Label(L95),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L96))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L97,L98),SEQ(Label(L97),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L98))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L99,L100),SEQ(Label(L99),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L100))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L101,L102),SEQ(Label(L101),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L102))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L103,L104),SEQ(Label(L103),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L104))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L105,L106),SEQ(Label(L105),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L106))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L107,L108),SEQ(Label(L107),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L108))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L109,L110),SEQ(Label(L109),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L84),L84),Label(L110))))),Label(L84)))))))))))))),SEQ(MOVE(NAME(x),BINOP(2,BINOP(3,BINOP(0,CONST:36,CONST:45),CONST:7),CONST:-1)),SEQ(MOVE(NAME(p),null),SEQ(MOVE(MEM(NAME(p)),NAME(null)),SEQ(MOVE(MEM(NAME(p)),CONST:36),SEQ(MOVE(NAME(x),MEM(NAME(p))),MOVE(MEM(NAME(p)),NAME(null))))))))))))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeId
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodePtrAccess
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct not well typed
*** Erreur de typage: pas le même nombre de paramètres 
*** nb_params got: 1 - Expected: 2
- Checktype invalid: 
- elem:NodeAssign(NodeId#b:TypeBoolean#, foo_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#)))
- NodeList well typed
*** Erreur de typage


Arbre Principal: 
NodeList(NodeAssign(NodeId#null:TypePointer#, NodeLiteral#null:TypePointer#), NodeAssign(NodeId#b:TypeBoolean#, NodeLiteral#false:TypeBoolean#), NodeAssign(NodeId#l:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeBoolean)#, NodeId#l:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeBoolean)#), NodeAssign(NodeId#b:TypeBoolean#, NodePtrAccess(foo_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#, NodeLiteral#7:TypeInt_null#)))), NodeAssign(NodeId#b:TypeBoolean#, goo_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#, NodeLiteral#7:TypeInt_null#))), NodeAssign(NodeId#b:TypeBoolean#, foo_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#))), NodeAssign(NodeArrayAccess(NodeId#z2:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeInt_null)#, NodeLiteral#1:TypeInt_null#), NodeLiteral#36:TypeInt_null#), NodeAssign(NodeId#x:TypeInt_null#, NodeArrayAccess(NodeId#z2:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeInt_null)#, NodeLiteral#1:TypeInt_null#)), NodeAssign(NodeId#b:TypeBoolean#, goo_NodeCallFct(NodeList(NodeArrayAccess(NodeId#z2:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeInt_null)#, NodeLiteral#1:TypeInt_null#), NodeLiteral#1:TypeInt_null#))), NodeIf(NodeArrayAccess(NodeId#l:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeBoolean)#, NodeId#Monday:TypeInt_1#), NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_null#))), NodeIf(NodeArrayAccess(NodeId#l:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeBoolean)#, NodeId#Monday:TypeInt_1#), NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_null#)), NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#2:TypeInt_null#))), NodeIf(NodeArrayAccess(NodeId#z2:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeInt_null)#, NodeLiteral#7:TypeInt_null#), NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_null#))), NodeWhile(NodeArrayAccess(NodeId#z2:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeInt_null)#, NodeLiteral#7:TypeInt_null#), NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_null#))), NodeWhile(NodeArrayAccess(NodeId#z2:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeInt_null)#, NodeLiteral#7:TypeInt_null#), NodeList(NodeList(NodeIf(NodeArrayAccess(NodeId#l:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeBoolean)#, NodeId#Monday:TypeInt_1#), NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_null#)), NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#2:TypeInt_null#))), println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#2:TypeInt_null#)))), NodeSwitch(NodeId#month:(TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)#, NodeCaseList(NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"spring":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"spring":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"spring":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"summer":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"summer":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"summer":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"autumn":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"autumn":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"autumn":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"winter":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"winter":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"winter":TypeString#)))), NodeCase(NodeList(println_NodeCallFct(NodeList(NodeLiteral#"none":TypeString#)))))), NodeAssign(NodeId#x:TypeInt_null#, NodeOp(NodeOp(NodeOp(NodeLiteral#36:TypeInt_null#, NodeLiteral#45:TypeInt_null#), NodeLiteral#7:TypeInt_null#), NULL)), NodeAssign(NodeId#p:TypePointer(TypeInt_null)#, NodeLiteral#null:TypeVoid#), NodeNew(NodeId#p:TypePointer(TypeInt_null)#), NodeAssign(NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#), NodeLiteral#36:TypeInt_null#), NodeAssign(NodeId#x:TypeInt_null#, NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#)), NodeDispose(NodeId#p:TypePointer(TypeInt_null)#))
