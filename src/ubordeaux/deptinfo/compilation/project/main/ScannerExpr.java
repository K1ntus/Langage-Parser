/* The following code was generated by JFlex 1.7.0 */

package ubordeaux.deptinfo.compilation.project.main;

import beaver.Symbol;
import beaver.Scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/jordane/espaces/travail/L3/Projet-Compilation/scanner/Scanner.jflex</tt>
 */
class ScannerExpr extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int COMMENT_DOC = 4;
  public static final int ANNOTATION = 6;
  public static final int STRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\0\1\17\2\0\1\16\16\2\5\0\1\57\1\4\1\0"+
    "\1\1\1\0\1\61\1\0\1\43\1\44\1\24\1\41\1\51\1\42"+
    "\1\53\1\20\1\21\11\3\1\52\1\5\1\54\1\55\1\56\1\0"+
    "\1\64\6\23\24\1\1\45\1\63\1\46\1\62\1\23\1\0\1\13"+
    "\1\34\1\25\1\36\1\11\1\12\1\33\1\40\1\31\2\1\1\14"+
    "\1\65\1\32\1\30\1\27\1\1\1\7\1\15\1\6\1\10\1\37"+
    "\1\35\1\22\1\26\1\1\1\47\1\60\1\50\1\0\41\2\2\0"+
    "\4\1\4\0\1\1\2\0\1\2\7\0\1\1\4\0\1\1\5\0"+
    "\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0\5\1\7\0"+
    "\1\1\1\0\1\1\21\0\160\2\5\1\1\0\2\1\2\0\4\1"+
    "\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0\123\1"+
    "\1\0\213\1\1\0\5\2\2\0\236\1\11\0\46\1\2\0\1\1"+
    "\7\0\47\1\7\0\1\1\1\0\55\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\1\2\10\0\33\1\5\0\3\1\15\0\5\2"+
    "\6\0\1\1\4\0\13\2\5\0\53\1\37\2\4\0\2\1\1\2"+
    "\143\1\1\0\1\1\10\2\1\0\6\2\2\1\2\2\1\0\4\2"+
    "\2\1\12\2\3\1\2\0\1\1\17\0\1\2\1\1\1\2\36\1"+
    "\33\2\2\0\131\1\13\2\1\1\16\0\12\2\41\1\11\2\2\1"+
    "\4\0\1\1\5\0\26\1\4\2\1\1\11\2\1\1\3\2\1\1"+
    "\5\2\22\0\31\1\3\2\104\0\1\1\1\0\13\1\67\0\33\2"+
    "\1\0\4\2\66\1\3\2\1\1\22\2\1\1\7\2\12\1\2\2"+
    "\2\0\12\2\1\0\7\1\1\0\7\1\1\0\3\2\1\0\10\1"+
    "\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1"+
    "\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\1\1\10\0"+
    "\1\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2\4\1\7\0"+
    "\1\1\5\0\3\2\1\0\6\1\4\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\2\1\0"+
    "\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\1\1\0"+
    "\1\1\7\0\14\2\3\1\1\2\13\0\3\2\1\0\11\1\1\0"+
    "\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\2\0"+
    "\1\2\1\1\10\2\1\0\3\2\1\0\3\2\2\0\1\1\17\0"+
    "\2\1\2\2\2\0\12\2\1\0\1\1\17\0\3\2\1\0\10\1"+
    "\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1"+
    "\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\10\0\2\2"+
    "\4\0\2\1\1\0\3\1\2\2\2\0\12\2\1\0\1\1\20\0"+
    "\1\2\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1"+
    "\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1"+
    "\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1\1\6\0\1\2"+
    "\16\0\12\2\11\0\1\1\7\0\3\2\1\0\10\1\1\0\3\1"+
    "\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\7\2\1\0"+
    "\3\2\1\0\4\2\7\0\2\2\1\0\2\1\6\0\2\1\2\2"+
    "\2\0\12\2\22\0\2\2\1\0\10\1\1\0\3\1\1\0\27\1"+
    "\1\0\12\1\1\0\5\1\2\0\1\2\1\1\7\2\1\0\3\2"+
    "\1\0\4\2\7\0\2\2\7\0\1\1\1\0\2\1\2\2\2\0"+
    "\12\2\1\0\2\1\17\0\2\2\1\0\10\1\1\0\3\1\1\0"+
    "\51\1\2\0\1\1\7\2\1\0\3\2\1\0\4\2\1\1\10\0"+
    "\1\2\10\0\2\1\2\2\2\0\12\2\12\0\6\1\2\0\2\2"+
    "\1\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1"+
    "\3\0\1\2\4\0\6\2\1\0\1\2\1\0\10\2\22\0\2\2"+
    "\15\0\60\1\1\2\2\1\7\2\4\0\10\1\10\2\1\0\12\2"+
    "\47\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1"+
    "\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\4\1\1\2\2\1\6\2\1\0\2\2\1\1"+
    "\2\0\5\1\1\0\1\1\1\0\6\2\2\0\12\2\2\0\4\1"+
    "\40\0\1\1\27\0\2\2\6\0\12\2\13\0\1\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\10\1\1\0\44\1\4\0\24\2\1\0"+
    "\2\2\5\1\13\2\1\0\44\2\11\0\1\2\71\0\53\1\24\2"+
    "\1\1\12\2\6\0\6\1\4\2\4\1\3\2\1\1\3\2\2\1"+
    "\7\2\3\1\4\2\15\1\14\2\1\1\17\2\2\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0"+
    "\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\17\1\1\0\71\1\1\0\4\1\2\0\103\1\2\0\3\2\40\0"+
    "\20\1\20\0\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1\5\0"+
    "\113\1\3\0\3\1\17\0\15\1\1\0\4\1\3\2\13\0\22\1"+
    "\3\2\13\0\22\1\2\2\14\0\15\1\1\0\3\1\1\0\2\2"+
    "\14\0\64\1\40\2\3\0\1\1\3\0\2\1\1\2\2\0\12\2"+
    "\41\0\3\2\2\0\12\2\6\0\130\1\10\0\51\1\1\2\1\1"+
    "\5\0\106\1\12\0\35\1\3\0\14\2\4\0\14\2\12\0\12\2"+
    "\36\1\2\0\5\1\13\0\54\1\4\0\21\2\7\1\2\2\6\0"+
    "\12\2\46\0\27\1\5\2\4\0\65\1\12\2\1\0\35\2\2\0"+
    "\13\2\6\0\12\2\15\0\1\1\130\0\5\2\57\1\21\2\7\1"+
    "\4\0\12\2\21\0\11\2\14\0\3\2\36\1\15\2\2\1\12\2"+
    "\54\1\16\2\14\0\44\1\24\2\10\0\12\2\3\0\3\1\12\2"+
    "\44\1\122\0\3\2\1\0\25\2\4\1\1\2\4\1\3\2\2\1"+
    "\11\0\300\1\47\2\25\0\4\2\u0116\1\2\0\6\1\2\0\46\1"+
    "\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0\3\1"+
    "\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0\3\1"+
    "\1\0\7\1\16\0\5\2\32\0\5\2\20\0\2\1\23\0\1\1"+
    "\13\0\5\2\5\0\6\2\1\0\1\1\15\0\1\1\20\0\15\1"+
    "\3\0\33\1\25\0\15\2\4\0\1\2\3\0\14\2\21\0\1\1"+
    "\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1"+
    "\5\0\5\1\4\0\1\1\21\0\51\1\u0a77\0\57\1\1\0\57\1"+
    "\1\0\205\1\6\0\4\1\3\2\2\1\14\0\46\1\1\0\1\1"+
    "\5\0\1\1\2\0\70\1\7\0\1\1\17\0\1\2\27\1\11\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\40\2\57\0\1\1\u01d5\0"+
    "\3\1\31\0\11\1\6\2\1\0\5\1\2\0\5\1\4\0\126\1"+
    "\2\0\2\2\2\0\3\1\1\0\132\1\1\0\4\1\5\0\51\1"+
    "\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0\u19b6\1\112\0\u51cd\1"+
    "\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0\20\1\12\2\2\1"+
    "\24\0\57\1\1\2\4\0\12\2\1\0\31\1\7\0\1\2\120\1"+
    "\2\2\45\0\11\1\2\0\147\1\2\0\4\1\1\0\4\1\14\0"+
    "\13\1\115\0\12\1\1\2\3\1\1\2\4\1\1\2\27\1\5\2"+
    "\20\0\1\1\7\0\64\1\14\0\2\2\62\1\21\2\13\0\12\2"+
    "\6\0\22\2\6\1\3\0\1\1\4\0\12\2\34\1\10\2\2\0"+
    "\27\1\15\2\14\0\35\1\3\0\4\2\57\1\16\2\16\0\1\1"+
    "\12\2\46\0\51\1\16\2\11\0\3\1\1\2\10\1\2\2\2\0"+
    "\12\2\6\0\27\1\3\0\1\1\1\2\4\0\60\1\1\2\1\1"+
    "\3\2\2\1\2\2\5\1\2\2\1\1\1\2\1\1\30\0\3\1"+
    "\2\0\13\1\5\2\2\0\3\1\2\2\12\0\6\1\2\0\6\1"+
    "\2\0\6\1\11\0\7\1\1\0\7\1\221\0\43\1\10\2\1\0"+
    "\2\2\2\0\12\2\6\0\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0"+
    "\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0\1\1\1\2"+
    "\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0"+
    "\15\1\3\0\20\2\20\0\7\2\14\0\2\1\30\0\3\1\31\0"+
    "\1\1\6\0\5\1\1\0\207\1\2\0\1\2\4\0\1\1\13\0"+
    "\12\2\7\0\32\1\4\0\1\1\1\0\32\1\13\0\131\1\3\0"+
    "\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\2\1\3\0"+
    "\2\1\22\0\3\2\4\0\14\1\1\0\32\1\1\0\23\1\1\0"+
    "\2\1\1\0\17\1\2\0\16\1\42\0\173\1\105\0\65\1\210\0"+
    "\1\2\202\0\35\1\3\0\61\1\57\0\37\1\21\0\33\1\65\0"+
    "\36\1\2\0\44\1\4\0\10\1\1\0\5\1\52\0\236\1\2\0"+
    "\12\2\u0356\0\6\1\2\0\1\1\1\0\54\1\1\0\2\1\3\0"+
    "\1\1\2\0\27\1\252\0\26\1\12\0\32\1\106\0\70\1\6\0"+
    "\2\1\100\0\1\1\3\2\1\0\2\2\5\0\4\2\4\1\1\0"+
    "\3\1\1\0\33\1\4\0\3\2\4\0\1\2\40\0\35\1\203\0"+
    "\66\1\12\0\26\1\12\0\23\1\215\0\111\1\u03b7\0\3\2\65\1"+
    "\17\2\37\0\12\2\20\0\3\2\55\1\13\2\2\0\1\2\22\0"+
    "\31\1\7\0\12\2\6\0\3\2\44\1\16\2\1\0\12\2\100\0"+
    "\3\2\60\1\16\2\4\1\13\0\12\2\u04a6\0\53\1\15\2\10\0"+
    "\12\2\u0936\0\u036f\1\221\0\143\1\u0b9d\0\u042f\1\u33d1\0\u0239\1\u04c7\0"+
    "\105\1\13\0\1\1\56\2\20\0\4\2\15\1\u4060\0\2\1\u2163\0"+
    "\5\2\3\0\26\2\2\0\7\2\36\0\4\2\224\0\3\2\u01bb\0"+
    "\125\1\1\0\107\1\1\0\2\1\2\0\1\1\2\0\2\1\2\0"+
    "\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\101\1\1\0"+
    "\4\1\2\0\10\1\1\0\7\1\1\0\34\1\1\0\4\1\1\0"+
    "\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1\2\0\31\1\1\0"+
    "\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0"+
    "\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\10\1\2\0"+
    "\62\2\u1600\0\4\1\1\0\33\1\1\0\2\1\1\0\1\1\2\0"+
    "\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0"+
    "\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0"+
    "\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0"+
    "\21\1\5\0\3\1\1\0\5\1\1\0\21\1\u1144\0\ua6d7\1\51\0"+
    "\u1035\1\13\0\336\1\u3fe2\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\2\36\0\140\2\200\0\360\2\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\6\2\1\6"+
    "\1\3\1\7\11\2\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\1\1\22\1\23"+
    "\1\24\1\25\2\1\1\26\3\27\1\30\5\31\1\32"+
    "\1\33\1\34\13\2\1\27\1\35\1\36\2\2\1\37"+
    "\1\40\7\2\1\41\2\2\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\4\0\1\53\1\54"+
    "\1\55\1\56\6\2\1\57\5\2\1\27\1\60\5\2"+
    "\1\61\5\2\1\62\4\0\1\63\1\64\1\65\2\2"+
    "\1\66\6\2\1\67\3\2\1\70\5\2\4\0\3\2"+
    "\1\71\1\72\4\2\1\73\1\2\1\74\1\2\1\75"+
    "\2\2\2\0\1\76\1\0\1\77\1\100\1\2\1\101"+
    "\1\102\1\103\6\2\1\104\1\105\1\0\2\2\1\73"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\2\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u010e\0\u010e\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u010e\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u0546\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u010e\0\u010e\0\u06c0"+
    "\0\u06f6\0\u010e\0\u010e\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u010e\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0144\0\u0144\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0144\0\u0d4a\0\u0d80\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u010e\0\u010e\0\u010e\0\u010e\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0144\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u010e\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u0144\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc"+
    "\0\u0144\0\u1332\0\u1368\0\u139e\0\u13d4\0\u0144\0\u0144\0\u0144"+
    "\0\u140a\0\u1440\0\u0144\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u0144\0\u15ba\0\u15f0\0\u1626\0\u0144\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u0144\0\u0144\0\u18e4\0\u191a\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\u0144\0\u1a28\0\u0144\0\u1a5e\0\u1a94\0\u1aca"+
    "\0\u1b00\0\u010e\0\u1b36\0\u0144\0\u0144\0\u1b6c\0\u0144\0\u0144"+
    "\0\u0144\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u010e"+
    "\0\u010e\0\u1ce6\0\u1d1c\0\u1d52\0\u0144\0\u0144\0\u0144\0\u0144"+
    "\0\u0144\0\u010e\0\u0144\0\u1d88\0\u0144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\7\1\15\1\16\1\17\1\7\1\20\2\6\1\21"+
    "\1\22\2\7\1\23\1\24\1\7\1\25\1\26\1\27"+
    "\1\30\1\7\1\31\1\32\1\33\1\34\1\7\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\2\6\1\7\24\57\1\60\65\57\1\61\37\57"+
    "\1\62\1\57\7\63\1\64\3\63\1\65\13\63\1\66"+
    "\7\63\1\67\26\63\4\70\1\71\11\70\2\0\43\70"+
    "\1\72\2\70\67\0\3\7\2\0\10\7\3\0\3\7"+
    "\1\0\14\7\24\0\1\7\3\0\1\10\15\0\1\10"+
    "\45\0\3\7\2\0\1\7\1\73\6\7\3\0\3\7"+
    "\1\0\1\7\1\74\11\7\1\75\24\0\1\7\1\0"+
    "\3\7\2\0\3\7\1\76\4\7\3\0\3\7\1\0"+
    "\14\7\24\0\1\7\1\0\3\7\2\0\6\7\1\77"+
    "\1\7\3\0\3\7\1\0\5\7\1\100\6\7\24\0"+
    "\1\7\1\0\3\7\2\0\2\7\1\101\2\7\1\102"+
    "\2\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\1\7\1\103\6\7\3\0\3\7\1\0"+
    "\14\7\24\0\1\7\1\0\3\7\2\0\1\104\7\7"+
    "\3\0\3\7\1\0\10\7\1\105\3\7\24\0\1\7"+
    "\20\0\1\106\3\0\1\107\44\0\1\10\15\0\1\10"+
    "\1\110\44\0\3\7\2\0\5\7\1\111\2\7\3\0"+
    "\3\7\1\0\14\7\24\0\1\7\1\0\3\7\2\0"+
    "\1\7\1\112\6\7\3\0\3\7\1\0\14\7\24\0"+
    "\1\7\1\0\3\7\2\0\4\7\1\113\3\7\3\0"+
    "\3\7\1\0\14\7\24\0\1\7\1\0\3\7\2\0"+
    "\4\7\1\114\3\7\3\0\3\7\1\0\5\7\1\115"+
    "\6\7\24\0\1\7\1\0\3\7\2\0\2\7\1\116"+
    "\1\117\4\7\3\0\3\7\1\0\14\7\24\0\1\7"+
    "\1\0\3\7\2\0\3\7\1\120\4\7\3\0\3\7"+
    "\1\0\3\7\1\121\10\7\24\0\1\7\1\0\3\7"+
    "\2\0\10\7\3\0\3\7\1\0\13\7\1\122\24\0"+
    "\1\7\1\0\3\7\2\0\3\7\1\123\4\7\3\0"+
    "\3\7\1\0\3\7\1\124\1\125\7\7\24\0\1\7"+
    "\1\0\3\7\2\0\5\7\1\126\2\7\3\0\3\7"+
    "\1\0\14\7\24\0\1\7\53\0\1\127\67\0\1\130"+
    "\65\0\1\131\65\0\1\132\65\0\1\133\70\0\1\134"+
    "\66\0\1\135\24\0\1\136\65\0\1\137\56\0\1\140"+
    "\64\0\1\141\70\0\1\142\63\0\1\143\54\0\4\70"+
    "\1\0\11\70\2\0\43\70\1\0\2\70\4\0\1\144"+
    "\1\0\1\145\1\146\22\0\1\147\34\0\3\7\2\0"+
    "\2\7\1\150\5\7\3\0\3\7\1\0\14\7\24\0"+
    "\1\7\1\0\3\7\2\0\10\7\3\0\3\7\1\0"+
    "\2\7\1\151\11\7\24\0\1\7\1\0\3\7\2\0"+
    "\3\7\1\152\4\7\3\0\3\7\1\0\14\7\24\0"+
    "\1\7\1\0\3\7\2\0\1\153\4\7\1\154\2\7"+
    "\3\0\3\7\1\0\14\7\24\0\1\7\1\0\3\7"+
    "\2\0\7\7\1\155\3\0\3\7\1\0\14\7\24\0"+
    "\1\7\1\0\3\7\2\0\10\7\3\0\3\7\1\0"+
    "\11\7\1\156\2\7\24\0\1\7\1\0\3\7\2\0"+
    "\10\7\3\0\3\7\1\0\5\7\1\157\6\7\24\0"+
    "\1\7\1\0\3\7\2\0\6\7\1\160\1\7\3\0"+
    "\3\7\1\0\14\7\24\0\1\7\1\0\3\7\2\0"+
    "\1\7\1\161\6\7\3\0\3\7\1\0\14\7\24\0"+
    "\1\7\1\0\3\7\2\0\1\7\1\162\6\7\3\0"+
    "\3\7\1\0\14\7\24\0\1\7\1\0\3\7\2\0"+
    "\10\7\3\0\3\7\1\0\4\7\1\163\7\7\24\0"+
    "\1\7\16\106\1\164\1\57\46\106\24\0\1\165\44\0"+
    "\1\110\5\0\3\110\5\0\1\110\1\0\1\110\1\0"+
    "\1\110\6\0\1\110\1\0\1\110\30\0\3\7\2\0"+
    "\7\7\1\166\3\0\3\7\1\0\14\7\24\0\1\7"+
    "\1\0\3\7\2\0\10\7\3\0\3\7\1\0\3\7"+
    "\1\167\1\170\7\7\24\0\1\7\1\0\3\7\2\0"+
    "\1\171\7\7\3\0\3\7\1\0\14\7\24\0\1\7"+
    "\1\0\3\7\2\0\6\7\1\172\1\7\3\0\3\7"+
    "\1\0\14\7\24\0\1\7\1\0\3\7\2\0\10\7"+
    "\3\0\3\7\1\0\10\7\1\173\3\7\24\0\1\7"+
    "\1\0\3\7\2\0\10\7\3\0\3\7\1\0\6\7"+
    "\1\174\5\7\24\0\1\7\1\0\3\7\2\0\10\7"+
    "\3\0\3\7\1\0\3\7\1\175\10\7\24\0\1\7"+
    "\1\0\3\7\2\0\10\7\3\0\3\7\1\0\4\7"+
    "\1\176\7\7\24\0\1\7\1\0\3\7\2\0\4\7"+
    "\1\177\3\7\3\0\3\7\1\0\14\7\24\0\1\7"+
    "\1\0\3\7\2\0\7\7\1\200\3\0\3\7\1\0"+
    "\14\7\24\0\1\7\1\0\3\7\2\0\1\7\1\201"+
    "\6\7\3\0\3\7\1\0\14\7\24\0\1\7\6\0"+
    "\1\202\65\0\1\203\66\0\1\204\65\0\1\205\57\0"+
    "\3\7\2\0\3\7\1\206\4\7\3\0\3\7\1\0"+
    "\14\7\24\0\1\7\1\0\3\7\2\0\3\7\1\207"+
    "\4\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\10\7\3\0\3\7\1\0\5\7\1\210"+
    "\6\7\24\0\1\7\1\0\3\7\2\0\2\7\1\211"+
    "\5\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\10\7\3\0\3\7\1\0\11\7\1\212"+
    "\2\7\24\0\1\7\1\0\3\7\2\0\3\7\1\213"+
    "\4\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\10\7\3\0\3\7\1\0\1\214\13\7"+
    "\24\0\1\7\1\0\3\7\2\0\7\7\1\215\3\0"+
    "\3\7\1\0\14\7\24\0\1\7\1\0\3\7\2\0"+
    "\5\7\1\216\2\7\3\0\3\7\1\0\14\7\24\0"+
    "\1\7\1\0\3\7\2\0\2\7\1\217\5\7\3\0"+
    "\3\7\1\0\4\7\1\220\7\7\24\0\1\7\1\0"+
    "\3\7\2\0\1\221\7\7\3\0\3\7\1\0\14\7"+
    "\24\0\1\7\17\0\1\57\47\0\3\7\2\0\3\7"+
    "\1\222\4\7\3\0\3\7\1\0\14\7\24\0\1\7"+
    "\1\0\3\7\2\0\10\7\3\0\3\7\1\0\1\223"+
    "\13\7\24\0\1\7\1\0\3\7\2\0\10\7\3\0"+
    "\3\7\1\0\5\7\1\224\6\7\24\0\1\7\1\0"+
    "\3\7\2\0\3\7\1\225\4\7\3\0\3\7\1\0"+
    "\14\7\24\0\1\7\1\0\3\7\2\0\6\7\1\226"+
    "\1\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\10\7\3\0\3\7\1\0\4\7\1\227"+
    "\7\7\24\0\1\7\1\0\3\7\2\0\6\7\1\230"+
    "\1\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\6\7\1\231\1\7\3\0\3\7\1\0"+
    "\14\7\24\0\1\7\1\0\3\7\2\0\5\7\1\232"+
    "\2\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\10\7\3\0\3\7\1\0\2\7\1\233"+
    "\11\7\24\0\1\7\10\0\1\234\115\0\1\235\40\0"+
    "\1\236\67\0\1\237\51\0\3\7\2\0\1\7\1\240"+
    "\6\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\6\7\1\241\1\7\3\0\3\7\1\0"+
    "\14\7\24\0\1\7\1\0\3\7\2\0\1\242\7\7"+
    "\3\0\3\7\1\0\14\7\24\0\1\7\1\0\3\7"+
    "\2\0\3\7\1\243\4\7\3\0\3\7\1\0\14\7"+
    "\24\0\1\7\1\0\3\7\2\0\10\7\3\0\3\7"+
    "\1\0\1\7\1\244\12\7\24\0\1\7\1\0\3\7"+
    "\2\0\10\7\3\0\3\7\1\0\1\245\13\7\24\0"+
    "\1\7\1\0\3\7\2\0\10\7\3\0\3\7\1\0"+
    "\5\7\1\246\6\7\24\0\1\7\1\0\3\7\2\0"+
    "\10\7\3\0\3\7\1\0\1\247\13\7\24\0\1\7"+
    "\1\0\3\7\2\0\3\7\1\250\4\7\3\0\3\7"+
    "\1\0\14\7\24\0\1\7\1\0\3\7\2\0\1\251"+
    "\7\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\10\7\3\0\3\7\1\0\6\7\1\252"+
    "\5\7\24\0\1\7\1\0\3\7\2\0\10\7\3\0"+
    "\3\7\1\0\5\7\1\253\6\7\24\0\1\7\1\0"+
    "\3\7\2\0\3\7\1\254\4\7\3\0\3\7\1\0"+
    "\14\7\24\0\1\7\1\0\3\7\2\0\3\7\1\255"+
    "\4\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\2\7\1\256\5\7\3\0\3\7\1\0"+
    "\14\7\24\0\1\7\1\0\3\7\2\0\10\7\3\0"+
    "\3\7\1\0\3\7\1\257\10\7\24\0\1\7\7\0"+
    "\1\260\106\0\1\261\122\0\1\262\31\0\1\263\35\0"+
    "\3\7\2\0\10\7\3\0\3\7\1\0\5\7\1\264"+
    "\6\7\24\0\1\7\1\0\3\7\2\0\10\7\3\0"+
    "\3\7\1\0\5\7\1\265\6\7\24\0\1\7\1\0"+
    "\3\7\2\0\10\7\3\0\3\7\1\0\4\7\1\266"+
    "\7\7\24\0\1\7\1\0\3\7\2\0\1\267\7\7"+
    "\3\0\3\7\1\0\14\7\24\0\1\7\1\0\3\7"+
    "\2\0\10\7\3\0\3\7\1\0\6\7\1\270\5\7"+
    "\24\0\1\7\1\0\3\7\2\0\10\7\3\0\3\7"+
    "\1\0\13\7\1\271\24\0\1\7\1\0\3\7\2\0"+
    "\10\7\3\0\3\7\1\0\11\7\1\272\2\7\24\0"+
    "\1\7\1\0\3\7\2\0\6\7\1\273\1\7\3\0"+
    "\3\7\1\0\14\7\24\0\1\7\1\0\3\7\2\0"+
    "\3\7\1\274\4\7\3\0\3\7\1\0\14\7\24\0"+
    "\1\7\1\0\3\7\2\0\5\7\1\275\2\7\3\0"+
    "\3\7\1\0\14\7\24\0\1\7\1\0\3\7\2\0"+
    "\6\7\1\276\1\7\3\0\3\7\1\0\14\7\24\0"+
    "\1\7\1\0\3\7\2\0\7\7\1\277\3\0\3\7"+
    "\1\0\14\7\24\0\1\7\32\0\1\300\42\0\1\301"+
    "\106\0\1\302\36\0\3\7\2\0\10\7\3\0\3\7"+
    "\1\0\3\7\1\303\10\7\24\0\1\7\1\0\3\7"+
    "\2\0\2\7\1\304\5\7\3\0\3\7\1\0\14\7"+
    "\24\0\1\7\1\0\3\7\2\0\10\7\3\0\3\7"+
    "\1\0\5\7\1\305\6\7\24\0\1\7\1\0\3\7"+
    "\2\0\1\7\1\306\6\7\3\0\3\7\1\0\14\7"+
    "\24\0\1\7\1\0\3\7\2\0\10\7\3\0\3\7"+
    "\1\0\5\7\1\307\6\7\24\0\1\7\1\0\3\7"+
    "\2\0\1\310\7\7\3\0\3\7\1\0\14\7\24\0"+
    "\1\7\1\0\3\7\2\0\3\7\1\311\4\7\3\0"+
    "\3\7\1\0\14\7\24\0\1\7\32\0\1\312\34\0"+
    "\3\7\2\0\10\7\3\0\3\7\1\0\5\7\1\313"+
    "\6\7\24\0\1\7\1\0\3\7\2\0\1\7\1\314"+
    "\6\7\3\0\3\7\1\0\14\7\24\0\1\7\1\0"+
    "\3\7\2\0\3\7\1\315\4\7\3\0\3\7\1\0"+
    "\14\7\24\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7614];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\2\11\10\1\1\11\11\1\12\11"+
    "\7\1\2\11\2\1\2\11\5\1\1\11\35\1\11\11"+
    "\4\0\4\11\15\1\1\11\14\1\4\0\26\1\4\0"+
    "\20\1\2\0\1\11\1\0\14\1\2\11\1\0\7\1"+
    "\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
      StringBuffer string = new StringBuffer();
      
private String annotation_buffer = "";
private String annotation_type = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ScannerExpr(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2850) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	System.out.println(yytext()); return new Symbol(Terminals.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 77: break;
          case 2: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_IDENTIFIER, yyline, yycolumn, new String(yytext()) );
            } 
            // fall through
          case 78: break;
          case 3: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_LIT_INTEGER, yyline, yycolumn, new Integer(yytext()) );
            } 
            // fall through
          case 79: break;
          case 4: 
            { string.setLength(0); yybegin(STRING);
            } 
            // fall through
          case 80: break;
          case 5: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_SEMIC, yyline, yycolumn);
            } 
            // fall through
          case 81: break;
          case 6: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_DIV, yyline, yycolumn);
            } 
            // fall through
          case 82: break;
          case 7: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_TIMES, yyline, yycolumn);
            } 
            // fall through
          case 83: break;
          case 8: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_PLUS, yyline, yycolumn);
            } 
            // fall through
          case 84: break;
          case 9: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_MINUS, yyline, yycolumn);
            } 
            // fall through
          case 85: break;
          case 10: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_LPAR, yyline, yycolumn);
            } 
            // fall through
          case 86: break;
          case 11: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_RPAR, yyline, yycolumn);
            } 
            // fall through
          case 87: break;
          case 12: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_LBRACKET, yyline, yycolumn);
            } 
            // fall through
          case 88: break;
          case 13: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_RBRACKET, yyline, yycolumn);
            } 
            // fall through
          case 89: break;
          case 14: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_LBRACE, yyline, yycolumn);
            } 
            // fall through
          case 90: break;
          case 15: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_RBRACE, yyline, yycolumn);
            } 
            // fall through
          case 91: break;
          case 16: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_COMMA, yyline, yycolumn);
            } 
            // fall through
          case 92: break;
          case 17: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_COLON, yyline, yycolumn);
            } 
            // fall through
          case 93: break;
          case 18: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_LT, yyline, yycolumn);
            } 
            // fall through
          case 94: break;
          case 19: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_AFF, yyline, yycolumn);
            } 
            // fall through
          case 95: break;
          case 20: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_GT, yyline, yycolumn);
            } 
            // fall through
          case 96: break;
          case 21: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_NOT, yyline, yycolumn);
            } 
            // fall through
          case 97: break;
          case 22: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_CIRC, yyline, yycolumn);
            } 
            // fall through
          case 98: break;
          case 23: 
            { System.out.print(yytext());
            } 
            // fall through
          case 99: break;
          case 24: 
            { yybegin(ANNOTATION);
            } 
            // fall through
          case 100: break;
          case 25: 
            { System.out.print("-> " + annotation_type + ": " + annotation_buffer); annotation_buffer = ""; yybegin(COMMENT_DOC);
            } 
            // fall through
          case 101: break;
          case 26: 
            { string.append( yytext() );
            } 
            // fall through
          case 102: break;
          case 27: 
            { yybegin(YYINITIAL); 
                                       return new Symbol(Terminals.TOKEN_LIT_STRING, yyline, yycolumn, new String(string));
            } 
            // fall through
          case 103: break;
          case 28: 
            { string.append('\\');
            } 
            // fall through
          case 104: break;
          case 29: 
            { System.out.println("$$"); yybegin(COMMENT);
            } 
            // fall through
          case 105: break;
          case 30: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_LIT_INTEGER, yyline, yycolumn, new Integer(Integer.decode(yytext())) );
            } 
            // fall through
          case 106: break;
          case 31: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_OF, yyline, yycolumn);
            } 
            // fall through
          case 107: break;
          case 32: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_IF, yyline, yycolumn);
            } 
            // fall through
          case 108: break;
          case 33: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_DO, yyline, yycolumn);
            } 
            // fall through
          case 109: break;
          case 34: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_DOTDOT, yyline, yycolumn);
            } 
            // fall through
          case 110: break;
          case 35: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_LE, yyline, yycolumn);
            } 
            // fall through
          case 111: break;
          case 36: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_EQ, yyline, yycolumn);
            } 
            // fall through
          case 112: break;
          case 37: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_GE, yyline, yycolumn);
            } 
            // fall through
          case 113: break;
          case 38: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_NE, yyline, yycolumn);
            } 
            // fall through
          case 114: break;
          case 39: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_OR, yyline, yycolumn);
            } 
            // fall through
          case 115: break;
          case 40: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_AND, yyline, yycolumn);
            } 
            // fall through
          case 116: break;
          case 41: 
            { System.out.println("$$"); yybegin(YYINITIAL);
            } 
            // fall through
          case 117: break;
          case 42: 
            { System.out.println("$$$"); yybegin(YYINITIAL);
            } 
            // fall through
          case 118: break;
          case 43: 
            { string.append('\"');
            } 
            // fall through
          case 119: break;
          case 44: 
            { string.append('\t');
            } 
            // fall through
          case 120: break;
          case 45: 
            { string.append('\r');
            } 
            // fall through
          case 121: break;
          case 46: 
            { string.append('\n');
            } 
            // fall through
          case 122: break;
          case 47: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_END, yyline, yycolumn);
            } 
            // fall through
          case 123: break;
          case 48: 
            { System.out.println("$$$"); yybegin(COMMENT_DOC);
            } 
            // fall through
          case 124: break;
          case 49: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_NEW, yyline, yycolumn);
            } 
            // fall through
          case 125: break;
          case 50: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_VAR, yyline, yycolumn);
            } 
            // fall through
          case 126: break;
          case 51: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_TRUE, yyline, yycolumn);
            } 
            // fall through
          case 127: break;
          case 52: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_TYPE, yyline, yycolumn);
            } 
            // fall through
          case 128: break;
          case 53: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_THEN, yyline, yycolumn);
            } 
            // fall through
          case 129: break;
          case 54: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_ELSE, yyline, yycolumn);
            } 
            // fall through
          case 130: break;
          case 55: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_CASE, yyline, yycolumn);
            } 
            // fall through
          case 131: break;
          case 56: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_NULL, yyline, yycolumn);
            } 
            // fall through
          case 132: break;
          case 57: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_FALSE, yyline, yycolumn);
            } 
            // fall through
          case 133: break;
          case 58: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_ARRAY, yyline, yycolumn);
            } 
            // fall through
          case 134: break;
          case 59: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_PRINTLN, yyline, yycolumn);
            } 
            // fall through
          case 135: break;
          case 60: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_BEGIN, yyline, yycolumn);
            } 
            // fall through
          case 136: break;
          case 61: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_WHILE, yyline, yycolumn);
            } 
            // fall through
          case 137: break;
          case 62: 
            { annotation_type = "param";
            } 
            // fall through
          case 138: break;
          case 63: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_RETURN, yyline, yycolumn);
            } 
            // fall through
          case 139: break;
          case 64: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_READLN, yyline, yycolumn);
            } 
            // fall through
          case 140: break;
          case 65: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_STRUCT, yyline, yycolumn);
            } 
            // fall through
          case 141: break;
          case 66: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_STRING, yyline, yycolumn);
            } 
            // fall through
          case 142: break;
          case 67: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_SWITCH, yyline, yycolumn);
            } 
            // fall through
          case 143: break;
          case 68: 
            { annotation_type = "return";
            } 
            // fall through
          case 144: break;
          case 69: 
            { annotation_type = "author";
            } 
            // fall through
          case 145: break;
          case 70: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_INTEGER, yyline, yycolumn);
            } 
            // fall through
          case 146: break;
          case 71: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_BOOLEAN, yyline, yycolumn);
            } 
            // fall through
          case 147: break;
          case 72: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_DEFAULT, yyline, yycolumn);
            } 
            // fall through
          case 148: break;
          case 73: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_DISPOSE, yyline, yycolumn);
            } 
            // fall through
          case 149: break;
          case 74: 
            { annotation_type = "version";
            } 
            // fall through
          case 150: break;
          case 75: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_FUNCTION, yyline, yycolumn);
            } 
            // fall through
          case 151: break;
          case 76: 
            { System.out.println("*** " + yytext()); return new Symbol(Terminals.TOKEN_PROCEDURE, yyline, yycolumn);
            } 
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
