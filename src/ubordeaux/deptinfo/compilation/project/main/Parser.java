package ubordeaux.deptinfo.compilation.project.main;

import java.util.Iterator;
import fr.c12.compilator.error.*;
import ubordeaux.deptinfo.compilation.project.type.*;
import fr.c12.compilator.special.*;
import java.util.Scanner;
import java.util.HashMap;
import fr.c12.compilator.environment.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import ubordeaux.deptinfo.compilation.project.intermediateCode.*;
import java.util.Map;
import beaver.*;
import ubordeaux.deptinfo.compilation.project.node.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjLmTq5LKGlRj$KOcYYGW648sAaWH4Ye16EWW4wH1w5OGWaOWDn2XY0wH4Om452osAY8Y" +
		"WO4442zs61H05B0XsB2YsyUx##P$T$OK4e#TmZl#V##wycVTcvhtTVJiBMFEHXGheY6Qu1E" +
		"NmB8v36HoF4v2899o8iZW9vN4oaj4SzP21DZWV5wCjsg4zKb0PPoCLn#0TsOcnsZiLPw0Ay" +
		"d0Zid4bEgCRUg8F#cD450#b$t7iIv77s05lR5bJXDX3q06Dq92nIz539PM3Vl9mL8G7TwR7" +
		"5YlJndW6hN0HZcQSYhvTkgO4uvmMN8EiOvo7V74IuiOPNgmuf#jUpPITZEIDanStpkN5YdE" +
		"chaUSADuuZUF66LcCE6$ZEQoZznUmWd4idAMhMuLN66TPt3ZN5oDELVLx2Pvdd3JV$LOvRf" +
		"obCUEae9h7atkNKd0Aqb4TDL0JjN6UnzOLMpss53J0EUgf1JRx$3IEwQSJUlly349BDCMvd" +
		"gn2Vlh5z9E2WN5iWsFRP6jCszMSwRPTvh6knqk#pAz0BSsw1uRwCiY96MMnRtSYh$nit8fy" +
		"t8bnk0MtuNQCnmJKqKYZP7dOVf$B7j9DZw9x98fkRHJTMr5q7xXqaPd#hpcoD9DnhNoD#J0" +
		"fBNQaQPIk2qao8QnRfr9TlU#cOJGsyOIx2$TZ8kx0f29Bat6JuwkGqXZrMZ$iTJOMOI6Un0" +
		"MgkL2vYV9Z$4VpUZEcO2hkHgQEoq8NvUuEzr9zN#K1oiEKSvMlKbxEKtsiRB5FTUx3CYVFf" +
		"$04bc0UNaUXlC6s0FVY7Zp0T#M3Q8qRC0Epy33cS6NssV0gCvsBH$6ul2bxi83j5xARkgVn" +
		"eho3bNWPg#dZDQp11cp46tWJx$7$Bjx75gu#Wojlm4mQyNHemlEm6QzU2zO0BLa9jEOgs$0" +
		"Q6hnk0RvnIh7QE9fLL6ds4vntVazUuqI#2n9S5K0oJy#Ah5DEuUbpAj$rzdiuqaEr4eYTpD" +
		"WDVR4JYnLxACU7vA2VQ1uEFzDKldLoULxteDSQlaopIp1EQ2OOn$35wVKlnAd3E8c#ECd$q" +
		"deIV75IIonEVpwTtUbz4D$RYQopGtu6ifP9PcLJKd7SyoBljuJ3Z6FwFBbtoGnNN#MS#ijj" +
		"IsBTvhQPhDz2dWAiFRn#KkFuIVBvIQIdD5zMXyudlgr775jYJ5iYhMxRUHvhTLQGtiphXRD" +
		"EulFYZL8tPfIQljs9lFB1jry7riUTM3DtOJMR5OxKcxiLpVvVw28p$Lzpf6cgEPfBATLqf0" +
		"HAzSFIoB3KNQM3p#KmvuGxWz#jLVWLUNQH9OFVXhQlzB3azXgwpq8QFnlyH$EQn6ymWr$si" +
		"UOLb#rJlHjF0FjKD$YCsNdsOprMbRB1tEqsbLzGQVmACgXFvzT#3hEmLvJkd0ts#heHvphd" +
		"cUMqQOxEFlCCZglWx6jLbQiwQ#l3DtmItrZRRc8Z8dj9hG2p0xadCSRMypUIE97O0nWTRTt" +
		"XWBy9H1tws7vGP$xEfYmGiCYTo6N8UUJo7BUKV1gvDJcLF9fSY$QAv0no3t9pya9oM$8kSX" +
		"R7bIFt8sUIXvAtagyWBoTVH$xoO7oZDdKtCmzNdcOfef0u8TYtx3YJs1yUVLtcEA9CK0xSG" +
		"vzxLP$F$eFaqMgpVHwlyYBALLHcNcPjdNEoxjKy8hpN7BEAjYOKk1QpBsE4ugrdlptxJRM$" +
		"cVq#H2xb9QfRhBoVuwxHDTKbwgb#7x6T$Lf5kOuw$oIYkK$NbM1SYzV0ulK8x5B$kzNUZXX" +
		"BOQzhJd$Qlo9VhVrR2UwrrK$xKrnZ1n1JNVriOZYHe$rx2TwxndnVNds3REZUM#ELUJzQzn" +
		"FJYL74BQeVICnKsRxdldVvUfXuY1X3J2HuhrhbNVOvn5oLUQzPbOXftdm2dCEJ14OAkK9GX" +
		"pvy$jQGUn7JO#rxKS5Vfg#$G7c7xaLPvVRA#gmRuvGBbJSexmkosLPPnmLMAEzHrd61doDp" +
		"2Xo8agV$7YfJjFLPIRv#EPTSmILNTicdU#SO1zZmMUVNCSoQEkOipMkrydxLf#cSTEsVe$P" +
		"kd3j8rrVWyXswVylpkcuwg3S75sLzXrv$O9lBfpuxveskjIOJLRnpp0dUlbN$y69RUjOO1J" +
		"xziQeV4tjkSFzSSrgvyYk871#OuRBFTFcndyCsBbkXTnwsyOtsb#mCTcGjz2UlowloYgoML" +
		"VAoh9INP8MyA8laILaeJqY#C#85UOGj$GkVS#7vBJE91mYU5JADk8$WMICyw#Lkee2OGKnt" +
		"vjybTwgdMJ9LPZlISqxxh4oHoJ99xf29yWn7FKzTlYnrRFconE6ddNQnqpuLobpMoNhDVm7" +
		"nkChpmwjwJERAeux4yqTsoCUgtou7v5VvHVRBp$AJ$2W$o3xvdlelvJlv5k6V$UQNprN#J3" +
		"vLQPVoDyI7iisHlv9FLFkHyZmfbDV87n3l4U$Avh3VjvrsazDka8rm$UGjUP$jd$A7zdyJk" +
		"nOOnMgZD6j442Q$xMpObOh5hm4ZAZgvq8xeh6ZFENPLq84LZuqkh4I7EtLR45tfEujZSiWv" +
		"JbrbyViLXCdwoeR1AipY4nvmQgiXj0qXZw1j1Ba$sSO0oeE8mJnB1hFMvTk3C5Yl1eXWDTk" +
		"8iUsJdPK4M96mkZ89Wz$AGJI9WsRCeJd7NqXc5KCOoANFN78ByaL4Iw8LqPfeIhqRcPoNoV" +
		"Xjo1SpnsoEoQQ#D$l3w6yO#ndiPx2VuNoZ1tmmOyZHO8JH80gk$1jLR$Qq");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};
 
	public HashMap<String,Node> symtab = new HashMap<String,Node> ();	//ref du td6 a completer
	
	//public Stm statement;	//pour utiliser les methodes... a completer
	
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
		System.err.format("*** " + msg + " ligne %d, colonne %d\n",
			Symbol.getLine(token.getStart()),
			Symbol.getColumn(token.getStart()));
		
	}
	
	public void semanticErrorReformated(Symbol token) {
			System.err.format(" ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
	}
		
	private TypeEnvironment typeEnvironment = new TypeEnvironment("types");
	private ProcedureEnvironment procedureEnvironment = new ProcedureEnvironment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;
	
	private boolean critical_mode = false;

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = type_declaration_part.tp variable_declaration_part.vp procedure_definition_part.pp DEBUG_clear_useless_stack TOKEN_BEGIN push_stackenv statement_list.l TOKEN_END pop_stackenv
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol tp = _symbols[offset + 1];
					final Symbol vp = _symbols[offset + 2];
					final Symbol _symbol_pp = _symbols[offset + 3];
					final NodeList pp = (NodeList) _symbol_pp.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final NodeList l = (NodeList) _symbol_l.value;
					 
		System.out.println("\n[C.I.] Type Declaration Part:"); 
		System.out.println(tp);
		
		System.out.println("\n[C.I.] Variable Declaration Part:"); 
		Map<String, Type> variable_table = stackEnvironment.getEnvironment().get(0);
		for(String key : variable_table.keySet()) {
			System.out.println("Label:" + key + "@Type:" + variable_table.get(key));
			//Generer code intermediaire
		}

		System.out.println("\n[C.I.] Procedure Declaration Part:"); 
		if(pp != null) {
			System.out.println(pp);
			pp.generateIntermediateCode();
		}
		
		System.out.println("\n[C.I.] Principal Program:");
		l.generateIntermediateCode();
		return _symbol_l;
				}
			},
			Action.NONE,  	// [1] type_declaration_part = 
			RETURN2,	// [2] type_declaration_part = TOKEN_TYPE type_declaration_list; returns 'type_declaration_list' although none is marked
			new Action() {	// [3] type_declaration_list = type_declaration_list type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [4] type_declaration_list = type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [5] type_declaration = TOKEN_IDENTIFIER.name TOKEN_AFF type.t TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					
			try{
				//System.out.println("Registering type:" + t.toString());
				typeEnvironment.putVariable(name, t);
			} catch (RedefinitionType e) {
				System.err.println(e);
			} finally {
				return new EmptySymbol();
			}
				}
			},
			Action.RETURN,	// [6] type = simple_type
			Action.RETURN,	// [7] type = named_type
			Action.RETURN,	// [8] type = index_type
			Action.RETURN,	// [9] type = array_type
			Action.RETURN,	// [10] type = pointer_type
			Action.RETURN,	// [11] type = structure_type
			new Action() {	// [12] simple_type = TOKEN_STRING
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeString();
				}
			},
			new Action() {	// [13] simple_type = TOKEN_INTEGER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeInt();
				}
			},
			new Action() {	// [14] simple_type = TOKEN_BOOLEAN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeBoolean();
				}
			},
			new Action() {	// [15] named_type = TOKEN_IDENTIFIER.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_r = _symbols[offset + 1];
					final String r = (String) _symbol_r.value;
					 
		//System.out.println("Named: " + r); 
		try {
			return typeEnvironment.getVariableValue(r);
		} catch(UnknownType e) {	//Si pas deja present
			System.err.println(e);
			return new TypeNamed(r);
		}
				}
			},
			Action.RETURN,	// [16] index_type = enumerated_type
			Action.RETURN,	// [17] index_type = subrange_type
			new Action() {	// [18] enumerated_type = init_enumerated_type TOKEN_LPAR identifier_list.id_l TOKEN_RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id_l = _symbols[offset + 3];
					final IdentifierList id_l = (IdentifierList) _symbol_id_l.value;
					 
			Vector<Type> array_tmp = new Vector<>();
			int const_id = 0;
			for(String identifier : id_l) {
				array_tmp.add(new TypeItemEnum(const_id, identifier));
				const_id +=1;
			}
			return new TypeTuple(array_tmp);
				}
			},
			Action.NONE,  	// [19] init_enumerated_type = 
			new Action() {	// [20] subrange_type = TOKEN_LIT_INTEGER.min TOKEN_DOTDOT TOKEN_LIT_INTEGER.max
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_min = _symbols[offset + 1];
					final Integer min = (Integer) _symbol_min.value;
					final Symbol _symbol_max = _symbols[offset + 3];
					final Integer max = (Integer) _symbol_max.value;
					 	
			if(min > max) {
				System.err.println("[InvalidType@subrange_type] min@" + min + " is greater than max@" +max);
				if(critical_mode)
					System.exit(0);
			}
			return new TypeArrayRange(new TypeInt(min), new TypeInt(max));
				}
			},
			new Action() {	// [21] subrange_type = TOKEN_IDENTIFIER.id_min TOKEN_DOTDOT TOKEN_IDENTIFIER.id_max
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id_min = _symbols[offset + 1];
					final String id_min = (String) _symbol_id_min.value;
					final Symbol _symbol_id_max = _symbols[offset + 3];
					final String id_max = (String) _symbol_id_max.value;
						
			try {
				int val_min = typeEnvironment.getEnumType(id_min).getValue();
				int val_max = typeEnvironment.getEnumType(id_max).getValue();

				if(val_min > val_max) {
					System.err.println("[InvalidType@subrange_type] min@[" + id_min + ":" + val_min + "] is greater than max@[" + id_max + ":" +val_max +"]");
					if(critical_mode)
						System.exit(0);
				}
				
				return new TypeArrayRange(new TypeInt(val_min), new TypeInt(val_max));
				
			} catch (NoSuchFieldException e) {
				System.err.println("subrange_type: " + e );
				return new TypeArrayRange(new TypeInt(0), new TypeInt(0));
			}
				}
			},
			new Action() {	// [22] array_type = TOKEN_ARRAY TOKEN_LBRACKET range_type.range TOKEN_RBRACKET TOKEN_OF type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_range = _symbols[offset + 3];
					final Type range = (Type) _symbol_range.value;
					final Symbol _symbol_t = _symbols[offset + 6];
					final Type t = (Type) _symbol_t.value;
					 return new TypeArray(range, t);
				}
			},
			Action.RETURN,	// [23] range_type = enumerated_type
			Action.RETURN,	// [24] range_type = subrange_type
			Action.RETURN,	// [25] range_type = named_type
			new Action() {	// [26] pointer_type = TOKEN_CIRC type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					 return new TypePointer(t);
				}
			},
			new Action() {	// [27] structure_type = TOKEN_STRUCT TOKEN_LBRACE feature_list_type.list TOKEN_RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 3];
					final TypeFeatureList list = (TypeFeatureList) _symbol_list.value;
					 return new TypeStruct(list);
				}
			},
			new Action() {	// [28] feature_list_type = feature_list_type.list feature_type.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final TypeFeatureList list = (TypeFeatureList) _symbol_list.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final TypeFeature elem = (TypeFeature) _symbol_elem.value;
					 list.add(elem); return list;
				}
			},
			new Action() {	// [29] feature_list_type = feature_type.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_elem = _symbols[offset + 1];
					final TypeFeature elem = (TypeFeature) _symbol_elem.value;
					 TypeFeatureList list = new TypeFeatureList(elem); return list;
				}
			},
			new Action() {	// [30] feature_type = TOKEN_IDENTIFIER.id TOKEN_COLON type.t TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					 System.out.println("FEATURES"); return new TypeFeature(id, t);
				}
			},
			Action.NONE,  	// [31] variable_declaration_part = 
			RETURN2,	// [32] variable_declaration_part = TOKEN_VAR variable_declaration_list; returns 'variable_declaration_list' although none is marked
			new Action() {	// [33] variable_declaration_list = variable_declaration_list variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [34] variable_declaration_list = variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [35] variable_declaration = identifier_list.id_list TOKEN_COLON type.t TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id_list = _symbols[offset + 1];
					final IdentifierList id_list = (IdentifierList) _symbol_id_list.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					
																for(String str : id_list){
																	try {
																		stackEnvironment.add_node_to_latest_portability(str, t);
																	}catch ( RedefinitionVariable e) {
																		System.err.println(e + " at Line : " + Symbol.getLine(t.getStart()));
																		if(critical_mode)
																			System.exit(0);
																	}
																}
																
																return _symbol_id_list;
				}
			},
			new Action() {	// [36] identifier_list = identifier_list.list TOKEN_COMMA TOKEN_IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final IdentifierList list = (IdentifierList) _symbol_list.value;
					final Symbol _symbol_id = _symbols[offset + 3];
					final String id = (String) _symbol_id.value;
					 
																	list.add(id); return list;
				}
			},
			new Action() {	// [37] identifier_list = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					 
																	return new IdentifierList(name);
				}
			},
			Action.NONE,  	// [38] procedure_definition_part = 
			Action.RETURN,	// [39] procedure_definition_part = procedure_definition_list
			new Action() {	// [40] procedure_definition_list = procedure_definition_list.l procedure_definition.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final NodeList l = (NodeList) _symbol_l.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final NodeList elem = (NodeList) _symbol_elem.value;
					 
		l.add(elem); 
		return l;
				}
			},
			new Action() {	// [41] procedure_definition_list = procedure_definition.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_elem = _symbols[offset + 1];
					final NodeList elem = (NodeList) _symbol_elem.value;
					
		NodeList list = new NodeList(elem); return list;
				}
			},
			new Action() {	// [42] procedure_definition = procedure_definition_head.type_fct block.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol type_fct = _symbols[offset + 1];
					final Symbol _symbol_stm = _symbols[offset + 2];
					final NodeList stm = (NodeList) _symbol_stm.value;
					 return stm;
				}
			},
			new Action() {	// [43] procedure_definition = procedure_declaration_head TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NodeList();
				}
			},
			new Action() {	// [44] procedure_definition_head = procedure_head.type_fct
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_type_fct = _symbols[offset + 1];
					final TypeFunct type_fct = (TypeFunct) _symbol_type_fct.value;
					
		try {
			type_fct.setDefined(true); 
			procedureEnvironment.putVariable(type_fct.getName(), type_fct); 
		} catch (RedefinitionFunction|RedefinitionFunctionPrototype e) {
			System.err.println(e + " at Line : " + Symbol.getLine(type_fct.getStart()));
			if(critical_mode)
				System.exit(0);
		}
		return type_fct;
				}
			},
			new Action() {	// [45] procedure_declaration_head = procedure_head.type_fct
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_type_fct = _symbols[offset + 1];
					final TypeFunct type_fct = (TypeFunct) _symbol_type_fct.value;
					
			try {
				type_fct.setDefined(false); 
				procedureEnvironment.putVariable(type_fct.getName(), type_fct); 
			} catch (RedefinitionFunction|RedefinitionFunctionPrototype e) {
				System.err.println(e + " at Line : " + Symbol.getLine(type_fct.getStart()));
				if(critical_mode)
					System.exit(0);
			}
			return type_fct;
				}
			},
			new Action() {	// [46] procedure_head = TOKEN_PROCEDURE TOKEN_IDENTIFIER.funct_name TOKEN_LPAR argt_part.args TOKEN_RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_funct_name = _symbols[offset + 2];
					final String funct_name = (String) _symbol_funct_name.value;
					final Symbol _symbol_args = _symbols[offset + 4];
					final NodeList args = (NodeList) _symbol_args.value;
									
				TypeTuple params_tuple = new TypeTuple();	
				stackEnvironment.getEnvironment().push(new HashMap<String, Type>()); 			

				for(Node n : args.getList()) {
					try {
						NodeId n_id = (NodeId) n;
						params_tuple.add(new TypeFeature(n_id.getName(), n_id.getType()));
						stackEnvironment.add_node_to_latest_portability(n_id.getName(), n_id.getType());
				
					}catch ( RedefinitionVariable e) {
						System.err.println(e + " at Line : " + Symbol.getLine(args.getStart()));
						if(critical_mode)
							System.exit(0);
					}
				}
				
				
				TypeFunct type_function = new TypeFunct(funct_name, params_tuple, new TypeVoid());
				return type_function;
				}
			},
			new Action() {	// [47] procedure_head = TOKEN_FUNCTION TOKEN_IDENTIFIER.funct_name TOKEN_LPAR argt_part.args TOKEN_RPAR TOKEN_COLON type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_funct_name = _symbols[offset + 2];
					final String funct_name = (String) _symbol_funct_name.value;
					final Symbol _symbol_args = _symbols[offset + 4];
					final NodeList args = (NodeList) _symbol_args.value;
					final Symbol _symbol_t = _symbols[offset + 7];
					final Type t = (Type) _symbol_t.value;
					
				TypeTuple params_tuple = new TypeTuple();
				stackEnvironment.getEnvironment().push(new HashMap<String, Type>()); 
				
				for(Node n : args.getList()) {
					try {
						NodeId n_id = (NodeId) n;
						params_tuple.add(new TypeFeature(n_id.getName(), n_id.getType()));
						stackEnvironment.add_node_to_latest_portability(n_id.getName(), n_id.getType());

					}catch ( RedefinitionVariable e) {
						System.err.println(e + " at Line : " + Symbol.getLine(args.getStart()));
						if(critical_mode)
							System.exit(0);
					}
				}
				
				TypeFunct type_function = new TypeFunct(funct_name, params_tuple, t);

				//stackEnvironment.getEnvironment().pop(); 
				return type_function;
				//return new NodeCallFct(funct_name, type_function, new NodeList());
				}
			},
			Action.NONE,  	// [48] argt_part = 
			Action.RETURN,	// [49] argt_part = argt_list
			new Action() {	// [50] argt_list = argt_list.nl TOKEN_COMMA argt.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_nl = _symbols[offset + 1];
					final NodeList nl = (NodeList) _symbol_nl.value;
					final Symbol _symbol_elem = _symbols[offset + 3];
					final NodeId elem = (NodeId) _symbol_elem.value;
					 nl.add(elem); return nl;
				}
			},
			new Action() {	// [51] argt_list = argt.elem
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_elem = _symbols[offset + 1];
					final NodeId elem = (NodeId) _symbol_elem.value;
					 NodeList nl = new NodeList(elem); return nl;
				}
			},
			new Action() {	// [52] argt = TOKEN_IDENTIFIER.id TOKEN_COLON type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					 return new NodeId(id, t);
				}
			},
			new Action() {	// [53] block = variable_declaration_part TOKEN_BEGIN push_stackenv statement_list.list TOKEN_END pop_stackenv
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 4];
					final NodeList list = (NodeList) _symbol_list.value;
					 return _symbol_list;
				}
			},
			new Action() {	// [54] pop_stackenv = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
						
						//System.out.println("[STACK] Poped one more stack layer"); 
						stackEnvironment.getEnvironment().pop(); 
						return new EmptySymbol();
				}
			},
			new Action() {	// [55] push_stackenv = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
						
						//System.out.println("[STACK] Pushed one more stack layer"); 
						stackEnvironment.getEnvironment().push(new HashMap<String, Type>(stackEnvironment.getEnvironment().peek())); 
						return new EmptySymbol();
				}
			},
			new Action() {	// [56] DEBUG_clear_useless_stack = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 
		while(stackEnvironment.getEnvironment().size() > 1) { 
			stackEnvironment.getEnvironment().pop(); 
		} 
		return new EmptySymbol();
				}
			},
			new Action() {	// [57] statement_list = statement_list.root statement.elt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_root = _symbols[offset + 1];
					final NodeList root = (NodeList) _symbol_root.value;
					final Symbol _symbol_elt = _symbols[offset + 2];
					final Node elt = (Node) _symbol_elt.value;
					 root.add(elt); return root;
				}
			},
			new Action() {	// [58] statement_list = statement.elt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_elt = _symbols[offset + 1];
					final Node elt = (Node) _symbol_elt.value;
					 return new NodeList(elt);
				}
			},
			Action.RETURN,	// [59] statement = simple_statement
			Action.RETURN,	// [60] statement = structured_statement
			Action.RETURN,	// [61] simple_statement = assignment_statement
			Action.RETURN,	// [62] simple_statement = procedure_statement
			Action.RETURN,	// [63] simple_statement = new_statement
			Action.RETURN,	// [64] simple_statement = dispose_statement
			Action.RETURN,	// [65] simple_statement = println_statement
			Action.RETURN,	// [66] simple_statement = readln_statement
			Action.RETURN,	// [67] simple_statement = return_statement
			new Action() {	// [68] assignment_statement = variable_access.e1 TOKEN_AFF expression.e2 TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					  
		//System.out.println("ASSIGN;::::" + e1.getType() + " -> " + e2.getType());
			
			//Type(e1) = Type(e2), ou Pointer(Type(e1)) = Type(e2) 
			if(!e1.getType().equals(e2.getType()) && !(new TypePointer(e1.getType()).equals(e2.getType()) )) {
				System.err.println("[InvalidAffectation] Impossible to assign a " + e1.getType() + " to " + e2.getType());
				if(critical_mode)
					System.exit(0);
				System.err.println("[InvalidAffectation] Automatically recover from error.");
				return new NodeAssign(e1,e1);
			}
			return new NodeAssign(e1, e2);
				}
			},
			new Action() {	// [69] procedure_statement = procedure_expression.n TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final NodeCallFct n = (NodeCallFct) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [70] procedure_expression = TOKEN_IDENTIFIER.func_name TOKEN_LPAR expression_part.args TOKEN_RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_func_name = _symbols[offset + 1];
					final String func_name = (String) _symbol_func_name.value;
					final Symbol _symbol_args = _symbols[offset + 3];
					final NodeList args = (NodeList) _symbol_args.value;
					 
																				try{
																					stackEnvironment.getEnvironment().push(new HashMap<String, Type>()); //push env
																					HashMap<String, Type> table = (HashMap<String, Type>) stackEnvironment.getEnvironment().peek();
																					
																					TypeFunct fct_type = procedureEnvironment.getTypeFct(func_name);
																					Iterator<Type> it = fct_type.getParams().iterator();
																					while(it.hasNext()) {
																						try {
																							TypeFeature type_feature= (TypeFeature) it.next();
																							stackEnvironment.add_node_to_latest_portability(type_feature.getName(), type_feature.getType());	
																						} catch (RedefinitionVariable e) {
																							System.err.println(e);
																						}
																					}
																					return new NodeCallFct(func_name, fct_type, args);
																				
																				}catch(NoSuchFieldException e){
																					System.out.println("Procedure Expression: " + e + " at Line : " + Symbol.getLine(args.getStart()));
																					return new NodeCallFct(func_name, new TypeFunct(func_name, new TypeTuple(), new TypeVoid()), args);
																				}
				}
			},
			Action.NONE,  	// [71] expression_part = 
			Action.RETURN,	// [72] expression_part = expression_list
			new Action() {	// [73] expression_list = expression_list.root TOKEN_COMMA expression.elt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_root = _symbols[offset + 1];
					final NodeList root = (NodeList) _symbol_root.value;
					final Symbol _symbol_elt = _symbols[offset + 3];
					final NodeExp elt = (NodeExp) _symbol_elt.value;
					 root.add(elt); return root;
				}
			},
			new Action() {	// [74] expression_list = expression.expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expr = _symbols[offset + 1];
					final NodeExp expr = (NodeExp) _symbol_expr.value;
					 return new NodeList(expr);
				}
			},
			new Action() {	// [75] new_statement = TOKEN_NEW variable_access.node TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 2];
					final NodeExp node = (NodeExp) _symbol_node.value;
					 
		if(!(node.getType() instanceof TypePointer)) {
			System.err.println("[InvalidPointerAccess] Trying to new a variable that is not a pointer.");
			if(critical_mode)
				System.exit(0);
			return node;
		}
		/*
		if(node instanceof NodeId) {
			NodeId n_id = (NodeId) node;
			try {
				stackEnvironment.alloc_variable(n_id.getName()); 
			}catch(MemoryLeak e) {
				System.err.println(e + " at Line : " + Symbol.getLine(node.getStart()));
				if(critical_mode)
					System.exit(0);
				return node;
			}
		}
		*/
		
		return new NodeNew(node);
				}
			},
			new Action() {	// [76] dispose_statement = TOKEN_DISPOSE variable_access.node TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 2];
					final NodeExp node = (NodeExp) _symbol_node.value;
					 
								if(!(node.getType() instanceof TypePointer)) {
									System.err.println("[InvalidPointerAccess] Trying to dispose a variable that is not a pointer.");
									if(critical_mode)
										System.exit(0);
									return node;
								}
								/*
								 * if(node instanceof NodeId) {
									NodeId n_id = (NodeId) node;
									try {
										stackEnvironment.dispose_variable(n_id.getName()); 
									}catch(MemoryLeak e) {
										System.err.println(e + " at Line : " + Symbol.getLine(node.getStart()));
										if(critical_mode)
											System.exit(0);
										return node;
									}
								}
								*/
								return new NodeDispose(node);
				}
			},
			new Action() {	// [77] println_statement = TOKEN_PRINTLN expression.args TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_args = _symbols[offset + 2];
					final NodeExp args = (NodeExp) _symbol_args.value;
					 
				TypeTuple params_tuple = null;

				if(args instanceof NodeCallFct) {
					NodeCallFct tmp = (NodeCallFct) args;
					params_tuple= new TypeTuple(new TypeFeature(tmp.getName(), tmp.getType()));
				} else {
					params_tuple= new TypeTuple(new TypeFeature("println nodelist", args.getType()));
				}

				
				return new NodeCallFct(
						"println",
						new TypeFunct("println", params_tuple, new TypeVoid()),
						new NodeList(args));
				}
			},
			new Action() {	// [78] readln_statement = TOKEN_READLN expression.e TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 
			return new NodeCallFct(
				"readln", 
				new TypeFunct("readln", 
					new TypeTuple(e.getType()), 
					e.getType()),
				new NodeList());
				}
			},
			new Action() {	// [79] return_statement = TOKEN_RETURN expression.node TOKEN_SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_node = _symbols[offset + 2];
					final NodeExp node = (NodeExp) _symbol_node.value;
					 return new NodeReturn(node);
				}
			},
			Action.RETURN,	// [80] structured_statement = block
			Action.RETURN,	// [81] structured_statement = if_statement
			Action.RETURN,	// [82] structured_statement = while_statement
			Action.RETURN,	// [83] structured_statement = switch_statement
			new Action() {	// [84] if_statement = TOKEN_IF expression.e TOKEN_THEN statement.stm_if
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					final Symbol _symbol_stm_if = _symbols[offset + 4];
					final Node stm_if = (Node) _symbol_stm_if.value;
						
			return new NodeIf(e, stm_if);
				}
			},
			new Action() {	// [85] if_statement = TOKEN_IF expression.e TOKEN_THEN statement.stm_if TOKEN_ELSE statement.stm_else
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					final Symbol _symbol_stm_if = _symbols[offset + 4];
					final Node stm_if = (Node) _symbol_stm_if.value;
					final Symbol _symbol_stm_else = _symbols[offset + 6];
					final Node stm_else = (Node) _symbol_stm_else.value;
					 
			return new NodeIf(e, stm_if, stm_else);
				}
			},
			new Action() {	// [86] while_statement = TOKEN_WHILE expression.e1 TOKEN_DO statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 2];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_stm = _symbols[offset + 4];
					final Node stm = (Node) _symbol_stm.value;
						return new NodeWhile(e1, stm);
				}
			},
			new Action() {	// [87] switch_statement = TOKEN_SWITCH expression.root TOKEN_BEGIN case_statement_list.case_list TOKEN_END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_root = _symbols[offset + 2];
					final NodeExp root = (NodeExp) _symbol_root.value;
					final Symbol _symbol_case_list = _symbols[offset + 4];
					final NodeCaseList case_list = (NodeCaseList) _symbol_case_list.value;
					 return new NodeSwitch(root, case_list);
				}
			},
			new Action() {	// [88] case_statement_list = case_statement_list.list case_statement.case_arr case_default.case_default
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final NodeCaseList list = (NodeCaseList) _symbol_list.value;
					final Symbol _symbol_case_arr = _symbols[offset + 2];
					final NodeList case_arr = (NodeList) _symbol_case_arr.value;
					final Symbol _symbol_case_default = _symbols[offset + 3];
					final NodeCase case_default = (NodeCase) _symbol_case_default.value;
					
				Iterator<Node> it = case_arr.iterator();
				while(it.hasNext()) {
					NodeCase nc = (NodeCase) it.next();
					list.add(nc);
				}

				if(case_default instanceof NodeCase) {
					list.add(case_default);
				}
				
				return list;
				}
			},
			new Action() {	// [89] case_statement_list = case_statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stm = _symbols[offset + 1];
					final NodeList stm = (NodeList) _symbol_stm.value;
					 
				NodeCaseList list = new NodeCaseList();
				
				Iterator<Node> it = stm.iterator();
				while(it.hasNext()) {
					NodeCase nc = (NodeCase) it.next();
					list.add(nc);
				}
				return list;
				}
			},
			new Action() {	// [90] case_statement = TOKEN_CASE identifier_list.id_list TOKEN_COLON statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id_list = _symbols[offset + 2];
					final IdentifierList id_list = (IdentifierList) _symbol_id_list.value;
					final Symbol _symbol_stm = _symbols[offset + 4];
					final Node stm = (Node) _symbol_stm.value;
					 
				NodeList res = new NodeList();
				for(String case_name : id_list) {
					res.add(new NodeCase(case_name, stm));
				}
				return res;
				}
			},
			Action.NONE,  	// [91] case_default = 
			new Action() {	// [92] case_default = TOKEN_DEFAULT TOKEN_COLON statement.stm
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stm = _symbols[offset + 3];
					final Node stm = (Node) _symbol_stm.value;
					 return new NodeCase(null, stm);
				}
			},
			new Action() {	// [93] variable_access = TOKEN_IDENTIFIER.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
						
			try{
				Type t = stackEnvironment.get_node_reachable(name);  
				return new NodeId(name, t);
			} catch (UnknownVariable e) {	//Not a normal variable
				try {						//Check enum
					Type tmp = typeEnvironment.getEnumType(name);
					if(tmp instanceof TypeItemEnum) {
						TypeItemEnum t = (TypeItemEnum) tmp;
						return new NodeId(t.getRefEnumRange(), new TypeInt(t.getValue()));
					}
					return new NodeId(null, null);					
					
				} catch (NoSuchFieldException e2) {

					System.err.println(e2 + " at Line : ");
					if(critical_mode)
						System.exit(0);
					return new NodeId(null, null);
				}
			}
				}
			},
			new Action() {	// [94] variable_access = variable_access.var TOKEN_LBRACKET expression.e TOKEN_RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_var = _symbols[offset + 1];
					final NodeExp var = (NodeExp) _symbol_var.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final NodeExp e = (NodeExp) _symbol_e.value;
					
			if(!(var.getType() instanceof TypeArray) ) {
				System.err.println("[InvalidArrayAccess] Trying to access a variable as array@" + var.getType() + "with " +e);
				if(critical_mode)
					System.exit(0);
				System.err.println("[InvalidArrayAccess] Automatically recover from syntax error.");
				return var;
				
			}
			if(e.getType() instanceof TypeBoolean || e.getType() instanceof TypeString) {
				System.err.println("[InvalidArrayAccess] Invalid Type@" + e.getType() + " to access array.");
				if(critical_mode)
					System.exit(0);
				System.err.println("[InvalidArrayAccess] Automatically recover from syntax error.");
				return var;
				//return new NodeArrayAccess(var, new NodeLiteral(new TypeInt(0), 0));
			}
			return new NodeArrayAccess(var, e);
				}
			},
			new Action() {	// [95] variable_access = expression.e TOKEN_CIRC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 
		/*
		if(!(e.getType() instanceof TypePointer)){
			System.err.println("[MEMLEAK] Trying to access free or undeclared pointer");
			
			if(critical_mode)
				System.exit(0);
			return e;
		}
		*/
		return new NodePtrAccess(e);
				}
			},
			new Action() {	// [96] expression = expression.e1 TOKEN_PLUS expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 

			//Gerer cas pointeur aussi
			if(!(e1.getType() instanceof TypeInt) || !(e2.getType() instanceof TypeInt)) {
				System.out.println("[InvalidBinaryOperation->Arithmetic] Plus: left@"+e1.getType() + ", right@"+e2.getType());
				return new NodeOp("invalid expr", e1, e2);
			}
			return new NodeOp("plus", e1, e2);
				}
			},
			new Action() {	// [97] expression = expression.e1 TOKEN_MINUS expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 
			//Gerer cas pointeur aussi
			if(!(e1.getType() instanceof TypeInt) || !(e2.getType() instanceof TypeInt)) {
				System.out.println("[InvalidBinaryOperation->Arithmetic] Minus: left@"+e1.getType() + ", right@"+e2.getType());
				return new NodeOp("invalid expr", e1, e2);
			}
			return new NodeOp("minus", e1, e2);
				}
			},
			new Action() {	// [98] expression = expression.e1 TOKEN_TIMES expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 
			//Gerer cas pointeur aussi
			if(!(e1.getType() instanceof TypeInt) || !(e2.getType() instanceof TypeInt)) {
				System.out.println("[InvalidBinaryOperation->Arithmetic] Times: left@"+e1.getType() + ", right@"+e2.getType());
				return new NodeOp("invalid expr", e1, e2);
			}
			return new NodeOp("times", e1, e2);
				}
			},
			new Action() {	// [99] expression = expression.e1 TOKEN_DIV expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 
			//Gerer cas pointeur aussi
			if(!(e1.getType() instanceof TypeInt) || !(e2.getType() instanceof TypeInt)) {
				System.out.println("[InvalidBinaryOperation->Arithmetic] Divide: left@"+e1.getType() + ", right@"+e2.getType());
				return new NodeOp("invalid expr", e1, e2);
			}
			return new NodeOp("divide", e1, e2);
				}
			},
			new Action() {	// [100] expression = TOKEN_MINUS expression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 
			return new NodeOp("u_minus", e);
				}
			},
			new Action() {	// [101] expression = expression.e1 TOKEN_OR expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeRel("or", e1, e2);
				}
			},
			new Action() {	// [102] expression = expression.e1 TOKEN_AND expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeRel("an", e1, e2);
				}
			},
			new Action() {	// [103] expression = TOKEN_NOT expression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return new NodeRel("no", e, new NodeLiteral(new TypeBoolean(), false));
				}
			},
			new Action() {	// [104] expression = expression.e1 TOKEN_LT expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeRel("lt", e1, e2);
				}
			},
			new Action() {	// [105] expression = expression.e1 TOKEN_LE expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeRel("le", e1, e2);
				}
			},
			new Action() {	// [106] expression = expression.e1 TOKEN_GT expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeRel("gt", e1, e2);
				}
			},
			new Action() {	// [107] expression = expression.e1 TOKEN_GE expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeRel("ge", e1, e2);
				}
			},
			new Action() {	// [108] expression = expression.e1 TOKEN_EQ expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeRel("eq", e1, e2);
				}
			},
			new Action() {	// [109] expression = expression.e1 TOKEN_NE expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final NodeExp e1 = (NodeExp) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final NodeExp e2 = (NodeExp) _symbol_e2.value;
					 return new NodeRel("ne", e1, e2);
				}
			},
			new Action() {	// [110] expression = TOKEN_LPAR expression.e TOKEN_RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final NodeExp e = (NodeExp) _symbol_e.value;
					 return e;
				}
			},
			Action.RETURN,	// [111] expression = procedure_expression
			Action.RETURN,	// [112] expression = variable_access
			Action.RETURN,	// [113] expression = literal
			new Action() {	// [114] literal = TOKEN_LIT_INTEGER.value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_value = _symbols[offset + 1];
					final Integer value = (Integer) _symbol_value.value;
					 return new NodeLiteral(new TypeInt(), value);
				}
			},
			new Action() {	// [115] literal = TOKEN_LIT_STRING.value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_value = _symbols[offset + 1];
					final String value = (String) _symbol_value.value;
					 return new NodeLiteral(new TypeString(), value);
				}
			},
			new Action() {	// [116] literal = TOKEN_TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NodeLiteral(new TypeBoolean(), true);
				}
			},
			new Action() {	// [117] literal = TOKEN_FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NodeLiteral(new TypeBoolean(), false);
				}
			},
			new Action() {	// [118] literal = TOKEN_NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NodeLiteral(new TypeVoid(), null);
				}
			}
		};

 
	report = new Events();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
