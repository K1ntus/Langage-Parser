


*************************************************
*** Fichier data/progr1.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.





Intermediate Code:
dst: NAME(a) - src: CONST:100
* MOVE(NAME(a),CONST:100)
dst: NAME(a) - src: BINOP(2,CONST:5,CONST:2)
* MOVE(NAME(a),BINOP(2,CONST:5,CONST:2))
dst: NAME(a) - src: BINOP(-1,NAME(a),CONST:1)
* MOVE(NAME(a),BINOP(-1,NAME(a),CONST:1))
dst: NAME(a) - src: CONST:100
dst: NAME(a) - src: BINOP(2,CONST:5,CONST:2)
dst: NAME(a) - src: BINOP(-1,NAME(a),CONST:1)
** SEQ(MOVE(NAME(a),CONST:100),SEQ(MOVE(NAME(a),BINOP(2,CONST:5,CONST:2)),SEQ(Label(L0),SEQ(CJUMP(13,NAME(a),CONST:0,L1,L2),SEQ(Label(L1),SEQ(SEQ(EXP(CALL(NAME(println),NAME(a))),MOVE(NAME(a),BINOP(-1,NAME(a),CONST:1))),SEQ(JUMP(NAME(L0),L0),Label(L2))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
- NodeOp well typed
- Assign well typed
--- CheckType NodeWhile
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr2.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// gestion des variables statiques
//
// 0x4995F6B5



Intermediate Code:
dst: NAME(x) - src: CONST:1234564789
* MOVE(NAME(x),CONST:1234564789)
dst: NAME(y) - src: CONST:2147483647
* MOVE(NAME(y),CONST:2147483647)
dst: NAME(b) - src: CONST:1
* MOVE(NAME(b),CONST:1)
dst: NAME(c) - src: CONST:-1
* MOVE(NAME(c),CONST:-1)
dst: MEM(BINOP(0,NAME(d),CONST:1)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(d),CONST:1)),CONST:-1)
dst: MEM(BINOP(0,NAME(d),CONST:2)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(d),CONST:2)),CONST:-1)
dst: MEM(BINOP(0,NAME(d),CONST:3)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(d),CONST:3)),CONST:-1)
dst: MEM(BINOP(0,NAME(d),CONST:10)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(d),CONST:10)),CONST:-1)
dst: NAME(x) - src: CONST:1234564789
dst: NAME(y) - src: CONST:2147483647
dst: NAME(b) - src: CONST:1
dst: NAME(c) - src: CONST:-1
dst: MEM(BINOP(0,NAME(d),CONST:1)) - src: CONST:-1
dst: MEM(BINOP(0,NAME(d),CONST:2)) - src: CONST:-1
dst: MEM(BINOP(0,NAME(d),CONST:3)) - src: CONST:-1
dst: MEM(BINOP(0,NAME(d),CONST:10)) - src: CONST:-1
** SEQ(MOVE(NAME(x),CONST:1234564789),SEQ(MOVE(NAME(y),CONST:2147483647),SEQ(MOVE(NAME(b),CONST:1),SEQ(MOVE(NAME(c),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:1)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:2)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:3)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:10)),CONST:-1),SEQ(EXP(CALL(NAME(println),NAME(x))),SEQ(EXP(CALL(NAME(println),NAME(y))),SEQ(EXP(CALL(NAME(println),NAME(b))),SEQ(EXP(CALL(NAME(println),NAME(c))),EXP(CALL(NAME(println),MEM(BINOP(0,NAME(d),CONST:2))))))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr3.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


// gestion des variables statiques
// gestion du tas et des pointeurs
// 
// 0x4995F6B5
// 0x41
// resize the heap
// heap memory error



Intermediate Code:
dst: NAME(x) - src: CONST:1234564789
* MOVE(NAME(x),CONST:1234564789)
dst: NAME(y) - src: CONST:2147483647
* MOVE(NAME(y),CONST:2147483647)
dst: NAME(b) - src: CONST:1
* MOVE(NAME(b),CONST:1)
dst: NAME(c) - src: CONST:-1
* MOVE(NAME(c),CONST:-1)
dst: MEM(BINOP(0,NAME(d),CONST:1)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(d),CONST:1)),CONST:-1)
dst: MEM(BINOP(0,NAME(d),CONST:2)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(d),CONST:2)),CONST:-1)
dst: MEM(BINOP(0,NAME(d),CONST:3)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(d),CONST:3)),CONST:-1)
dst: MEM(BINOP(0,NAME(d),CONST:10)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(d),CONST:10)),CONST:-1)
dst: MEM(NAME(q)) - src: CONST:-1
* MOVE(MEM(NAME(q)),CONST:-1)
dst: MEM(NAME(p)) - src: NAME(x)
* MOVE(MEM(NAME(p)),NAME(x))
dst: MEM(NAME(r)) - src: CONST:65536
* MOVE(MEM(NAME(r)),CONST:65536)
dst: NAME(x) - src: CONST:1234564789
dst: NAME(y) - src: CONST:2147483647
dst: NAME(b) - src: CONST:1
dst: NAME(c) - src: CONST:-1
dst: MEM(BINOP(0,NAME(d),CONST:1)) - src: CONST:-1
dst: MEM(BINOP(0,NAME(d),CONST:2)) - src: CONST:-1
dst: MEM(BINOP(0,NAME(d),CONST:3)) - src: CONST:-1
dst: MEM(BINOP(0,NAME(d),CONST:10)) - src: CONST:-1
dst: MEM(NAME(q)) - src: NAME(null)
dst: MEM(NAME(q)) - src: CONST:-1
dst: MEM(NAME(p)) - src: NAME(null)
dst: MEM(NAME(p)) - src: NAME(x)
dst: MEM(NAME(r)) - src: NAME(null)
dst: MEM(NAME(r)) - src: CONST:65536
dst: MEM(NAME(p)) - src: NAME(null)
** SEQ(MOVE(NAME(x),CONST:1234564789),SEQ(MOVE(NAME(y),CONST:2147483647),SEQ(MOVE(NAME(b),CONST:1),SEQ(MOVE(NAME(c),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:1)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:2)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:3)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(d),CONST:10)),CONST:-1),SEQ(EXP(CALL(NAME(println),NAME(x))),SEQ(EXP(CALL(NAME(println),NAME(y))),SEQ(EXP(CALL(NAME(println),NAME(b))),SEQ(EXP(CALL(NAME(println),NAME(c))),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,NAME(d),CONST:2)))),SEQ(MOVE(MEM(NAME(q)),NAME(null)),SEQ(MOVE(MEM(NAME(q)),CONST:-1),SEQ(EXP(CALL(NAME(println),MEM(NAME(q)))),SEQ(EXP(CALL(NAME(println),NAME(p))),SEQ(MOVE(MEM(NAME(p)),NAME(null)),SEQ(EXP(CALL(NAME(println),NAME(p))),SEQ(MOVE(MEM(NAME(p)),NAME(x)),SEQ(EXP(CALL(NAME(println),MEM(NAME(p)))),SEQ(MOVE(MEM(NAME(r)),NAME(null)),SEQ(MOVE(MEM(NAME(r)),CONST:65536),SEQ(EXP(CALL(NAME(println),MEM(NAME(r)))),SEQ(MOVE(MEM(NAME(p)),NAME(null)),SEQ(EXP(CALL(NAME(println),NAME(p))),EXP(CALL(NAME(println),MEM(NAME(p))))))))))))))))))))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeNew
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeNew
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeId
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeNew
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeDispose
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr4.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// Structure de contr√¥le
//
//



Intermediate Code:
dst: NAME(x) - src: CONST:1
* MOVE(NAME(x),CONST:1)
dst: NAME(y) - src: CONST:1
* MOVE(NAME(y),CONST:1)
dst: NAME(y) - src: BINOP(1,NAME(y),CONST:1)
* MOVE(NAME(y),BINOP(1,NAME(y),CONST:1))
dst: NAME(x) - src: BINOP(1,NAME(x),CONST:1)
* MOVE(NAME(x),BINOP(1,NAME(x),CONST:1))
dst: NAME(x) - src: CONST:1
dst: NAME(y) - src: CONST:1
dst: NAME(y) - src: BINOP(1,NAME(y),CONST:1)
dst: NAME(x) - src: BINOP(1,NAME(x),CONST:1)
** SEQ(MOVE(NAME(x),CONST:1),SEQ(Label(L3),SEQ(CJUMP(11,NAME(x),CONST:10,L4,L5),SEQ(Label(L4),SEQ(SEQ(EXP(CALL(NAME(println),NAME(x))),SEQ(SEQ(CJUMP(14,NAME(x),NAME(x),L6,L7),SEQ(Label(L6),SEQ(SEQ(MOVE(NAME(y),CONST:1),SEQ(Label(L8),SEQ(CJUMP(11,NAME(y),CONST:5,L9,L10),SEQ(Label(L9),SEQ(SEQ(EXP(CALL(NAME(println),BINOP(-1,BINOP(2,CONST:1000,CONST:-1),NAME(y)))),MOVE(NAME(y),BINOP(1,NAME(y),CONST:1))),SEQ(JUMP(NAME(L8),L8),Label(L10))))))),SEQ(Label(L7),EXP(CALL(NAME(println),CONST:-1)))))),MOVE(NAME(x),BINOP(1,NAME(x),CONST:1)))),SEQ(JUMP(NAME(L3),L3),Label(L5)))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeWhile
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr5.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


** Enregistre fct:sum
dst: EXP(t0) - src: BINOP(1,NAME(i),NAME(j))
** SEQ(Label(L11),MOVE(EXP(t0),BINOP(1,NAME(i),NAME(j))))
** Enregistre fct:pgcd
dst: NAME(i) - src: CONST:0
* MOVE(NAME(i),CONST:0)
dst: NAME(i) - src: BINOP(-1,NAME(i),NAME(j))
* MOVE(NAME(i),BINOP(-1,NAME(i),NAME(j)))
dst: NAME(j) - src: BINOP(-1,NAME(j),NAME(i))
* MOVE(NAME(j),BINOP(-1,NAME(j),NAME(i)))
dst: NAME(i) - src: CONST:0
dst: NAME(i) - src: BINOP(-1,NAME(i),NAME(j))
dst: NAME(j) - src: BINOP(-1,NAME(j),NAME(i))
dst: EXP(t1) - src: NAME(i)
** SEQ(Label(L12),SEQ(SEQ(Label(L13),SEQ(CJUMP(15,NAME(i),NAME(j),L14,L15),SEQ(Label(L14),SEQ(MOVE(NAME(i),CONST:0),SEQ(JUMP(NAME(L13),L13),Label(L15)))))),SEQ(SEQ(CJUMP(12,NAME(i),NAME(i),L16,L17),SEQ(Label(L16),SEQ(MOVE(NAME(i),BINOP(-1,NAME(i),NAME(j))),SEQ(Label(L17),MOVE(NAME(j),BINOP(-1,NAME(j),NAME(i))))))),MOVE(EXP(t1),NAME(i)))))
//println(pgcd(78, 90));



Intermediate Code:
dst: NAME(x) - src: CONST:5
* MOVE(NAME(x),CONST:5)
dst: NAME(x) - src: CALL(NAME(sum),CONST:3CONST:5)
* MOVE(NAME(x),CALL(NAME(sum),CONST:3CONST:5))
dst: NAME(x) - src: CONST:5
dst: NAME(x) - src: CALL(NAME(sum),CONST:3CONST:5)
** SEQ(MOVE(NAME(x),CONST:5),SEQ(MOVE(NAME(x),CALL(NAME(sum),CONST:3CONST:5)),EXP(CALL(NAME(println),CALL(NAME(sum),CONST:3CONST:5)))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr6.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// gestion complexe de la pile
// 
** Enregistre fct:fact1
dst: EXP(t2) - src: CONST:1
dst: EXP(t3) - src: BINOP(2,NAME(k),CALL(NAME(fact1),BINOP(-1,NAME(k),CONST:1)))
** SEQ(Label(L18),SEQ(CJUMP(14,NAME(k),NAME(k),L19,L20),SEQ(Label(L19),SEQ(MOVE(EXP(t2),CONST:1),SEQ(Label(L20),MOVE(EXP(t3),BINOP(2,NAME(k),CALL(NAME(fact1),BINOP(-1,NAME(k),CONST:1)))))))))
** Enregistre fct:fact2
dst: EXP(t4) - src: CONST:1
dst: EXP(t5) - src: BINOP(2,CALL(NAME(fact2),BINOP(-1,NAME(k),CONST:1)),NAME(k))
** SEQ(Label(L21),SEQ(CJUMP(14,NAME(k),NAME(k),L22,L23),SEQ(Label(L22),SEQ(MOVE(EXP(t4),CONST:1),SEQ(Label(L23),MOVE(EXP(t5),BINOP(2,CALL(NAME(fact2),BINOP(-1,NAME(k),CONST:1)),NAME(k))))))))
** Enregistre fct:hanoi
** SEQ(Label(L24),SEQ(SEQ(CJUMP(12,NAME(k),NAME(k),L25,L26),SEQ(Label(L25),SEQ(EXP(CALL(NAME(hanoi),NAME(a)NAME(c)NAME(b)BINOP(-1,NAME(k),CONST:1))),Label(L26)))),SEQ(EXP(CALL(NAME(println),NAME(a))),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(EXP(CALL(NAME(println),NAME(c))),SEQ(CJUMP(12,NAME(k),NAME(k),L27,L28),SEQ(Label(L27),SEQ(EXP(CALL(NAME(hanoi),NAME(b)NAME(a)NAME(c)BINOP(-1,NAME(k),CONST:1))),Label(L28)))))))))
** Enregistre fct:impair
** Enregistre fct:pair
dst: NAME(b) - src: CONST:0
* MOVE(NAME(b),CONST:0)
dst: NAME(b) - src: CONST:1
* MOVE(NAME(b),CONST:1)
dst: NAME(b) - src: CALL(NAME(impair),BINOP(-1,NAME(i),CONST:1))
* MOVE(NAME(b),CALL(NAME(impair),BINOP(-1,NAME(i),CONST:1)))
dst: NAME(b) - src: CONST:0
dst: NAME(b) - src: CONST:1
dst: NAME(b) - src: CALL(NAME(impair),BINOP(-1,NAME(i),CONST:1))
dst: EXP(t6) - src: NAME(b)
** SEQ(Label(L29),SEQ(SEQ(CJUMP(14,NAME(i),NAME(i),L30,L31),SEQ(Label(L30),SEQ(MOVE(NAME(b),CONST:0),SEQ(Label(L31),SEQ(CJUMP(14,NAME(i),NAME(i),L32,L33),SEQ(Label(L32),SEQ(MOVE(NAME(b),CONST:1),SEQ(Label(L33),MOVE(NAME(b),CALL(NAME(impair),BINOP(-1,NAME(i),CONST:1))))))))))),MOVE(EXP(t6),NAME(b))))
** Enregistre fct:impair
dst: EXP(t7) - src: CONST:1
dst: EXP(t8) - src: CONST:0
dst: EXP(t9) - src: CALL(NAME(pair),BINOP(-1,NAME(i),CONST:1))
** SEQ(Label(L34),SEQ(CJUMP(14,NAME(i),NAME(i),L35,L36),SEQ(Label(L35),SEQ(MOVE(EXP(t7),CONST:1),SEQ(Label(L36),SEQ(CJUMP(14,NAME(i),NAME(i),L37,L38),SEQ(Label(L37),SEQ(MOVE(EXP(t8),CONST:0),SEQ(Label(L38),MOVE(EXP(t9),CALL(NAME(pair),BINOP(-1,NAME(i),CONST:1))))))))))))



Intermediate Code:
** SEQ(EXP(CALL(NAME(println),CALL(NAME(fact1),CONST:6))),SEQ(EXP(CALL(NAME(println),CALL(NAME(fact2),CONST:6))),SEQ(EXP(CALL(NAME(hanoi),CONST:-1CONST:-1CONST:-1CONST:4)),SEQ(EXP(CALL(NAME(println),CALL(NAME(pair),CONST:1001))),EXP(CALL(NAME(println),CALL(NAME(pair),CONST:1000)))))))
--- CheckType NodeList
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr7.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// tableaux
// 



Intermediate Code:
dst: MEM(BINOP(0,NAME(week),CONST:0)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(week),CONST:0)),CONST:-1)
dst: MEM(BINOP(0,NAME(week),CONST:1)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(week),CONST:1)),CONST:-1)
dst: MEM(BINOP(0,NAME(week),CONST:2)) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(week),CONST:2)),CONST:-1)
dst: MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:2)),CONST:17)),CONST:3)) - src: CONST:-1
* MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:2)),CONST:17)),CONST:3)),CONST:-1)
dst: MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:4)),CONST:22)),CONST:7)) - src: CONST:-1
* MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:4)),CONST:22)),CONST:7)),CONST:-1)
dst: MEM(BINOP(0,NAME(week),CONST:0)) - src: CONST:-1
dst: MEM(BINOP(0,NAME(week),CONST:1)) - src: CONST:-1
dst: MEM(BINOP(0,NAME(week),CONST:2)) - src: CONST:-1
dst: MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:2)),CONST:17)),CONST:3)) - src: CONST:-1
dst: MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:4)),CONST:22)),CONST:7)) - src: CONST:-1
** SEQ(MOVE(MEM(BINOP(0,NAME(week),CONST:0)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(week),CONST:1)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(week),CONST:2)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:2)),CONST:17)),CONST:3)),CONST:-1),SEQ(MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:4)),CONST:22)),CONST:7)),CONST:-1),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:2)),CONST:17)),CONST:3)))),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),CONST:2)),CONST:17)),CONST:4)))),EXP(CALL(NAME(println),MEM(BINOP(0,NAME(week),CONST:1)))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr8.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// tableaux et enum√©r√©s
// 
** Enregistre types: (TypeItemEnum@SUNDAY=0, TypeItemEnum@MONDAY=1, TypeItemEnum@TUESDAY=2, TypeItemEnum@WEDNESDAY=3, TypeItemEnum@THURSDAY=4, TypeItemEnum@FRIDAY=5, TypeItemEnum@SATURDAY=6)
** Enregistre types: (TypeItemEnum@JANUARY=0, TypeItemEnum@FEBRUARY=1, TypeItemEnum@MARCH=2, TypeItemEnum@APRIL=3, TypeItemEnum@MAY=4, TypeItemEnum@JUNE=5, TypeItemEnum@JULY=6, TypeItemEnum@AUGUST=7, TypeItemEnum@SEPTEMBER=8, TypeItemEnum@OCTOBER=9, TypeItemEnum@NOVEMBER=10, TypeItemEnum@DECEMBER=11)



Intermediate Code:
dst: MEM(BINOP(0,NAME(week),NAME(MONDAY))) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(week),NAME(MONDAY))),CONST:-1)
dst: MEM(BINOP(0,NAME(week),NAME(TUESDAY))) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(week),NAME(TUESDAY))),CONST:-1)
dst: MEM(BINOP(0,NAME(week),NAME(WEDNESDAY))) - src: CONST:-1
* MOVE(MEM(BINOP(0,NAME(week),NAME(WEDNESDAY))),CONST:-1)
dst: MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:17)),NAME(MARCH))) - src: CONST:-1
* MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:17)),NAME(MARCH))),CONST:-1)
dst: MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:1)),NAME(MARCH))) - src: CONST:-1
* MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:1)),NAME(MARCH))),CONST:-1)
dst: MEM(BINOP(0,NAME(week),NAME(MONDAY))) - src: CONST:-1
dst: MEM(BINOP(0,NAME(week),NAME(TUESDAY))) - src: CONST:-1
dst: MEM(BINOP(0,NAME(week),NAME(WEDNESDAY))) - src: CONST:-1
dst: MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:17)),NAME(MARCH))) - src: CONST:-1
dst: MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:1)),NAME(MARCH))) - src: CONST:-1
** SEQ(MOVE(MEM(BINOP(0,NAME(week),NAME(MONDAY))),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(week),NAME(TUESDAY))),CONST:-1),SEQ(MOVE(MEM(BINOP(0,NAME(week),NAME(WEDNESDAY))),CONST:-1),SEQ(MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:17)),NAME(MARCH))),CONST:-1),SEQ(MOVE(MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:1)),NAME(MARCH))),CONST:-1),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:1)),NAME(MARCH))))),SEQ(EXP(CALL(NAME(println),MEM(BINOP(0,MEM(BINOP(0,MEM(BINOP(0,NAME(year),NAME(SATURDAY))),CONST:17)),NAME(MARCH))))),EXP(CALL(NAME(println),MEM(BINOP(0,NAME(week),NAME(TUESDAY))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct



*************************************************
*** Fichier data/progr9.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


$$ **************************************************
 ************************************************** $$
$$$
Type declaration part
$$$
** Enregistre types: TypeString
** Enregistre types: TypeInt_null
** Enregistre types: TypeBoolean
** Retrouve types: chaine TypeString
///named2 = unknown; // error		//UnknownType
$$$ Enum $$$
** Enregistre types: TypeString
** Enregistre types: (TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)
///xxx = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, aa, ab, ac, ad, ae, af, ag, ah); // error
** Enregistre types: (TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6)
** Enregistre types: TypeArrayRange[TypeInt_64..TypeInt_81]
$$ 
Cas
D'erreur
$$
///range3 = 81 .. 64; //error			//InvalidType
///range4 = Friday .. Unknown; // error	//NoSuchField
///range5 = Friday .. Monday; // error	//InvalidType@subrange_type
** Enregistre types: TypeArrayRange[TypeInt_1..TypeInt_5]
///range7 = Friday .. Tuesday; // error "range not valid" //InvalidType@subrange_type
///range8 = Monday .. April; // error "incoherent range" //A GERER
$$$ Array $$$
** Enregistre types: TypeArrayRange[TypeInt_1..TypeInt_11]
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeInt_null)
** Retrouve types: range1 TypeArrayRange[TypeInt_64..TypeInt_81]
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_64..TypeInt_81], TypeInt_null)
** Retrouve types: range2 TypeArrayRange[TypeInt_1..TypeInt_5]
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeInt_null)
** Retrouve types: DaysOfWeek (TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6)
$$ 
Cas
D'erreur
$$
// UNKNWOWN TYPE
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeArray((TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6), TypeInt_null))
[UnknownType] type: range3 has not been defined
// error "Range type expected"
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeArray(TypeNamed_range3, TypeInt_null))
$$$ Pointers $$$
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeArray(TypeArrayRange[TypeInt_3..TypeInt_6], TypeInt_null))
** Enregistre types: TypePointer(TypeInt_null)
** Retrouve types: DaysOfWeek (TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6)
$$$
Variable declaration part
$$$
** Enregistre types: TypePointer(TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeArray((TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6), TypeInt_null)))
///x : boolean; // error "Variable x yet declared" // RedefinitionVariable
** Retrouve types: range2 TypeArrayRange[TypeInt_1..TypeInt_5]
** Retrouve types: range2 TypeArrayRange[TypeInt_1..TypeInt_5]
** Retrouve types: ptr1 TypePointer(TypeInt_null)
** Retrouve types: Months (TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)
** Retrouve types: range1 TypeArrayRange[TypeInt_64..TypeInt_81]
** Retrouve types: range2 TypeArrayRange[TypeInt_1..TypeInt_5]
** Retrouve types: Months (TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)
** Enregistre fct:goo
///function goo(i : integer, j : integer) : boolean;//RedefinitionFunctionPrototype //error "procedure or function declared twice"
** Enregistre fct:foo
///result^ = hoo(i, j); // error "function not declared" //NoSuchFieldException
dst: MEM(NAME(result)) - src: CALL(NAME(goo),NAME(i)NAME(j))
* MOVE(MEM(NAME(result)),CALL(NAME(goo),NAME(i)NAME(j)))
dst: MEM(NAME(result)) - src: NAME(null)
dst: MEM(NAME(result)) - src: CALL(NAME(goo),NAME(i)NAME(j))
dst: EXP(t10) - src: NAME(result)
** SEQ(Label(L39),SEQ(MOVE(MEM(NAME(result)),NAME(null)),SEQ(MOVE(MEM(NAME(result)),CALL(NAME(goo),NAME(i)NAME(j))),MOVE(EXP(t10),NAME(result)))))
** Enregistre fct:goo
///function goo(i : integer, j : integer) : boolean begin return false; end //RedefinitionFunction // error "function already defined"
dst: EXP(t11) - src: BINOP(1,NAME(i),NAME(j))
** SEQ(Label(L40),MOVE(EXP(t11),BINOP(1,NAME(i),NAME(j))))
///b = 2; // error "Type error in affectation"
///l = m2; // error "Type error in affectation" //m2 range 4, l range 5
//b = foo(3); // error "Type error in calling expression"			//PAS GERE Checktype invalid
//b = foo(3, false); // error "Type error in calling expression"	//PAS GERE Checktype invalid
//x = foo(3, 7); // error "Type error in calling expression"		//PAS GERE Checktype invalid
//z2 [ Thursday ] = 36; // error "Type error in array access "		//PAS GERE
//IL Y AVAIT UN CRASH ICI RIP
///y = z [ false ]; // error "Type error in array access" 		// InvalidArrayAccess
///y = z [ 4 ]; // error "Type error in affectation"			// HANDLED
///b = z [ 4 ]; // error "Type error in affectation"			// HANDLED
///z = k [ 4 ]; // error "Type error in affectation"			// HANDLED
///b = z2 [ Thursday ]; // error "Type error in affectation"	// HANDLED
///z2 = 36; 													// Accessible variable expected
//readln y;
Size is : 13
///b = !(2 < false) && (x == 1) && (p == null); // // error "Type error in comparison"
///b = !(2 < x) && (x == 1) && p ; // // error "Type error in logical expression"
///b = !(2 < x) && (x == 1 + false) && p ; // // error "Type error in arithmetic expression"
//p = 0; // error "Type error in affectation" //InvalidAffectation OK
//new x; // error "Type error in pointer access expression" //InvalidPointerAccess OK
///p^ = false;		//INVALID AFFECTATION OK
///x^ = null; // error "Type error in pointer access expression"
///dispose x;  // error "Type error in pointer access expression" //InvalidPointerAccess



Intermediate Code:
dst: NAME(b) - src: CONST:0
* MOVE(NAME(b),CONST:0)
dst: NAME(l) - src: NAME(l)
* MOVE(NAME(l),NAME(l))
dst: NAME(b) - src: MEM(CALL(NAME(foo),CONST:3CONST:7))
* MOVE(NAME(b),MEM(CALL(NAME(foo),CONST:3CONST:7)))
dst: NAME(b) - src: CALL(NAME(goo),CONST:3CONST:7)
* MOVE(NAME(b),CALL(NAME(goo),CONST:3CONST:7))
dst: MEM(BINOP(0,NAME(z2),CONST:1)) - src: CONST:36
* MOVE(MEM(BINOP(0,NAME(z2),CONST:1)),CONST:36)
dst: NAME(x) - src: MEM(BINOP(0,NAME(z2),CONST:1))
* MOVE(NAME(x),MEM(BINOP(0,NAME(z2),CONST:1)))
dst: NAME(b) - src: CALL(NAME(goo),MEM(BINOP(0,NAME(z2),CONST:1))CONST:1)
* MOVE(NAME(b),CALL(NAME(goo),MEM(BINOP(0,NAME(z2),CONST:1))CONST:1))
dst: NAME(x) - src: CONST:1
* MOVE(NAME(x),CONST:1)
dst: NAME(x) - src: CONST:1
* MOVE(NAME(x),CONST:1)
dst: NAME(x) - src: CONST:2
* MOVE(NAME(x),CONST:2)
dst: NAME(x) - src: CONST:1
* MOVE(NAME(x),CONST:1)
dst: NAME(x) - src: CONST:1
* MOVE(NAME(x),CONST:1)
dst: NAME(x) - src: CONST:1
* MOVE(NAME(x),CONST:1)
dst: NAME(x) - src: CONST:2
* MOVE(NAME(x),CONST:2)
dst: NAME(y) - src: CONST:2
* MOVE(NAME(y),CONST:2)
dst: NAME(x) - src: BINOP(2,BINOP(-2,BINOP(1,CONST:36,CONST:45),CONST:7),CONST:-1)
* MOVE(NAME(x),BINOP(2,BINOP(-2,BINOP(1,CONST:36,CONST:45),CONST:7),CONST:-1))
dst: NAME(p) - src: null
* MOVE(NAME(p),null)
dst: MEM(NAME(p)) - src: CONST:36
* MOVE(MEM(NAME(p)),CONST:36)
dst: NAME(x) - src: MEM(NAME(p))
* MOVE(NAME(x),MEM(NAME(p)))
dst: NAME(b) - src: CONST:0
dst: NAME(l) - src: NAME(l)
dst: NAME(b) - src: MEM(CALL(NAME(foo),CONST:3CONST:7))
dst: NAME(b) - src: CALL(NAME(goo),CONST:3CONST:7)
dst: MEM(BINOP(0,NAME(z2),CONST:1)) - src: CONST:36
dst: NAME(x) - src: MEM(BINOP(0,NAME(z2),CONST:1))
dst: NAME(b) - src: CALL(NAME(goo),MEM(BINOP(0,NAME(z2),CONST:1))CONST:1)
dst: NAME(x) - src: CONST:1
dst: NAME(x) - src: CONST:1
dst: NAME(x) - src: CONST:2
dst: NAME(x) - src: CONST:1
dst: NAME(x) - src: CONST:1
dst: NAME(x) - src: CONST:1
dst: NAME(x) - src: CONST:2
dst: NAME(y) - src: CONST:2
dst: NAME(x) - src: BINOP(2,BINOP(-2,BINOP(1,CONST:36,CONST:45),CONST:7),CONST:-1)
dst: NAME(p) - src: null
dst: MEM(NAME(p)) - src: NAME(null)
dst: MEM(NAME(p)) - src: CONST:36
dst: NAME(x) - src: MEM(NAME(p))
dst: MEM(NAME(p)) - src: NAME(null)
** SEQ(MOVE(NAME(b),CONST:0),SEQ(MOVE(NAME(l),NAME(l)),SEQ(MOVE(NAME(b),MEM(CALL(NAME(foo),CONST:3CONST:7))),SEQ(MOVE(NAME(b),CALL(NAME(goo),CONST:3CONST:7)),SEQ(MOVE(MEM(BINOP(0,NAME(z2),CONST:1)),CONST:36),SEQ(MOVE(NAME(x),MEM(BINOP(0,NAME(z2),CONST:1))),SEQ(MOVE(NAME(b),CALL(NAME(goo),MEM(BINOP(0,NAME(z2),CONST:1))CONST:1)),SEQ(SEQ(CJUMP(14,MEM(BINOP(0,NAME(l),NAME(Monday))),CONST:1,L41,L42),SEQ(Label(L41),SEQ(MOVE(NAME(x),CONST:1),Label(L42)))),SEQ(SEQ(CJUMP(14,MEM(BINOP(0,NAME(l),NAME(Monday))),CONST:1,L43,L44),SEQ(Label(L43),SEQ(MOVE(NAME(x),CONST:1),SEQ(Label(L44),MOVE(NAME(x),CONST:2))))),SEQ(SEQ(CJUMP(14,MEM(BINOP(0,NAME(z2),CONST:7)),CONST:1,L45,L46),SEQ(Label(L45),SEQ(MOVE(NAME(x),CONST:1),Label(L46)))),SEQ(SEQ(Label(L47),SEQ(CJUMP(14,MEM(BINOP(0,NAME(z2),CONST:7)),CONST:1,L48,L49),SEQ(Label(L48),SEQ(MOVE(NAME(x),CONST:1),SEQ(JUMP(NAME(L47),L47),Label(L49)))))),SEQ(SEQ(Label(L50),SEQ(CJUMP(14,MEM(BINOP(0,NAME(z2),CONST:7)),CONST:1,L51,L52),SEQ(Label(L51),SEQ(SEQ(SEQ(CJUMP(14,MEM(BINOP(0,NAME(l),NAME(Monday))),CONST:1,L53,L54),SEQ(Label(L53),SEQ(MOVE(NAME(x),CONST:1),SEQ(Label(L54),MOVE(NAME(x),CONST:2))))),SEQ(EXP(CALL(NAME(println),NAME(x))),MOVE(NAME(y),CONST:2))),SEQ(JUMP(NAME(L50),L50),Label(L52)))))),SEQ(SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L56,L57),SEQ(Label(L56),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L57))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L58,L59),SEQ(Label(L58),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L59))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L60,L61),SEQ(Label(L60),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L61))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L62,L63),SEQ(Label(L62),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L63))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L64,L65),SEQ(Label(L64),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L65))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L66,L67),SEQ(Label(L66),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L67))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L68,L69),SEQ(Label(L68),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L69))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L70,L71),SEQ(Label(L70),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L71))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L72,L73),SEQ(Label(L72),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L73))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L74,L75),SEQ(Label(L74),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L75))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L76,L77),SEQ(Label(L76),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L77))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L78,L79),SEQ(Label(L78),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L79))))),SEQ(SEQ(CJUMP(-1,NAME(month),NAME(month),L80,L81),SEQ(Label(L80),SEQ(EXP(CALL(NAME(println),CONST:-1)),SEQ(JUMP(NAME(L55),L55),Label(L81))))),Label(L55)))))))))))))),SEQ(MOVE(NAME(x),BINOP(2,BINOP(-2,BINOP(1,CONST:36,CONST:45),CONST:7),CONST:-1)),SEQ(MOVE(NAME(p),null),SEQ(MOVE(MEM(NAME(p)),NAME(null)),SEQ(MOVE(MEM(NAME(p)),CONST:36),SEQ(MOVE(NAME(x),MEM(NAME(p))),MOVE(MEM(NAME(p)),NAME(null))))))))))))))))))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeId
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodePtrAccess
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- NodeCallFct well typed
- Assign well typed
--- CheckType NodeIf
--- CheckType NodeIf
--- CheckType NodeIf
--- CheckType NodeWhile
--- CheckType NodeWhile
--- CheckType NodeSwitch
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
- NodeOp well typed
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeNew
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodePtrAccess
- Assign well typed
--- CheckType NodeDispose
- NodeList well typed
*** Typage correct
