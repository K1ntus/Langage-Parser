


*************************************************
*** Fichier data/progr1.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


*** var
*** a
*** :
*** integer
*** ;
*** begin
* Enregistre a
*** a
*** =
[STACK] Variable: a found at Layer: 2
*** 100
*** ;
*** while
*** (
*** a
*** >=
[STACK] Variable: a found at Layer: 2
*** 0
*** )
*** do
*** begin
*** println
*** (
*** a
*** )
[STACK] Variable: a found at Layer: 3
*** ;
*** a
*** =
[STACK] Variable: a found at Layer: 3
*** a
*** -
[STACK] Variable: a found at Layer: 3
*** 1
*** ;
*** end
*** end

code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
Code intermediaire while
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
code intermediaire assign
code intermediaire ID
class ubordeaux.deptinfo.compilation.project.node.NodeLiteral
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeWhile
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#a:TypeInt_null#, NodeLiteral#100:TypeInt_null#), NodeWhile(NodeRel(NodeId#a:TypeInt_null#, NodeLiteral#0:TypeInt_null#), NodeList(println_NodeCallFct(NodeList(NodeId#a:TypeInt_null#)), NodeAssign(NodeId#a:TypeInt_null#, NodeOp(NodeId#a:TypeInt_null#, NodeLiteral#1:TypeInt_null#)))))



*************************************************
*** Fichier data/progr2.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// gestion des variables statiques
//
*** var
*** x
*** ,
*** y
*** :
*** integer
*** ;
*** b
* Enregistre x
* Enregistre y
*** :
*** boolean
*** ;
*** c
* Enregistre b
*** :
*** string
*** ;
*** d
* Enregistre c
*** :
*** array
*** [
*** 1
*** ..
*** 10
*** ]
*** of
*** string
*** ;
*** begin
* Enregistre d
*** x
*** =
[STACK] Variable: x found at Layer: 2
*** 1234564789
*** ;
// 0x4995F6B5
*** y
*** =
[STACK] Variable: y found at Layer: 2
*** 0x7FFFFFFF
*** ;
*** b
*** =
[STACK] Variable: b found at Layer: 2
*** true
*** ;
*** c
*** =
[STACK] Variable: c found at Layer: 2
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 1
*** ]
*** =
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 2
*** ]
*** =
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 3
*** ]
*** =
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 10
*** ]
*** =
*** ;
*** println
*** (
*** x
*** +
[STACK] Variable: x found at Layer: 2
*** 5
*** )
*** ;
*** println
*** y
*** ;
[STACK] Variable: y found at Layer: 2
*** println
*** b
*** ;
[STACK] Variable: b found at Layer: 2
*** println
*** c
*** ;
[STACK] Variable: c found at Layer: 2
*** println
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 2
*** ]
*** ;
*** end

code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeOp
- NodeOp well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1234564789:TypeInt_null#), NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#2147483647:TypeInt_null#), NodeAssign(NodeId#b:TypeBoolean#, NodeLiteral#true:TypeBoolean#), NodeAssign(NodeId#c:TypeString#, NodeLiteral#"a":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#1:TypeInt_null#), NodeLiteral#"A":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#), NodeLiteral#"B":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#3:TypeInt_null#), NodeLiteral#"C":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#10:TypeInt_null#), NodeLiteral#"Z":TypeString#), println_NodeCallFct(NodeList(NodeOp(NodeId#x:TypeInt_null#, NodeLiteral#5:TypeInt_null#))), println_NodeCallFct(NodeList(NodeId#y:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#b:TypeBoolean#)), println_NodeCallFct(NodeList(NodeId#c:TypeString#)), println_NodeCallFct(NodeList(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#))))



*************************************************
*** Fichier data/progr3.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


// gestion des variables statiques
// gestion du tas et des pointeurs
// 
*** var
*** x
*** :
*** integer
*** ;
*** y
* Enregistre x
*** :
*** integer
*** ;
*** b
* Enregistre y
*** :
*** boolean
*** ;
*** c
* Enregistre b
*** :
*** string
*** ;
*** d
* Enregistre c
*** :
*** array
*** [
*** 1
*** ..
*** 10
*** ]
*** of
*** string
*** ;
*** p
* Enregistre d
*** :
*** ^
*** integer
*** ;
*** q
* Enregistre p
*** :
*** ^
*** string
*** ;
*** r
* Enregistre q
*** :
*** ^
*** integer
*** ;
*** begin
* Enregistre r
*** x
*** =
[STACK] Variable: x found at Layer: 2
*** 1234564789
*** ;
// 0x4995F6B5
*** y
*** =
[STACK] Variable: y found at Layer: 2
*** 0x7FFFFFFF
*** ;
*** b
*** =
[STACK] Variable: b found at Layer: 2
*** true
*** ;
*** c
*** =
[STACK] Variable: c found at Layer: 2
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 1
*** ]
*** =
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 2
*** ]
*** =
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 3
*** ]
*** =
*** ;
*** d
*** [
[STACK] Variable: d found at Layer: 2
*** 10
*** ]
*** =
*** ;
*** println
*** (
*** x
*** )
[STACK] Variable: x found at Layer: 2
*** ;
*** println
*** (
*** y
*** )
[STACK] Variable: y found at Layer: 2
*** ;
*** println
*** (
*** b
*** )
[STACK] Variable: b found at Layer: 2
*** ;
*** println
*** (
*** c
*** )
[STACK] Variable: c found at Layer: 2
*** ;
//println (d[2]);
*** new
*** q
*** ;
[STACK] Variable: q found at Layer: 2
*** q
*** ^
[STACK] Variable: q found at Layer: 2
*** =
*** ;
// 0x41
*** println
*** q
*** ^
[STACK] Variable: q found at Layer: 2
*** ;
*** println
*** p
*** ;
[STACK] Variable: p found at Layer: 2
*** new
*** p
*** ;
[STACK] Variable: p found at Layer: 2
*** println
*** p
*** ;
[STACK] Variable: p found at Layer: 2
*** p
*** ^
[STACK] Variable: p found at Layer: 2
*** =
*** x
*** ;
[STACK] Variable: x found at Layer: 2
*** println
*** p
*** ^
[STACK] Variable: p found at Layer: 2
*** ;
*** new
*** r
*** ;
[STACK] Variable: r found at Layer: 2
// resize the heap
*** r
*** ^
[STACK] Variable: r found at Layer: 2
*** =
*** 65536
*** ;
*** println
*** (
*** r
*** ^
[STACK] Variable: r found at Layer: 2
*** )
*** ;
*** dispose
*** p
*** ;
[STACK] Variable: p found at Layer: 2
*** println
*** (
*** p
*** )
[STACK] Variable: p found at Layer: 2
*** ;
*** println
*** (
*** p
*** ^
[STACK] Variable: p found at Layer: 2
*** )
*** ;
// heap memory error
*** end

code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeNew
code intermediaire assign
TODO: NodePtrAccess.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeNew
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
code intermediaire assign
TODO: NodePtrAccess.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeNew
code intermediaire assign
TODO: NodePtrAccess.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeDispose
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeNew
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeNew
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeId
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeNew
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
--- CheckType NodeDispose
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodePtrAccess
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1234564789:TypeInt_null#), NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#2147483647:TypeInt_null#), NodeAssign(NodeId#b:TypeBoolean#, NodeLiteral#true:TypeBoolean#), NodeAssign(NodeId#c:TypeString#, NodeLiteral#"a":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#1:TypeInt_null#), NodeLiteral#"A":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_null#), NodeLiteral#"B":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#3:TypeInt_null#), NodeLiteral#"C":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#10:TypeInt_null#), NodeLiteral#"Z":TypeString#), println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#y:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#b:TypeBoolean#)), println_NodeCallFct(NodeList(NodeId#c:TypeString#)), NodeNew(NodeId#q:TypePointer(TypeString)#), NodeAssign(NodePtrAccess(NodeId#q:TypePointer(TypeString)#), NodeLiteral#"A":TypeString#), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#q:TypePointer(TypeString)#))), println_NodeCallFct(NodeList(NodeId#p:TypePointer(TypeInt_null)#)), NodeNew(NodeId#p:TypePointer(TypeInt_null)#), println_NodeCallFct(NodeList(NodeId#p:TypePointer(TypeInt_null)#)), NodeAssign(NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#), NodeId#x:TypeInt_null#), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#))), NodeNew(NodeId#r:TypePointer(TypeInt_null)#), NodeAssign(NodePtrAccess(NodeId#r:TypePointer(TypeInt_null)#), NodeLiteral#65536:TypeInt_null#), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#r:TypePointer(TypeInt_null)#))), NodeDispose(NodeId#p:TypePointer(TypeInt_null)#), println_NodeCallFct(NodeList(NodeId#p:TypePointer(TypeInt_null)#)), println_NodeCallFct(NodeList(NodePtrAccess(NodeId#p:TypePointer(TypeInt_null)#))))



*************************************************
*** Fichier data/progr4.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// Structure de contrôle
//
//
*** var
*** x
*** ,
*** y
*** :
*** integer
*** ;
*** begin
* Enregistre x
* Enregistre y
*** x
*** =
[STACK] Variable: x found at Layer: 2
*** 1
*** ;
*** while
*** (
*** x
*** <=
[STACK] Variable: x found at Layer: 2
*** 10
*** )
*** do
*** begin
*** println
*** (
*** x
*** )
[STACK] Variable: x found at Layer: 3
*** ;
*** if
*** (
*** x
*** ==
[STACK] Variable: x found at Layer: 3
*** 10
*** )
*** then
*** begin
*** y
*** =
[STACK] Variable: y found at Layer: 4
*** 1
*** ;
*** while
*** (
*** y
*** <=
[STACK] Variable: y found at Layer: 4
*** 5
*** )
*** do
*** begin
*** println
*** (
*** -
*** 1000
*** -
*** y
*** )
[STACK] Variable: y found at Layer: 5
*** ;
*** y
*** =
[STACK] Variable: y found at Layer: 5
*** y
*** +
[STACK] Variable: y found at Layer: 5
*** 1
*** ;
*** end
*** else
*** Erreur de syntaxe en ligne 0, colonne 18. Token inattendu: TOKEN_ELSE
*** println
*** (
0,18-0,6: Recovered: removed unexpected token #54
*** )
*** ;
*** x
*** =
[STACK] Variable: x found at Layer: 4
*** x
*** +
[STACK] Variable: x found at Layer: 4
*** 1
*** ;
*** end
*** end
*** end

code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
Code intermediaire while
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeIf
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeWhile
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_null#), NodeWhile(NodeRel(NodeId#x:TypeInt_null#, NodeLiteral#10:TypeInt_null#), NodeList(println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), NodeIf(NodeRel(NodeId#x:TypeInt_null#, NodeLiteral#10:TypeInt_null#), NodeList(NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#1:TypeInt_null#), NodeWhile(NodeRel(NodeId#y:TypeInt_null#, NodeLiteral#5:TypeInt_null#), NodeList(println_NodeCallFct(NodeList(NodeOp(NodeOp(NodeLiteral#1000:TypeInt_null#), NodeId#y:TypeInt_null#))), NodeAssign(NodeId#y:TypeInt_null#, NodeOp(NodeId#y:TypeInt_null#, NodeLiteral#1:TypeInt_null#)))), println_NodeCallFct(NodeList(NodeLiteral#"X":TypeString#)), NodeAssign(NodeId#x:TypeInt_null#, NodeOp(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_null#)))))))



*************************************************
*** Fichier data/progr5.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


*** var
*** x
*** :
*** integer
*** ;
*** function
* Enregistre x
*** sum
*** (
*** i
*** :
*** integer
*** ,
*** j
*** :
*** integer
*** )
*** :
*** integer
*** var
* Enregistre i
* Enregistre j
*** k
*** :
*** integer
*** ;
*** begin
* Enregistre k
*** return
*** (
*** i
*** +
[STACK] Variable: i found at Layer: 2
*** j
*** )
[STACK] Variable: j found at Layer: 2
*** ;
*** end
*** function
** Enregistre fct:([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: true Name: sum
*** pgcd
*** (
*** i
*** :
*** integer
*** ,
*** j
*** :
*** integer
*** )
*** :
*** integer
*** begin
* Enregistre i
* Enregistre j
*** while
*** (
*** i
*** !=
[STACK] Variable: i found at Layer: 2
*** j
*** )
[STACK] Variable: j found at Layer: 2
*** do
*** if
*** (
*** i
*** >
[STACK] Variable: i found at Layer: 2
*** j
*** )
[STACK] Variable: j found at Layer: 2
*** then
*** i
*** =
[STACK] Variable: i found at Layer: 2
*** i
*** -
[STACK] Variable: i found at Layer: 2
*** j
*** ;
[STACK] Variable: j found at Layer: 2
*** else
*** j
*** =
[STACK] Variable: j found at Layer: 2
*** j
*** -
[STACK] Variable: j found at Layer: 2
*** i
*** ;
[STACK] Variable: i found at Layer: 2
*** return
*** (
*** i
*** )
[STACK] Variable: i found at Layer: 2
*** ;
*** end
*** begin
** Enregistre fct:([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: true Name: pgcd
*** x
*** =
[STACK] Variable: x found at Layer: 2
*** 5
*** ;
*** println
*** x
*** ;
[STACK] Variable: x found at Layer: 2
*** x
*** =
[STACK] Variable: x found at Layer: 2
*** sum
*** (
*** 3
*** ,
*** 5
*** )
*** ;
Register function NodeLiteral:i | NodeLiteral#3:TypeInt_null#
Register function NodeLiteral:j | NodeLiteral#5:TypeInt_null#
*** println
*** sum
*** (
*** 3
*** ,
*** 5
*** )
*** ;
Register function NodeLiteral:i | NodeLiteral#3:TypeInt_null#
Register function NodeLiteral:j | NodeLiteral#5:TypeInt_null#
*** println
*** (
*** pgcd
*** (
*** 78
*** ,
*** 90
*** )
*** )
Register function NodeLiteral:i | NodeLiteral#78:TypeInt_null#
Register function NodeLiteral:j | NodeLiteral#90:TypeInt_null#
*** ;
*** end

code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
code intermediaire assign
TODO: NodeCallFct.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeId
- NodeCallFct well typed
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#5:TypeInt_null#), println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), NodeAssign(NodeId#x:TypeInt_null#, sum_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#, NodeLiteral#5:TypeInt_null#))), println_NodeCallFct(NodeList(sum_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#, NodeLiteral#5:TypeInt_null#)))), println_NodeCallFct(NodeList(pgcd_NodeCallFct(NodeList(NodeLiteral#78:TypeInt_null#, NodeLiteral#90:TypeInt_null#)))))



*************************************************
*** Fichier data/progr6.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// gestion complexe de la pile
// 
*** var
*** x
*** :
*** integer
*** ;
*** function
* Enregistre x
*** fact1
*** (
*** k
*** :
*** integer
*** )
*** :
*** integer
*** begin
* Enregistre k
*** if
*** (
*** k
*** ==
[STACK] Variable: k found at Layer: 2
*** 1
*** )
*** then
*** return
*** (
*** 1
*** )
*** ;
*** else
*** return
*** (
*** k
*** *
[STACK] Variable: k found at Layer: 2
*** fact1
*** (
*** k
*** -
[STACK] Variable: k found at Layer: 2
*** 1
*** )
*** )
Procedure Expression: java.lang.NoSuchFieldException: Aucune fonction: fact1 trouvee.
*** ;
*** end
*** function
** Enregistre fct:([k:TypeInt_null]) -> TypeInt_null Defined: true Name: fact1
*** fact2
*** (
*** k
*** :
*** integer
*** )
*** :
*** integer
*** begin
* Enregistre k
*** if
*** (
*** k
*** ==
[STACK] Variable: k found at Layer: 3
*** 1
*** )
*** then
*** return
*** (
*** 1
*** )
*** ;
*** else
*** return
*** (
*** fact2
*** (
*** k
*** -
[STACK] Variable: k found at Layer: 3
*** 1
*** )
*** *
Procedure Expression: java.lang.NoSuchFieldException: Aucune fonction: fact2 trouvee.
*** k
*** )
[STACK] Variable: k found at Layer: 4
*** ;
*** end
*** procedure
** Enregistre fct:([k:TypeInt_null]) -> TypeInt_null Defined: true Name: fact2
*** hanoi
*** (
*** a
*** :
*** string
*** ,
*** b
*** :
*** string
*** ,
*** c
*** :
*** string
*** ,
*** k
*** :
*** integer
*** )
*** begin
* Enregistre a
* Enregistre b
* Enregistre c
* Enregistre k
*** if
*** (
*** k
*** >
[STACK] Variable: k found at Layer: 4
*** 1
*** )
*** then
*** hanoi
*** (
*** a
*** ,
[UnknownVariable]Aucune variable [a] enregistree a la couche :4
[UnknownVariable]Aucune variable [a] enregistree a la couche :4
[STACK] Variable: a found at Layer: 2
*** c
*** ,
[UnknownVariable]Aucune variable [c] enregistree a la couche :4
[UnknownVariable]Aucune variable [c] enregistree a la couche :4
[STACK] Variable: c found at Layer: 2
*** b
*** ,
[UnknownVariable]Aucune variable [b] enregistree a la couche :4
[UnknownVariable]Aucune variable [b] enregistree a la couche :4
[STACK] Variable: b found at Layer: 2
*** k
*** -
[STACK] Variable: k found at Layer: 4
*** 1
*** )
*** ;
Procedure Expression: java.lang.NoSuchFieldException: Aucune fonction: hanoi trouvee.
*** print
*** (
*** a
*** )
[UnknownVariable]Aucune variable [a] enregistree a la couche :5
[UnknownVariable]Aucune variable [a] enregistree a la couche :5
[STACK] Variable: a found at Layer: 3
*** ;
*** print
*** (
*** )
*** ;
*** println
*** (
*** c
*** )
[UnknownVariable]Aucune variable [c] enregistree a la couche :5
[UnknownVariable]Aucune variable [c] enregistree a la couche :5
[STACK] Variable: c found at Layer: 3
*** ;
*** if
*** (
*** k
*** >
[STACK] Variable: k found at Layer: 5
*** 1
*** )
*** then
*** hanoi
*** (
*** b
*** ,
[UnknownVariable]Aucune variable [b] enregistree a la couche :5
[UnknownVariable]Aucune variable [b] enregistree a la couche :5
[STACK] Variable: b found at Layer: 3
*** a
*** ,
[UnknownVariable]Aucune variable [a] enregistree a la couche :5
[UnknownVariable]Aucune variable [a] enregistree a la couche :5
[STACK] Variable: a found at Layer: 3
*** c
*** ,
[UnknownVariable]Aucune variable [c] enregistree a la couche :5
[UnknownVariable]Aucune variable [c] enregistree a la couche :5
[STACK] Variable: c found at Layer: 3
*** k
*** -
[STACK] Variable: k found at Layer: 5
*** 1
*** )
*** ;
Procedure Expression: java.lang.NoSuchFieldException: Aucune fonction: hanoi trouvee.
*** end
*** function
** Enregistre fct:([a:TypeString], [b:TypeString], [c:TypeString], [k:TypeInt_null]) -> TypeVoid Defined: true Name: hanoi
*** impair
*** (
*** i
*** :
*** integer
*** )
*** :
*** boolean
*** ;
* Enregistre i
*** function
** Enregistre fct:([i:TypeInt_null]) -> TypeBoolean Defined: false Name: impair
*** pair
*** (
*** i
*** :
*** integer
*** )
*** :
*** boolean
*** var
* Enregistre i
*** b
*** :
*** boolean
*** ;
*** begin
* Enregistre b
*** if
*** (
*** i
*** ==
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[STACK] Variable: i found at Layer: 2
*** 1
*** )
*** then
*** b
*** =
[UnknownVariable]Aucune variable [b] enregistree a la couche :6
[UnknownVariable]Aucune variable [b] enregistree a la couche :6
[STACK] Variable: b found at Layer: 4
*** false
*** ;
*** else
*** if
*** (
*** i
*** ==
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[STACK] Variable: i found at Layer: 2
*** 0
*** )
*** then
*** b
*** =
[UnknownVariable]Aucune variable [b] enregistree a la couche :6
[UnknownVariable]Aucune variable [b] enregistree a la couche :6
[STACK] Variable: b found at Layer: 4
*** true
*** ;
*** else
*** b
*** =
[UnknownVariable]Aucune variable [b] enregistree a la couche :6
[UnknownVariable]Aucune variable [b] enregistree a la couche :6
[STACK] Variable: b found at Layer: 4
*** impair
*** (
*** i
*** -
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[UnknownVariable]Aucune variable [i] enregistree a la couche :6
[STACK] Variable: i found at Layer: 2
*** 1
*** )
*** ;
Register function NodOp:i | NodeLiteral#NodeOp(NodeId#i:TypeInt_null#, NodeLiteral#1:TypeInt_null#):TypeInt_null#
*** return
*** (
*** b
*** )
[UnknownVariable]Aucune variable [b] enregistree a la couche :7
[UnknownVariable]Aucune variable [b] enregistree a la couche :7
[STACK] Variable: b found at Layer: 5
*** ;
*** end
*** function
** Enregistre fct:([i:TypeInt_null]) -> TypeBoolean Defined: true Name: pair
*** impair
*** (
*** i
*** :
*** integer
*** )
*** :
*** boolean
*** begin
* Enregistre i
*** if
*** (
*** i
*** ==
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[STACK] Variable: i found at Layer: 3
*** 1
*** )
*** then
*** return
*** (
*** true
*** )
*** ;
*** else
*** if
*** (
*** i
*** ==
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[STACK] Variable: i found at Layer: 3
*** 0
*** )
*** then
*** return
*** (
*** false
*** )
*** ;
*** else
*** return
*** (
*** pair
*** (
*** i
*** -
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[UnknownVariable]Aucune variable [i] enregistree a la couche :7
[STACK] Variable: i found at Layer: 3
*** 1
*** )
*** )
Register function NodOp:i | NodeLiteral#NodeOp(NodeId#i:TypeInt_null#, NodeLiteral#1:TypeInt_null#):TypeInt_null#
*** ;
*** end
*** begin
** Enregistre fct:([i:TypeInt_null]) -> TypeBoolean Defined: true Name: impair
*** println
*** (
*** fact1
*** (
*** 6
*** )
*** )
Register function NodeLiteral:k | NodeLiteral#6:TypeInt_null#
*** ;
*** println
*** (
*** fact2
*** (
*** 6
*** )
*** )
Register function NodeLiteral:k | NodeLiteral#6:TypeInt_null#
*** ;
*** hanoi
*** (
*** ,
*** ,
*** ,
*** 4
*** )
*** ;
Register function NodeLiteral:a | NodeLiteral#"A":TypeString#
Register function NodeLiteral:b | NodeLiteral#"B":TypeString#
Register function NodeLiteral:c | NodeLiteral#"C":TypeString#
Register function NodeLiteral:k | NodeLiteral#4:TypeInt_null#
*** println
*** (
*** pair
*** (
*** 1001
*** )
*** )
Register function NodeLiteral:i | NodeLiteral#1001:TypeInt_null#
*** ;
*** println
*** (
*** pair
*** (
*** 1000
*** )
*** )
Register function NodeLiteral:i | NodeLiteral#1000:TypeInt_null#
*** ;
*** end

class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeLiteral
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
- NodeCallFct well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(println_NodeCallFct(NodeList(fact1_NodeCallFct(NodeList(NodeLiteral#6:TypeInt_null#)))), println_NodeCallFct(NodeList(fact2_NodeCallFct(NodeList(NodeLiteral#6:TypeInt_null#)))), hanoi_NodeCallFct(NodeList(NodeLiteral#"A":TypeString#, NodeLiteral#"B":TypeString#, NodeLiteral#"C":TypeString#, NodeLiteral#4:TypeInt_null#)), println_NodeCallFct(NodeList(pair_NodeCallFct(NodeList(NodeLiteral#1001:TypeInt_null#)))), println_NodeCallFct(NodeList(pair_NodeCallFct(NodeList(NodeLiteral#1000:TypeInt_null#)))))



*************************************************
*** Fichier data/progr7.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// tableaux
// 
*** var
*** week
*** :
*** array
*** [
*** 0
*** ..
*** 6
*** ]
*** of
*** string
*** ;
*** year
* Enregistre week
*** :
*** array
*** [
*** 1
*** ..
*** 7
*** ]
*** of
*** array
*** [
*** 1
*** ..
*** 31
*** ]
*** of
*** array
*** [
*** 1
*** ..
*** 12
*** ]
*** of
*** string
*** ;
*** begin
* Enregistre year
*** week
*** [
[STACK] Variable: week found at Layer: 2
*** 0
*** ]
*** =
*** ;
*** week
*** [
[STACK] Variable: week found at Layer: 2
*** 1
*** ]
*** =
*** ;
*** week
*** [
[STACK] Variable: week found at Layer: 2
*** 2
*** ]
*** =
*** ;
*** year
*** [
[STACK] Variable: year found at Layer: 2
*** 2
*** ]
*** [
*** 17
*** ]
*** [
*** 3
*** ]
*** =
*** ;
*** year
*** [
[STACK] Variable: year found at Layer: 2
*** 4
*** ]
*** [
*** 22
*** ]
*** [
*** 7
*** ]
*** =
*** ;
*** println
*** (
*** year
*** [
[STACK] Variable: year found at Layer: 2
*** 2
*** ]
*** [
*** 17
*** ]
*** [
*** 3
*** ]
*** )
*** ;
*** println
*** (
*** year
*** [
[STACK] Variable: year found at Layer: 2
*** 2
*** ]
*** [
*** 17
*** ]
*** [
*** 4
*** ]
*** )
*** ;
*** println
*** (
*** week
*** [
[STACK] Variable: week found at Layer: 2
*** 1
*** ]
*** )
*** ;
*** end

code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
- ArrayAccess well typed
--- CheckType NodeLiteral
- Assign well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
- ArrayAccess well typed
- NodeCallFct well typed
- NodeList well typed
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeString)#, NodeLiteral#0:TypeInt_null#), NodeLiteral#"M":TypeString#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeString)#, NodeLiteral#1:TypeInt_null#), NodeLiteral#"T":TypeString#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeString)#, NodeLiteral#2:TypeInt_null#), NodeLiteral#"W":TypeString#), NodeAssign(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_7], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_12], TypeString)))#, NodeLiteral#2:TypeInt_null#), NodeLiteral#17:TypeInt_null#), NodeLiteral#3:TypeInt_null#), NodeLiteral#"X":TypeString#), NodeAssign(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_7], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_12], TypeString)))#, NodeLiteral#4:TypeInt_null#), NodeLiteral#22:TypeInt_null#), NodeLiteral#7:TypeInt_null#), NodeLiteral#"V":TypeString#), println_NodeCallFct(NodeList(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_7], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_12], TypeString)))#, NodeLiteral#2:TypeInt_null#), NodeLiteral#17:TypeInt_null#), NodeLiteral#3:TypeInt_null#))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_7], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_12], TypeString)))#, NodeLiteral#2:TypeInt_null#), NodeLiteral#17:TypeInt_null#), NodeLiteral#4:TypeInt_null#))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeString)#, NodeLiteral#1:TypeInt_null#))))



*************************************************
*** Fichier data/progr8.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// tableaux et enumérés
// 
*** type
*** days
*** =
*** (
*** SUNDAY
*** ,
*** MONDAY
*** ,
*** TUESDAY
*** ,
*** WEDNESDAY
*** ,
*** THURSDAY
*** ,
*** FRIDAY
*** ,
*** SATURDAY
*** )
*** ;
*** months
** Enregistre types: (TypeItemEnum@SUNDAY=0, TypeItemEnum@MONDAY=1, TypeItemEnum@TUESDAY=2, TypeItemEnum@WEDNESDAY=3, TypeItemEnum@THURSDAY=4, TypeItemEnum@FRIDAY=5, TypeItemEnum@SATURDAY=6)
*** =
*** (
*** JANUARY
*** ,
*** FEBRUARY
*** ,
*** MARCH
*** ,
*** APRIL
*** ,
*** MAY
*** ,
*** JUNE
*** ,
*** JULY
*** ,
*** AUGUST
*** ,
*** SEPTEMBER
*** ,
*** OCTOBER
*** ,
*** NOVEMBER
*** ,
*** DECEMBER
*** )
*** ;
*** var
** Enregistre types: (TypeItemEnum@JANUARY=0, TypeItemEnum@FEBRUARY=1, TypeItemEnum@MARCH=2, TypeItemEnum@APRIL=3, TypeItemEnum@MAY=4, TypeItemEnum@JUNE=5, TypeItemEnum@JULY=6, TypeItemEnum@AUGUST=7, TypeItemEnum@SEPTEMBER=8, TypeItemEnum@OCTOBER=9, TypeItemEnum@NOVEMBER=10, TypeItemEnum@DECEMBER=11)
*** d
*** :
*** SUNDAY
*** ..
*** SATURDAY
*** ;
*** week
* Enregistre d
*** :
*** array
*** [
*** MONDAY
*** ..
*** FRIDAY
*** ]
*** of
*** string
*** ;
*** year
* Enregistre week
*** :
*** array
*** [
*** SUNDAY
*** ..
*** SATURDAY
*** ]
*** of
*** array
*** [
*** 1
*** ..
*** 31
*** ]
*** of
*** array
*** [
*** JANUARY
*** ..
*** DECEMBER
*** ]
*** of
*** string
*** ;
*** begin
* Enregistre year
*** week
*** [
[STACK] Variable: week found at Layer: 2
*** MONDAY
*** ]
[UnknownVariable]Aucune variable [MONDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [MONDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [MONDAY] enregistree
*** =
*** ;
*** week
*** [
[STACK] Variable: week found at Layer: 2
*** TUESDAY
*** ]
[UnknownVariable]Aucune variable [TUESDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [TUESDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [TUESDAY] enregistree
*** =
*** ;
*** week
*** [
[STACK] Variable: week found at Layer: 2
*** WEDNESDAY
*** ]
[UnknownVariable]Aucune variable [WEDNESDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [WEDNESDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [WEDNESDAY] enregistree
*** =
*** ;
*** year
*** [
[STACK] Variable: year found at Layer: 2
*** SATURDAY
*** ]
[UnknownVariable]Aucune variable [SATURDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [SATURDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [SATURDAY] enregistree
*** [
*** 17
*** ]
*** [
*** MARCH
*** ]
[UnknownVariable]Aucune variable [MARCH] enregistree a la couche :2
[UnknownVariable]Aucune variable [MARCH] enregistree a la couche :2
[UnknownVariable]Aucune variable [MARCH] enregistree
*** =
*** ;
*** year
*** [
[STACK] Variable: year found at Layer: 2
*** SATURDAY
*** ]
[UnknownVariable]Aucune variable [SATURDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [SATURDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [SATURDAY] enregistree
*** [
*** 1
*** ]
*** [
*** MARCH
*** ]
[UnknownVariable]Aucune variable [MARCH] enregistree a la couche :2
[UnknownVariable]Aucune variable [MARCH] enregistree a la couche :2
[UnknownVariable]Aucune variable [MARCH] enregistree
*** =
*** ;
*** println
*** (
*** year
*** [
[STACK] Variable: year found at Layer: 2
*** SATURDAY
*** ]
[UnknownVariable]Aucune variable [SATURDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [SATURDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [SATURDAY] enregistree
*** [
*** 1
*** ]
*** [
*** MARCH
*** ]
[UnknownVariable]Aucune variable [MARCH] enregistree a la couche :2
[UnknownVariable]Aucune variable [MARCH] enregistree a la couche :2
[UnknownVariable]Aucune variable [MARCH] enregistree
*** )
*** ;
*** println
*** (
*** year
*** [
[STACK] Variable: year found at Layer: 2
*** SATURDAY
*** ]
[UnknownVariable]Aucune variable [SATURDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [SATURDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [SATURDAY] enregistree
*** [
*** 17
*** ]
*** [
*** MARCH
*** ]
[UnknownVariable]Aucune variable [MARCH] enregistree a la couche :2
[UnknownVariable]Aucune variable [MARCH] enregistree a la couche :2
[UnknownVariable]Aucune variable [MARCH] enregistree
*** )
*** ;
*** println
*** (
*** week
*** [
[STACK] Variable: week found at Layer: 2
*** TUESDAY
*** ]
[UnknownVariable]Aucune variable [TUESDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [TUESDAY] enregistree a la couche :2
[UnknownVariable]Aucune variable [TUESDAY] enregistree
*** )
*** ;
*** end

code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
type de l'index incorrect
- Checktype invalid: 
- elem:NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeString)#, NodeId#MONDAY:TypeItemEnum@MONDAY=1#), NodeLiteral#"M":TypeString#)
- NodeList well typed
*** Erreur de typage


Arbre Principal: 
NodeList(NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeString)#, NodeId#MONDAY:TypeItemEnum@MONDAY=1#), NodeLiteral#"M":TypeString#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeString)#, NodeId#TUESDAY:TypeItemEnum@TUESDAY=2#), NodeLiteral#"T":TypeString#), NodeAssign(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeString)#, NodeId#WEDNESDAY:TypeItemEnum@WEDNESDAY=3#), NodeLiteral#"W":TypeString#), NodeAssign(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_0..TypeInt_11], TypeString)))#, NodeId#SATURDAY:TypeItemEnum@SATURDAY=6#), NodeLiteral#17:TypeInt_null#), NodeId#MARCH:TypeItemEnum@MARCH=2#), NodeLiteral#"X":TypeString#), NodeAssign(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_0..TypeInt_11], TypeString)))#, NodeId#SATURDAY:TypeItemEnum@SATURDAY=6#), NodeLiteral#1:TypeInt_null#), NodeId#MARCH:TypeItemEnum@MARCH=2#), NodeLiteral#"V":TypeString#), println_NodeCallFct(NodeList(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_0..TypeInt_11], TypeString)))#, NodeId#SATURDAY:TypeItemEnum@SATURDAY=6#), NodeLiteral#1:TypeInt_null#), NodeId#MARCH:TypeItemEnum@MARCH=2#))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeArrayAccess(NodeArrayAccess(NodeId#year:TypeArray(TypeArrayRange[TypeInt_0..TypeInt_6], TypeArray(TypeArrayRange[TypeInt_1..TypeInt_31], TypeArray(TypeArrayRange[TypeInt_0..TypeInt_11], TypeString)))#, NodeId#SATURDAY:TypeItemEnum@SATURDAY=6#), NodeLiteral#17:TypeInt_null#), NodeId#MARCH:TypeItemEnum@MARCH=2#))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeId#week:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_5], TypeString)#, NodeId#TUESDAY:TypeItemEnum@TUESDAY=2#))))



*************************************************
*** Fichier data/progr9.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


$$
 **************************************************
 ************************************************** $$
*** type
*** chaine
*** =
*** string
*** ;
*** entier
** Enregistre types: TypeString
*** =
*** integer
*** ;
*** booleen
** Enregistre types: TypeInt_null
*** =
*** boolean
*** ;
*** named1
** Enregistre types: TypeBoolean
*** =
*** chaine
*** ;
//named2 = unknown; // error
*** Months
** Enregistre types: TypeNamed_chaine
*** =
*** (
*** January
*** ,
*** February
*** ,
*** March
*** ,
*** April
*** ,
*** May
*** ,
*** June
*** ,
*** July
*** ,
*** August
*** ,
*** September
*** ,
*** October
*** ,
*** November
*** ,
*** December
*** )
*** ;
*** DaysOfWeek
** Enregistre types: (TypeItemEnum@January=0, TypeItemEnum@February=1, TypeItemEnum@March=2, TypeItemEnum@April=3, TypeItemEnum@May=4, TypeItemEnum@June=5, TypeItemEnum@July=6, TypeItemEnum@August=7, TypeItemEnum@September=8, TypeItemEnum@October=9, TypeItemEnum@November=10, TypeItemEnum@December=11)
*** =
*** (
*** Sunday
*** ,
*** Monday
*** ,
*** Tuesday
*** ,
*** Wednesday
*** ,
*** Thursday
*** ,
*** Friday
*** ,
*** Saturday
*** )
*** ;
//// xxx = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, aa, ab, ac, ad, ae, af, ag, ah); // error
*** range1
** Enregistre types: (TypeItemEnum@Sunday=0, TypeItemEnum@Monday=1, TypeItemEnum@Tuesday=2, TypeItemEnum@Wednesday=3, TypeItemEnum@Thursday=4, TypeItemEnum@Friday=5, TypeItemEnum@Saturday=6)
*** =
*** 64
*** ..
*** 81
*** ;
*** range2
** Enregistre types: TypeArrayRange[TypeInt_64..TypeInt_81]
*** =
*** Monday
*** ..
*** Friday
*** ;
//range3 = 81 .. 64; //error
//range4 = Friday .. Unknown; // error
//range5 = Friday .. Monday; // error
//range6 = Monday .. December; //error
//range7 = Friday .. Tuesday; // error "range not valid"
//range8 = Monday .. April; // error "incoherent range"
*** table1
** Enregistre types: TypeArrayRange[TypeInt_1..TypeInt_5]
*** =
*** array
*** [
*** 1
*** ..
*** 32
*** ]
*** of
*** integer
*** ;
*** table2
** Enregistre types: TypeArray(TypeArrayRange[TypeInt_1..TypeInt_32], TypeInt_null)
*** =
*** array
*** [
*** range1
*** ]
*** of
*** integer
*** ;
