


*************************************************
*** Fichier data/progr5.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


*** var
*** x
*** :
*** integer
*** ;
*** function
* Enregistre x
*** sum
*** (
*** i
*** :
*** integer
*** ,
*** j
*** :
*** integer
*** )
*** :
*** integer
*** var
*** k
*** :
*** integer
*** ;
*** begin
* Enregistre k
*** return
*** (
*** i
*** +
Variable [i]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** j
*** )
Variable [j]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** ;
*** end
*** function
** Enregistre fct:sum_NodeCallFct(NodeList)
*** pgcd
*** (
*** i
*** :
*** integer
*** ,
*** j
*** :
*** integer
*** )
*** :
*** integer
*** begin
*** while
*** (
*** i
*** !=
Variable [i]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** j
*** )
Variable [j]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** do
*** if
*** (
*** i
*** >
Variable [i]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** j
*** )
Variable [j]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** then
*** i
*** =
Variable [i]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** i
*** -
Variable [i]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** j
*** ;
Variable [j]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** else
*** j
*** =
Variable [j]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** j
*** -
Variable [j]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** i
*** ;
Variable [i]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** return
*** (
*** i
*** )
Variable [i]: java.lang.NoSuchFieldException: Aucune variable similaire stackee trouvee
*** ;
*** end
*** begin
** Enregistre fct:pgcd_NodeCallFct(NodeList)
*** x
*** =
[STACK] Variable: x found at Layer: 2
*** 5
*** ;
*** x
*** =
[STACK] Variable: x found at Layer: 2
*** sum
*** (
*** 3
*** ,
*** 5
*** )
*** ;
funct: ([i:TypeInt], [j:TypeInt]) -> TypeInt Defined: true Name: sum
* expected: ([i:TypeInt], [j:TypeInt])
* got: TypeInt, TypeInt, params:NodeList(NodeLiteral(TypeInt, 3), NodeLiteral(TypeInt, 5))
*** println
*** sum
*** (
*** 3
*** ,
*** 5
*** )
*** ;
funct: ([i:TypeInt], [j:TypeInt]) -> TypeInt Defined: true Name: sum
* expected: ([i:TypeInt], [j:TypeInt])
* got: TypeInt, TypeInt, params:NodeList(NodeLiteral(TypeInt, 3), NodeLiteral(TypeInt, 5))
*** println
Type feat: [println:TypeInt]
Type args: sum_NodeCallFct(NodeList(NodeLiteral(TypeInt, 3), NodeLiteral(TypeInt, 5)))
*** (
*** pgcd
*** (
*** 78
*** ,
*** 90
*** )
*** )
funct: ([i:TypeInt], [j:TypeInt]) -> TypeInt Defined: true Name: pgcd
* expected: ([i:TypeInt], [j:TypeInt])
* got: TypeInt, TypeInt, params:NodeList(NodeLiteral(TypeInt, 78), NodeLiteral(TypeInt, 90))
*** ;
*** end
Type feat: [println:TypeInt]
Type args: pgcd_NodeCallFct(NodeList(NodeLiteral(TypeInt, 78), NodeLiteral(TypeInt, 90)))

*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeCallFct
Number of args: 2
Number of para: 2
--- CheckType NodeLiteral
Argum type: TypeInt
Param type: TypeInt
--- CheckType NodeLiteral
Argum type: TypeInt
Param type: TypeInt
--- CheckType NodeCallFct
Number of args: 1
Number of para: 1
--- CheckType NodeCallFct
Number of args: 2
Number of para: 2
--- CheckType NodeLiteral
Argum type: TypeInt
Param type: TypeInt
--- CheckType NodeLiteral
Argum type: TypeInt
Param type: TypeInt
Argum type: ([i:TypeInt], [j:TypeInt]) -> TypeInt Defined: true Name: sum
Param type: TypeInt
*** Erreur de typage :
* Args Type: ([i:TypeInt], [j:TypeInt]) -> TypeInt Defined: true Name: sum
* Params Type: TypeInt
--- CheckType NodeCallFct
Number of args: 1
Number of para: 1
--- CheckType NodeCallFct
Number of args: 2
Number of para: 2
--- CheckType NodeLiteral
Argum type: TypeInt
Param type: TypeInt
--- CheckType NodeLiteral
Argum type: TypeInt
Param type: TypeInt
Argum type: ([i:TypeInt], [j:TypeInt]) -> TypeInt Defined: true Name: pgcd
Param type: TypeInt
*** Erreur de typage :
* Args Type: ([i:TypeInt], [j:TypeInt]) -> TypeInt Defined: true Name: pgcd
* Params Type: TypeInt
*** Erreur de typage


Arbre Principal: 
NodeList(NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 5)), NodeAssign(NodeLiteral(TypeInt, 0), sum_NodeCallFct(NodeList(NodeLiteral(TypeInt, 3), NodeLiteral(TypeInt, 5)))), println_NodeCallFct(NodeList(sum_NodeCallFct(NodeList(NodeLiteral(TypeInt, 3), NodeLiteral(TypeInt, 5))))), println_NodeCallFct(NodeList(pgcd_NodeCallFct(NodeList(NodeLiteral(TypeInt, 78), NodeLiteral(TypeInt, 90))))))
