package ubordeaux.deptinfo.compilation.project.main;

import ubordeaux.deptinfo.compilation.project.type.*;
import fr.groupname.compilator.environment.*;
import beaver.*;
import java.util.ArrayList;
import ubordeaux.deptinfo.compilation.project.node.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.grammar".
 */
public class Parser extends beaver.Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjLtbyLSKL$kvz5nUi#WAeII3YWX1GgWMBROnXbPq0aH18MK9Gi0bG5MdSS5UqB0B11Tm" +
		"G14L4HK5Kt8WB2Av0Mx5OeIrLQMjhwxuTlpVllBovzos#v2Vz#OV9xvjpvfmpvpipzxwPkO" +
		"2t22Ku78FG5MFH30$YG3J5GVW93iOXE1HXPA4vMk0mT4Ddd88##3dweX$wOm3oS17sGowEn" +
		"N6o2nT6DRH4QnoD6cp1U4p6O9o1uHY9KVXraWpxDvhx0Sp0EDoEfN39lHeFat4#pi4QF8eQ" +
		"cPK1ToLcOG6knZMubXdEnK2SYW9MCXKhcIkKaC6kz806hLAsPkv5dXw1LMhoFVAqYlA8o2u" +
		"o#Nbgql9CQ13FaJgVNCFYvybDotDsWtYEKfv2ydGFy5IavPdK89vZbASdUSuBy9oVbkUt3U" +
		"0fH34sypqz0jF84tbFby1JjXeyb9PdLKgUFBI9FGsJoQu#3pbeX$Ou7Xrn8dxcymqbk#tBm" +
		"o$Hrle5#FCKfiop42C2USRY4HGXtrTLBC#lKkR9mvWqlfjJ#sH7IjzlS9tFDnrdCLS7$PKy" +
		"WUUmpXTVJQyTVtgWYkKfcMwIDts#nAUVQ3b1LuXLoFgCHlne#U5OBiFlC1ENu59SZYjm9Qx" +
		"YUNIzEOz#gizrDi#ZQDGyNzGD9keaZPhBg4wgrvz7EgxM6dSZHouq8#DHiVot#lBVOg9Erf" +
		"oB6DKbHVuDrhZRE799Ylml#VBVOQ9#eJcVOTHfAVA$RethhR#wrwoe4WmnuqempCWopLEkS" +
		"hJACrLMgPoYSWNkmRs#VUyYrbTdwgl3VTY6Lr6A9$0aBiQBR1VZJioHLt41NcRThz1x5#x6" +
		"CdaFQ#LT#RjivJwt6FVZAJo6nx6UCK$ZMJoF5x2HTM$2Llw$XZS0#PoxPG6hAEJSYrX9Dvv" +
		"FFT0JlRXdzEPx4djB7BYyINWyvVVZNITochkig4ptyZ3tGtjNp#OxbiiTfPKvOrlp$3iwIO" +
		"RZ6yrTGLkPiOqdzoYkRpRvgtcFggGsEIFkOxZERRZIRPaXNib9tFEoMKymG#DNAJQoYZoJ0" +
		"giKtWSyODPmW2Tx7$0qDIn#dgRxW2UVFA7$mxhbC6j5WCVvtdZoUS#9lASdy7GDc$VKuMuG" +
		"PSlc7QbnFFRJY6IogtV9s4plLeVphcRxiiXk#rpEtlu5#FFafypZ13XSKs$xG5NVNKzwtyb" +
		"fVE6KlZ3lBxOlYsUU$RGxydopuxlGQyTt232LfsIQ6AWYyUadMc9rHAh8oMZ4ZvOVZcKWls" +
		"UA#OqpX5yV9VpI6SOOnyJ4TwscIQFQ#w8wCIgcny#Zn76Tw$F7evBdB$VbRvTX$goCyvVwy" +
		"ZiPve$$wk9HCLjZPPJ5tlTAMSzmKzzmtaT6yEipYzzYOxaAaRO3sISGP$FRoJ5UXpk4noUI" +
		"HKJQVCQq8o8haMDojLCznsWET#yi4RR0zilPYCX750C0Tp3b0yIvH3FYlOY$CG2ScMmwK#w" +
		"CszpLR0wZt43x6ihDb3iejm5UAULEzidhxg5iGVa1utCfFwLS1Kw2Vxif3wIVUKACTVfHjg" +
		"ISJjc6UKPGTcI$5MKNohrMJVcqTMK#kqxEsRsNibfhh6HCNyhpay$BlOgnIwDwQ2ZrzzK#Z" +
		"$royezMttZQ3b5z4lKsga#Ztacv#xDPHWnHtwNqTQEoG$q7gtq6xSNiTzV#NFP7iVycEsNM" +
		"N6OJhCEPfltrn1THtOjmiJvtVERFq2qYrrA$BSJvUsTHpY5c4KlKlbRbdGIVfvjdZTb8R2K" +
		"#r5hu8BrHgbyIZ$FuBBoBhNuPCP8ertu5vxCYKEFygCHR6dEEogd4TGJNpiiZpbFx66AcwX" +
		"DPqnwBZtFok8RUXSG519#Rvrh#McA1wbK4tq7lMkrFZiNnz$GLnI3MEbBx6oDhd#cwfmB$Q" +
		"WBzbIhVYKgdkSe#AfUhtA9IrzyjKdbbL8QcgBn2vGoLgrMkKxaxiQRGkqdgx1#8#Jop#NcX" +
		"G7z$Ip$8qW#rzEO1xYR47FKTeROwbP#elMLKEXsqtpeY#Po#eArjObtE68qBCsQJDQ$YJEQ" +
		"LmRp3LivnAgV7RMu1#xFzOqBpBBskyTpEV7yVJTI#D$KOBolGFyMgPLMI#1QMVuDj9uwrV6" +
		"ydZiLsFfblP1Vg$#GbsIWloWlol3mdTR91dfLdv65PBG$9Wr9h8fwMkzak9POGTn6BYJk8s" +
		"ubRYKN4Gk8MucRY9e8xbzncnjye2pJJCfaloutsf6aVbtaoLswGEJ9R7cFKKxJLoZhZgvL7" +
		"ZLnhsZMcVKHhtgoIfwkiKlt##XcjbFjKuqaaxyYVjRTJFfDFvHFvM3wI$yb$vKFvZ$oRzht" +
		"oWVpBMf7tYJsg$qt#gjfkq$wJ#9EyPVH$o5$KzxPfxv4LiedoZyJlYUsohJxd6wPznRHRv6" +
		"LOV$Aw$87jrsQVY$Jvkv4lgKp5PDukUV8HBcyehjvIF7DF6Pm2GomC98Og1l70BrQKCEy4s" +
		"c8uWxc7CUz4oedcnkZngms4oxjH10vlJvwvwPMQhrGG3hzHNSBXLwnhC9hwEAAI#qObxyKy" +
		"7GY7DwqG4Rs95J5F6MFBsE#gw9O6FHZVa$6dKl848HnKCKyLPI$AqudUH1#YBz6TTXlzEAu" +
		"VvzkVSW3hgcQkQjehsAzWV07r0ke5vaim582RGay6fnw5IJ3bMtKOogG=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};
 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
			System.err.format("*** " + msg + " ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
		}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] program = type_declaration_part variable_declaration_part procedure_definition_part TOKEN_BEGIN statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			Action.NONE,  	// [1] type_declaration_part = 
			RETURN2,	// [2] type_declaration_part = TOKEN_TYPE type_declaration_list; returns 'type_declaration_list' although none is marked
			new Action() {	// [3] type_declaration_list = type_declaration_list type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [4] type_declaration_list = type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [5] type_declaration = type_declaration_head TOKEN_AFF type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [6] type_declaration_head = TOKEN_IDENTIFIER
			Action.RETURN,	// [7] type = simple_type
			Action.RETURN,	// [8] type = named_type
			Action.RETURN,	// [9] type = index_type
			Action.RETURN,	// [10] type = array_type
			Action.RETURN,	// [11] type = pointer_type
			Action.RETURN,	// [12] type = structure_type
			Action.RETURN,	// [13] simple_type = TOKEN_STRING
			Action.RETURN,	// [14] simple_type = TOKEN_INTEGER
			Action.RETURN,	// [15] simple_type = TOKEN_BOOLEAN
			Action.RETURN,	// [16] named_type = TOKEN_IDENTIFIER
			Action.RETURN,	// [17] index_type = enumerated_type
			Action.RETURN,	// [18] index_type = subrange_type
			RETURN3,	// [19] enumerated_type = TOKEN_LPAR identifier_list TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			RETURN3,	// [20] subrange_type = TOKEN_LIT_INTEGER TOKEN_DOTDOT TOKEN_LIT_INTEGER; returns 'TOKEN_LIT_INTEGER' although none is marked
			RETURN3,	// [21] subrange_type = TOKEN_IDENTIFIER TOKEN_DOTDOT TOKEN_IDENTIFIER; returns 'TOKEN_IDENTIFIER' although none is marked
			RETURN6,	// [22] array_type = TOKEN_ARRAY TOKEN_LBRACKET range_type TOKEN_RBRACKET TOKEN_OF type; returns 'type' although none is marked
			Action.RETURN,	// [23] range_type = enumerated_type
			Action.RETURN,	// [24] range_type = subrange_type
			Action.RETURN,	// [25] range_type = named_type
			RETURN2,	// [26] pointer_type = TOKEN_CIRC type; returns 'type' although none is marked
			RETURN4,	// [27] structure_type = TOKEN_STRUCT TOKEN_LBRACE feature_list_type TOKEN_RBRACE; returns 'TOKEN_RBRACE' although none is marked
			new Action() {	// [28] feature_list_type = feature_list_type feature_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [29] feature_list_type = feature_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [30] feature_type = TOKEN_IDENTIFIER TOKEN_COLON type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.NONE,  	// [31] variable_declaration_part = 
			RETURN2,	// [32] variable_declaration_part = TOKEN_VAR variable_declaration_list; returns 'variable_declaration_list' although none is marked
			new Action() {	// [33] variable_declaration_list = variable_declaration_list variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [34] variable_declaration_list = variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [35] variable_declaration = identifier_list TOKEN_COLON type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			new Action() {	// [36] identifier_list = identifier_list TOKEN_COMMA TOKEN_IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [37] identifier_list = TOKEN_IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.NONE,  	// [38] procedure_definition_part = 
			Action.RETURN,	// [39] procedure_definition_part = procedure_definition_list
			new Action() {	// [40] procedure_definition_list = procedure_definition_list procedure_definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [41] procedure_definition_list = procedure_definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [42] procedure_definition = procedure_definition_head block; returns 'block' although none is marked
			RETURN2,	// [43] procedure_definition = procedure_declaration_head TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [44] procedure_definition_head = procedure_head
			Action.RETURN,	// [45] procedure_declaration_head = procedure_head
			RETURN5,	// [46] procedure_head = TOKEN_PROCEDURE TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			RETURN7,	// [47] procedure_head = TOKEN_FUNCTION TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR TOKEN_COLON type; returns 'type' although none is marked
			Action.NONE,  	// [48] argt_part = 
			Action.RETURN,	// [49] argt_part = argt_list.a
			new Action() {	// [50] argt_list = argt_list TOKEN_COMMA argt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [51] argt_list = argt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN3,	// [52] argt = TOKEN_IDENTIFIER TOKEN_COLON type; returns 'type' although none is marked
			RETURN4,	// [53] block = variable_declaration_part TOKEN_BEGIN statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			new Action() {	// [54] statement_list = statement_list statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [55] statement_list = statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [56] statement = simple_statement
			Action.RETURN,	// [57] statement = structured_statement
			Action.RETURN,	// [58] simple_statement = assignment_statement
			Action.RETURN,	// [59] simple_statement = procedure_statement
			Action.RETURN,	// [60] simple_statement = new_statement
			Action.RETURN,	// [61] simple_statement = dispose_statement
			Action.RETURN,	// [62] simple_statement = println_statement
			Action.RETURN,	// [63] simple_statement = readln_statement
			Action.RETURN,	// [64] simple_statement = return_statement
			RETURN4,	// [65] assignment_statement = variable_access TOKEN_AFF expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN2,	// [66] procedure_statement = procedure_expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN4,	// [67] procedure_expression = TOKEN_IDENTIFIER TOKEN_LPAR expression_part TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.NONE,  	// [68] expression_part = 
			Action.RETURN,	// [69] expression_part = expression_list
			new Action() {	// [70] expression_list = expression_list TOKEN_COMMA expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [71] expression_list = expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN3,	// [72] new_statement = TOKEN_NEW variable_access TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [73] dispose_statement = TOKEN_DISPOSE variable_access TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [74] println_statement = TOKEN_PRINTLN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [75] readln_statement = TOKEN_READLN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [76] return_statement = TOKEN_RETURN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [77] structured_statement = block
			Action.RETURN,	// [78] structured_statement = if_statement
			Action.RETURN,	// [79] structured_statement = while_statement
			Action.RETURN,	// [80] structured_statement = switch_statement
			RETURN4,	// [81] if_statement = TOKEN_IF expression TOKEN_THEN statement; returns 'statement' although none is marked
			RETURN6,	// [82] if_statement = TOKEN_IF expression TOKEN_THEN statement TOKEN_ELSE statement; returns 'statement' although none is marked
			RETURN4,	// [83] while_statement = TOKEN_WHILE expression TOKEN_DO statement; returns 'statement' although none is marked
			RETURN5,	// [84] switch_statement = TOKEN_SWITCH expression TOKEN_BEGIN case_statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			new Action() {	// [85] case_statement_list = case_statement_list case_statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [86] case_statement_list = case_statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [87] case_statement = TOKEN_CASE TOKEN_IDENTIFIER TOKEN_COLON statement; returns 'statement' although none is marked
			RETURN3,	// [88] case_statement = TOKEN_DEFAULT TOKEN_COLON statement; returns 'statement' although none is marked
			Action.RETURN,	// [89] variable_access = TOKEN_IDENTIFIER
			RETURN4,	// [90] variable_access = variable_access TOKEN_LBRACKET expression TOKEN_RBRACKET; returns 'TOKEN_RBRACKET' although none is marked
			RETURN2,	// [91] variable_access = expression TOKEN_CIRC; returns 'TOKEN_CIRC' although none is marked
			RETURN3,	// [92] expression = expression TOKEN_PLUS expression; returns 'expression' although none is marked
			RETURN3,	// [93] expression = expression TOKEN_MINUS expression; returns 'expression' although none is marked
			RETURN3,	// [94] expression = expression TOKEN_TIMES expression; returns 'expression' although none is marked
			RETURN3,	// [95] expression = expression TOKEN_DIV expression; returns 'expression' although none is marked
			RETURN2,	// [96] expression = TOKEN_MINUS expression; returns 'expression' although none is marked
			RETURN3,	// [97] expression = expression TOKEN_OR expression; returns 'expression' although none is marked
			RETURN3,	// [98] expression = expression TOKEN_AND expression; returns 'expression' although none is marked
			RETURN2,	// [99] expression = TOKEN_NOT expression; returns 'expression' although none is marked
			RETURN3,	// [100] expression = expression TOKEN_LT expression; returns 'expression' although none is marked
			RETURN3,	// [101] expression = expression TOKEN_LE expression; returns 'expression' although none is marked
			RETURN3,	// [102] expression = expression TOKEN_GT expression; returns 'expression' although none is marked
			RETURN3,	// [103] expression = expression TOKEN_GE expression; returns 'expression' although none is marked
			RETURN3,	// [104] expression = expression TOKEN_EQ expression; returns 'expression' although none is marked
			RETURN3,	// [105] expression = expression TOKEN_NE expression; returns 'expression' although none is marked
			RETURN3,	// [106] expression = TOKEN_LPAR expression TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.RETURN,	// [107] expression = procedure_expression
			Action.RETURN,	// [108] expression = variable_access
			Action.RETURN,	// [109] expression = literal
			Action.RETURN,	// [110] literal = TOKEN_LIT_INTEGER
			Action.RETURN,	// [111] literal = TOKEN_LIT_STRING
			Action.RETURN,	// [112] literal = TOKEN_TRUE
			Action.RETURN,	// [113] literal = TOKEN_FALSE
			Action.RETURN	// [114] literal = TOKEN_NULL
		};

 
	report = new Events();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
