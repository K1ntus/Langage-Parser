


*************************************************
*** Fichier data/progr0.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


*** var
*** a
*** :
*** integer
*** ;
*** begin
* Enregistre a
*** a
[STACK] Pushed one more stack layer
*** =
[VARIABLE]a found.
[STACK] Stack Layer: 1
*** 100
*** ;
*** end
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 100))

[STACK] Poped one more stack layer
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 100)))



*************************************************
*** Fichier data/progr1.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


*** var
*** a
*** :
*** integer
*** ;
*** begin
* Enregistre a
*** a
[STACK] Pushed one more stack layer
*** =
[VARIABLE]a found.
[STACK] Stack Layer: 1
*** 100
*** ;
*** while
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 100))
*** (
*** a
*** >=
[VARIABLE]a found.
[STACK] Stack Layer: 1
*** 0
*** )
*** do
*** begin
*** println
[STACK] Pushed one more stack layer
*** (
*** a
*** )
[VARIABLE]a found.
[STACK] Stack Layer: 1
*** ;
*** a
*** =
[VARIABLE]a found.
[STACK] Stack Layer: 1
*** a
*** -
[VARIABLE]a found.
[STACK] Stack Layer: 1
*** 1
*** ;
*** end
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeOp(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1)))
*** end
[STACK] Poped one more stack layer

[STACK] Poped one more stack layer
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
Code intermediaire while
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeLiteral
class ubordeaux.deptinfo.compilation.project.node.NodeLiteral
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeWhile
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 100)), NodeWhile(NodeRel(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 0)), NodeList(println_NodeCallFct(NodeList(NodeLiteral(TypeInt, 0))), NodeAssign(NodeLiteral(TypeInt, 0), NodeOp(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1))))))



*************************************************
*** Fichier data/progr2.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// gestion des variables statiques
//
*** var
*** x
*** ,
*** y
*** :
*** integer
*** ;
*** b
* Enregistre x
* Enregistre y
*** :
*** boolean
*** ;
*** c
* Enregistre b
*** :
*** string
*** ;
*** d
* Enregistre c
*** :
*** array
*** [
*** 1
*** ..
*** 10
*** ]
*** of
*** string
*** ;
*** begin
* Enregistre d
*** x
[STACK] Pushed one more stack layer
*** =
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** 1234564789
*** ;
// 0x4995F6B5
*** y
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1234564789))
*** =
[VARIABLE]y found.
[STACK] Stack Layer: 1
*** 0x7FFFFFFF
*** ;
*** b
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 2147483647))
*** =
[VARIABLE]b found.
[STACK] Stack Layer: 1
*** true
*** ;
*** c
[STATE] assignment: NodeAssign(NodeLiteral(TypeBoolean, 0), NodeLiteral(TypeBoolean, true))
*** =
[VARIABLE]c found.
[STACK] Stack Layer: 1
*** ;
*** d
[STATE] assignment: NodeAssign(NodeLiteral(TypeString, 0), NodeLiteral(TypeString, a))
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 1
*** ]
*** =
*** ;
*** d
[STATE] assignment: NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 1)), NodeLiteral(TypeString, A))
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 2
*** ]
*** =
*** ;
*** d
[STATE] assignment: NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 2)), NodeLiteral(TypeString, B))
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 3
*** ]
*** =
*** ;
*** d
[STATE] assignment: NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 3)), NodeLiteral(TypeString, C))
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 10
*** ]
*** =
*** ;
*** println
[STATE] assignment: NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 10)), NodeLiteral(TypeString, Z))
*** x
*** ;
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** println
*** y
*** ;
[VARIABLE]y found.
[STACK] Stack Layer: 1
*** println
*** b
*** ;
[VARIABLE]b found.
[STACK] Stack Layer: 1
*** println
*** c
*** ;
[VARIABLE]c found.
[STACK] Stack Layer: 1
*** println
*** d
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 2
*** ]
*** ;
*** end

[STACK] Poped one more stack layer
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
*** Erreur de typage


Arbre Principal: 
NodeList(NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1234564789)), NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 2147483647)), NodeAssign(NodeLiteral(TypeBoolean, 0), NodeLiteral(TypeBoolean, true)), NodeAssign(NodeLiteral(TypeString, 0), NodeLiteral(TypeString, a)), NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 1)), NodeLiteral(TypeString, A)), NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 2)), NodeLiteral(TypeString, B)), NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 3)), NodeLiteral(TypeString, C)), NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 10)), NodeLiteral(TypeString, Z)), println_NodeCallFct(NodeList(NodeLiteral(TypeInt, 0))), println_NodeCallFct(NodeList(NodeLiteral(TypeInt, 0))), println_NodeCallFct(NodeList(NodeLiteral(TypeBoolean, 0))), println_NodeCallFct(NodeList(NodeLiteral(TypeString, 0))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 2)))))



*************************************************
*** Fichier data/progr3.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


// gestion des variables statiques
// gestion du tas et des pointeurs
// 
*** var
*** x
*** :
*** integer
*** ;
*** y
* Enregistre x
*** :
*** integer
*** ;
*** b
* Enregistre y
*** :
*** boolean
*** ;
*** c
* Enregistre b
*** :
*** string
*** ;
*** d
* Enregistre c
*** :
*** array
*** [
*** 1
*** ..
*** 10
*** ]
*** of
*** string
*** ;
*** p
* Enregistre d
*** :
*** ^
*** integer
*** ;
*** q
* Enregistre p
*** :
*** ^
*** string
*** ;
*** r
* Enregistre q
*** :
*** ^
*** integer
*** ;
*** begin
* Enregistre r
*** x
[STACK] Pushed one more stack layer
*** =
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** 1234564789
*** ;
// 0x4995F6B5
*** y
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1234564789))
*** =
[VARIABLE]y found.
[STACK] Stack Layer: 1
*** 0x7FFFFFFF
*** ;
*** b
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 2147483647))
*** =
[VARIABLE]b found.
[STACK] Stack Layer: 1
*** true
*** ;
*** c
[STATE] assignment: NodeAssign(NodeLiteral(TypeBoolean, 0), NodeLiteral(TypeBoolean, true))
*** =
[VARIABLE]c found.
[STACK] Stack Layer: 1
*** ;
*** d
[STATE] assignment: NodeAssign(NodeLiteral(TypeString, 0), NodeLiteral(TypeString, a))
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 1
*** ]
*** =
*** ;
*** d
[STATE] assignment: NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 1)), NodeLiteral(TypeString, A))
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 2
*** ]
*** =
*** ;
*** d
[STATE] assignment: NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 2)), NodeLiteral(TypeString, B))
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 3
*** ]
*** =
*** ;
*** d
[STATE] assignment: NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 3)), NodeLiteral(TypeString, C))
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 10
*** ]
*** =
*** ;
*** println
[STATE] assignment: NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 10)), NodeLiteral(TypeString, Z))
*** (
*** x
*** )
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** ;
*** println
*** (
*** y
*** )
[VARIABLE]y found.
[STACK] Stack Layer: 1
*** ;
*** println
*** (
*** b
*** )
[VARIABLE]b found.
[STACK] Stack Layer: 1
*** ;
*** println
*** (
*** c
*** )
[VARIABLE]c found.
[STACK] Stack Layer: 1
*** ;
*** println
*** (
*** d
*** [
[VARIABLE]d found.
[STACK] Stack Layer: 1
*** 2
*** ]
*** )
*** ;
*** new
*** q
*** ;
[VARIABLE]q found.
[STACK] Stack Layer: 1
*** q
*** ^
[VARIABLE]q found.
[STACK] Stack Layer: 1
*** =
*** ;
// 0x41
*** println
[STATE] assignment: NodeAssign(NodePtrAccess(NodeLiteral(TypePointer(TypeString), 0)), NodeLiteral(TypeString, A))
*** q
*** ^
[VARIABLE]q found.
[STACK] Stack Layer: 1
*** ;
*** println
*** p
*** ;
[VARIABLE]p found.
[STACK] Stack Layer: 1
*** new
*** p
*** ;
[VARIABLE]p found.
[STACK] Stack Layer: 1
*** println
*** p
*** ;
[VARIABLE]p found.
[STACK] Stack Layer: 1
*** p
*** ^
[VARIABLE]p found.
[STACK] Stack Layer: 1
*** =
*** x
*** ;
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** println
[STATE] assignment: NodeAssign(NodePtrAccess(NodeLiteral(TypePointer(TypeInt), 0)), NodeLiteral(TypeInt, 0))
*** p
*** ^
[VARIABLE]p found.
[STACK] Stack Layer: 1
*** ;
*** new
*** r
*** ;
[VARIABLE]r found.
[STACK] Stack Layer: 1
// resize the heap
*** r
*** ^
[VARIABLE]r found.
[STACK] Stack Layer: 1
*** =
*** 65536
*** ;
*** println
[STATE] assignment: NodeAssign(NodePtrAccess(NodeLiteral(TypePointer(TypeInt), 0)), NodeLiteral(TypeInt, 65536))
*** (
*** r
*** ^
[VARIABLE]r found.
[STACK] Stack Layer: 1
*** )
*** ;
*** dispose
*** p
*** ;
[VARIABLE]p found.
[STACK] Stack Layer: 1
*** println
*** (
*** p
*** )
[VARIABLE]p found.
[STACK] Stack Layer: 1
*** ;
*** println
*** (
*** p
*** ^
[VARIABLE]p found.
[STACK] Stack Layer: 1
*** )
*** ;
// heap memory error
*** end

[STACK] Poped one more stack layer
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeNew
code intermediaire assign
TODO: NodePtrAccess.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeNew
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
code intermediaire assign
TODO: NodePtrAccess.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeNew
code intermediaire assign
TODO: NodePtrAccess.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeDispose
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeNew
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeNew
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeNew
--- CheckType NodeAssign
--- CheckType NodePtrAccess
--- CheckType NodeLiteral
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeDispose
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
*** Erreur de typage


Arbre Principal: 
NodeList(NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1234564789)), NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 2147483647)), NodeAssign(NodeLiteral(TypeBoolean, 0), NodeLiteral(TypeBoolean, true)), NodeAssign(NodeLiteral(TypeString, 0), NodeLiteral(TypeString, a)), NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 1)), NodeLiteral(TypeString, A)), NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 2)), NodeLiteral(TypeString, B)), NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 3)), NodeLiteral(TypeString, C)), NodeAssign(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 10)), NodeLiteral(TypeString, Z)), println_NodeCallFct(NodeList(NodeLiteral(TypeInt, 0))), println_NodeCallFct(NodeList(NodeLiteral(TypeInt, 0))), println_NodeCallFct(NodeList(NodeLiteral(TypeBoolean, 0))), println_NodeCallFct(NodeList(NodeLiteral(TypeString, 0))), println_NodeCallFct(NodeList(NodeArrayAccess(NodeLiteral(TypeArray(TypeArrayRange[TypeInt..TypeInt], TypeString), 0), NodeLiteral(TypeInt, 2)))), NodeNew(NodeLiteral(TypePointer(TypeString), 0)), NodeAssign(NodePtrAccess(NodeLiteral(TypePointer(TypeString), 0)), NodeLiteral(TypeString, A)), println_NodeCallFct(NodeList(NodePtrAccess(NodeLiteral(TypePointer(TypeString), 0)))), println_NodeCallFct(NodeList(NodeLiteral(TypePointer(TypeInt), 0))), NodeNew(NodeLiteral(TypePointer(TypeInt), 0)), println_NodeCallFct(NodeList(NodeLiteral(TypePointer(TypeInt), 0))), NodeAssign(NodePtrAccess(NodeLiteral(TypePointer(TypeInt), 0)), NodeLiteral(TypeInt, 0)), println_NodeCallFct(NodeList(NodePtrAccess(NodeLiteral(TypePointer(TypeInt), 0)))), NodeNew(NodeLiteral(TypePointer(TypeInt), 0)), NodeAssign(NodePtrAccess(NodeLiteral(TypePointer(TypeInt), 0)), NodeLiteral(TypeInt, 65536)), println_NodeCallFct(NodeList(NodePtrAccess(NodeLiteral(TypePointer(TypeInt), 0)))), NodeDispose(NodeLiteral(TypePointer(TypeInt), 0)), println_NodeCallFct(NodeList(NodeLiteral(TypePointer(TypeInt), 0))), println_NodeCallFct(NodeList(NodePtrAccess(NodeLiteral(TypePointer(TypeInt), 0)))))



*************************************************
*** Fichier data/progr4.lea
[INFO] $$  : multiple line comment.
[INFO] $$$ : documentation comment.


//
// Structure de contrôle
//
//
*** var
*** x
*** ,
*** y
*** :
*** integer
*** ;
*** begin
* Enregistre x
* Enregistre y
*** x
[STACK] Pushed one more stack layer
*** =
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** 1
*** ;
*** while
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1))
*** (
*** x
*** <=
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** 10
*** )
*** do
*** begin
*** println
[STACK] Pushed one more stack layer
*** (
*** x
*** )
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** ;
*** if
*** (
*** x
*** ==
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** 10
*** )
*** then
*** begin
*** y
[STACK] Pushed one more stack layer
*** =
[VARIABLE]y found.
[STACK] Stack Layer: 1
*** 1
*** ;
*** while
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1))
*** (
*** y
*** <=
[VARIABLE]y found.
[STACK] Stack Layer: 1
*** 5
*** )
*** do
*** begin
*** println
[STACK] Pushed one more stack layer
*** (
*** -
*** 1000
*** -
*** y
*** )
[VARIABLE]y found.
[STACK] Stack Layer: 1
*** ;
*** y
*** =
[VARIABLE]y found.
[STACK] Stack Layer: 1
*** y
*** +
[VARIABLE]y found.
[STACK] Stack Layer: 1
*** 1
*** ;
*** end
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeOp(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1)))
*** else
[STACK] Poped one more stack layer
*** Erreur de syntaxe en ligne 0, colonne 18. Token inattendu: TOKEN_ELSE
*** println
*** (
0,18-0,6: Recovered: removed unexpected token #54
*** )
*** ;
*** x
*** =
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** x
*** +
[VARIABLE]x found.
[STACK] Stack Layer: 1
*** 1
*** ;
*** end
[STATE] assignment: NodeAssign(NodeLiteral(TypeInt, 0), NodeOp(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1)))
*** end
[STACK] Poped one more stack layer
*** end
[STACK] Poped one more stack layer

[STACK] Poped one more stack layer
code intermediaire assign
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
Code intermediaire while
TODO: NodeLiteral.generateIntermediateCode()
TODO: NodeLiteral.generateIntermediateCode()
class ubordeaux.deptinfo.compilation.project.node.NodeCallFct
class ubordeaux.deptinfo.compilation.project.node.NodeIf
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeWhile
*** Typage correct


Arbre Principal: 
NodeList(NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1)), NodeWhile(NodeRel(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 10)), NodeList(println_NodeCallFct(NodeList(NodeLiteral(TypeInt, 0))), NodeIf(NodeRel(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 10)), NodeList(NodeAssign(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1)), NodeWhile(NodeRel(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 5)), NodeList(println_NodeCallFct(NodeList(NodeOp(NodeOp(NodeLiteral(TypeInt, 1000)), NodeLiteral(TypeInt, 0)))), NodeAssign(NodeLiteral(TypeInt, 0), NodeOp(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1))))), println_NodeCallFct(NodeList(NodeLiteral(TypeString, X))), NodeAssign(NodeLiteral(TypeInt, 0), NodeOp(NodeLiteral(TypeInt, 0), NodeLiteral(TypeInt, 1))))))))
